import{_ as o,r as c,o as i,c as p,b as s,d as n,e as a,a as t}from"./app-53705635.js";const l={},r=s("h1",{id:"_2021-css实用新功能",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_2021-css实用新功能","aria-hidden":"true"},"#"),n(" 2021 CSS实用新功能")],-1),d=s("h2",{id:"自定义属性与变量",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#自定义属性与变量","aria-hidden":"true"},"#"),n(" 自定义属性与变量")],-1),u={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/--*",target:"_blank",rel:"noopener noreferrer"},v=s("p",null,"自定义属性基本上允许我们定义 CSS 属性的替代品以用于我们的设计。一个例子就能让你理解为什么说这个功能有用：",-1),m={href:"https://websitesetup.org/website-color-schemes/",target:"_blank",rel:"noopener noreferrer"},b=s("strong",null,"配色方案",-1),h=t(`<div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">a</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #cd2653<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.social-icons a</span> <span class="token punctuation">{</span>
    <span class="token property">background</span><span class="token punctuation">:</span> #cd2653<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.wp-block-button.is-style-outline</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #cd2653<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),k={href:"https://torquemag.io/2015/12/17-best-code-editors-wordpress-developers-users/",target:"_blank",rel:"noopener noreferrer"},_=s("strong",null,"代码编辑器",-1),g=t(`<h3 id="更好的解决方案" tabindex="-1"><a class="header-anchor" href="#更好的解决方案" aria-hidden="true">#</a> 更好的解决方案</h3><p>自定义属性就解决了这个问题。在它们的帮助下，我们可以轻松地将刚才所说的配色分配给一个变量，然后每次使用该颜色时，只需将其作为 CSS 属性输入即可，如下所示：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">:root</span> <span class="token punctuation">{</span>
    <span class="token property">--global--color-primary</span><span class="token punctuation">:</span> #28303d<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">a</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--global--color-primary<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.social-icons a</span> <span class="token punctuation">{</span>
    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--global--color-primary<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),f={href:"https://torquemag.io/2017/06/start-using-sass-wordpress-npm-scripts/",target:"_blank",rel:"noopener noreferrer"},S=t(`<p>正如您在上面看到的，自定义属性也非常易于使用。在 <code>:root</code> 选择器下的文档开始处定义变量（请注意，变量前面应使用双连字符 <code>--</code>，这是将变量称为自定义属性的原因，它们也区分大小写！）。之后我们就可以通过 <code>var()</code> 函数在整个文档中使用它们。</p><p>如果要更改变量，只需更改 <code>:root</code> 下面的声明就可以了。</p><h2 id="supports" tabindex="-1"><a class="header-anchor" href="#supports" aria-hidden="true">#</a> @supports</h2><p>接下来，有一个类似于媒体查询的 CSS 规则。不过我们不是用它基于屏幕大小或设备类型编写特定的样式，而是根据用户浏览器支持的 CSS 属性和值，应用特定的样式。</p><p>这有什么用？</p><p>正如你将在本文中看到的那样，并非所有的浏览器和设备都支持所有 CSS 功能。尽管我们通常可以使用优雅降级来处理此问题，但在某些情况下，如果我们不专门包括对最新的技术的支持，则使用这些技术可能会严重破坏我们的网站的样式结构。</p><p>此外，我们还可以使用 <code>@supports</code> 为支持特定功能的更现代的浏览器添加额外的功能或样式（这就是为什么使用的查询 <code>@supports</code> 也称为“功能查询”的原因）。</p><h3 id="如何使用功能查询" tabindex="-1"><a class="header-anchor" href="#如何使用功能查询" aria-hidden="true">#</a> 如何使用功能查询</h3><p>如果您熟悉媒体查询，则使用支持检查将非常容易。使用方法如下：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@supports</span> <span class="token punctuation">(</span><span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
    <span class="token selector">.site-content</span> <span class="token punctuation">{</span>
        <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如你所见，其实不过就是规则的声明后跟要在方括号中检查的属性或属性 — 值对，再加上我们平时用的 CSS 声明用于说明满足条件时要应用哪些样式规则。</p><p>上面的示例指出，如果浏览器支持 CSS 网格功能（稍后将对此进行详细介绍），则应用 <code>display: grid;</code> 样式到 <code>.site-content</code> 的元素。</p><p>同样重要的是要注意 <code>@supports</code> 支持使用运算符 <code>not</code>、<code>and</code> 和 <code>or</code>（也可以结合使用）以创建更具体的规则，例如对不支持该特定功能的浏览器的优雅降级：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@supports</span> <span class="token keyword">not</span> <span class="token punctuation">(</span><span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
    <span class="token selector">.site-content</span> <span class="token punctuation">{</span>
        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),y=s("code",null,"@supports",-1),x={href:"https://caniuse.com/css-featurequeries",target:"_blank",rel:"noopener noreferrer"},C=s("h2",{id:"内容可见性",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#内容可见性","aria-hidden":"true"},"#"),n(" 内容可见性")],-1),w=s("code",null,"content-visibility",-1),q={href:"https://torquemag.io/2015/08/ways-to-speed-up-wordpress-decrease-page-load-time/",target:"_blank",rel:"noopener noreferrer"},z={href:"https://torquemag.io/2018/01/lazy-load-wordpress/",target:"_blank",rel:"noopener noreferrer"},N=t(`<p>使用也超级容易。只需将其应用于我们选择的元素，如下所示：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.content-below-fold</span> <span class="token punctuation">{</span>
    <span class="token property">content-visibility</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>content-visibility</code> 支持三个值。默认情况下为 <code>visible</code>，此时元素将照常加载。我们可以将其设置为 <code>hidden</code>，即无论元素是否可见都不会呈现该元素。设置为 <code>auto</code> 时，则会跳过可见区域之外的元素，然后在它们出现在屏幕上时才开始进行渲染。</p><p>这可是很酷的东西，对不对？</p><p>在这种情况下可能也很重要的一件事是考虑一下 <code>contain-intrinsic-size</code>。由于设置为 <code>content-visibility: hidden;</code> 的元素的大小实际上为零，因此我们可以将理论高度和宽度应用于隐藏的元素，以便浏览器可以从一开始就将其考虑在内，而不是在渲染元素时考虑。这样，我们可以避免在滚动过程中布局被突然改变。</p>`,5),V={href:"https://caniuse.com/css-content-visibility",target:"_blank",rel:"noopener noreferrer"},B=s("code",null,"content-visibility",-1),E={href:"https://caniuse.com/mdn-css_properties_contain-intrinsic-size",target:"_blank",rel:"noopener noreferrer"},L=s("code",null,"contain-intrinsic-size",-1),T=s("h2",{id:"滚动捕捉",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#滚动捕捉","aria-hidden":"true"},"#"),n(" 滚动捕捉")],-1),D={href:"https://codepen.io/tutsplus/pen/qpJYaK",target:"_blank",rel:"noopener noreferrer"},I=t(`<p>这种效果在移动设备的应用程序中很明显，但是，通过滚动捕捉，我们也可以将其带到网站上。</p><p>在最基本的情况上用法也相对简单。我们只需将滚动捕捉的类型应用于容器并定义其子对象应捕捉到的位置。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
    <span class="token property">scroll-snap-type</span><span class="token punctuation">:</span> y mandatory<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.container div</span> <span class="token punctuation">{</span>
    <span class="token property">scroll-snap-align</span><span class="token punctuation">:</span> start<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),M={href:"https://css-tricks.com/practical-css-scroll-snapping/",target:"_blank",rel:"noopener noreferrer"},W=s("strong",null,"很完美的文章",-1),H=t(`<h2 id="is-和-where" tabindex="-1"><a class="header-anchor" href="#is-和-where" aria-hidden="true">#</a> :is 和 :where</h2><p>你可能不知道的新 CSS 功能列表中的最后一个条目是 <code>:is</code> 和 <code>:where</code> 伪类，它们允许我们通过缩短 CSS 选择器列表来减少 CSS 样式中的重复代码。</p><p>例如：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.main a:hover,
.sidebar a:hover,
.site-footer a:hover</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 样式 */</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有这个：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">:is(.main, .sidebar, .site-footer) a:hover</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 样式 */</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同理 <code>:where</code>:</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">:where(.main, .sidebar, .site-footer) a:hover</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 样式 */</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果包含的样式标记相同，那又会有什么区别？区别在于 <code>:is</code> 更加具体。它采用括号中最具体元素的针对性级别。与此相反，<code>:where</code> 的针对性始终为零。因此更容易按照案例进行覆盖。</p>`,9);function J(K,P){const e=c("ExternalLinkIcon");return i(),p("div",null,[r,d,s("p",null,[n("译者注：这里的自定义属性（Custom Properties）和我们所说的变量是一个东西，见 "),s("a",u,[n("MDN Web Doc"),a(e)])]),v,s("p",null,[n("通常，在构建主题时，我们会选择一种"),s("a",m,[b,a(e)]),n("，然后在必要时声明这些颜色。")]),h,s("p",null,[n("这种方法的问题是，如果我们想要更改一种颜色，则必须在每一处使用了这个颜色的地方做出对应的修改。尽管"),s("a",k,[_,a(e)]),n("可以通过搜索和替换轻松地做到这一点，但这仍然很烦人。尤其是如果我们只是想进行快速测试，并且必须再次撤消所有操作。")]),g,s("p",null,[n("这样，每当我们想要对配色进行更改时，只需要在一个地方进行更改即可。太酷了吧？过去，我们还需要使用 "),s("a",f,[n("Sass"),a(e)]),n(" 之类的预处理器来使用变量，而现在它是 CSS 的原生功能。")]),S,s("p",null,[n("为了能够正常使用 "),y,n(" 功能，你需要知道哪些浏览器支持它（我知道，这是一种元数据）。好消息是**"),s("a",x,[n("所有的现代浏览器都支持"),a(e)]),n("**。")]),C,s("p",null,[w,n(" 是 CSS 中一个非常酷的新功能，能够有效"),s("a",q,[n("提高网站性能"),a(e)]),n("。它基本上像"),s("a",z,[n("延迟加载"),a(e)]),n("一样工作，而且不仅适用于图像，还适用于任何 HTML 元素。我们可以使用它来实现网站的懒加载。")]),N,s("p",null,[n("浏览器支持方面，"),s("a",V,[B,a(e)]),n(" 仍然有些差劲，不过正在朝着那个方向前进着，"),s("a",E,[L,a(e)]),n(" 同理。")]),T,s("p",null,[n("滚动捕捉让我们可以选择将用户的视口锁定到站点的某些部分或元素。对于创建很酷的过渡效果并在向下滚动页面帮助用户专注于最重要的页面元素的场景而言，这个功能非常有用。我们可以"),s("a",D,[n("在这里"),a(e)]),n("找到一个简单的演示。")]),I,s("p",null,[n("当然还有更多有关它的使用特色。如果你想了解它，CSS Tricks 已经有了一篇"),s("a",M,[W,a(e)]),n("了。")]),H])}const j=o(l,[["render",J],["__file","CSS实用新功能.html.vue"]]);export{j as default};
