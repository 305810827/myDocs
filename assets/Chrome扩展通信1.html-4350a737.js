import{_ as n,o as s,c as a,a as t}from"./app-53705635.js";const p={},e=t(`<h1 id="chrome扩展通信" tabindex="-1"><a class="header-anchor" href="#chrome扩展通信" aria-hidden="true">#</a> Chrome扩展通信</h1><h2 id="chrome扩展的5种js" tabindex="-1"><a class="header-anchor" href="#chrome扩展的5种js" aria-hidden="true">#</a> chrome扩展的5种js</h2><table><thead><tr><th>js类型</th><th>介绍</th></tr></thead><tbody><tr><td>popup</td><td>单击插件图标后的弹窗中的js，由于单击图标打开popup，焦点离开又立即关闭，生命周期一般很短。</td></tr><tr><td>content-script</td><td>与页面共享DOM，但是不共享JS，可访问部分chrome扩展API。</td></tr><tr><td>background</td><td>权限最高，几乎可调用所有Chrome扩展API（除了devTools），且可以无限制跨域。生命周期最长，跟随浏览器开关。</td></tr><tr><td>injected-script</td><td>通过DOM操作的方式向页面注入的一种JS，和原始页面共享js（即可访问原始页面变量，方法等），无法访问Chrome扩展API。</td></tr><tr><td>devtools</td><td>每打开一个开发者工具窗口，都会创建devtools的页面的实例，F12窗口关闭，页面也随之关闭，故devtools的生命周期和devtools窗口是一致的。可访问一组特有的DevTools API（background都无权访问）：chrome.devtools.panels（面板相关）；chrome.devtools.inspectedWindow（获取被审查窗口的相关信息）；chrome.devtools.network（获取有关网络请求信息）。</td></tr></tbody></table><h2 id="chrome插件提供的2种额外的通信方式" tabindex="-1"><a class="header-anchor" href="#chrome插件提供的2种额外的通信方式" aria-hidden="true">#</a> Chrome插件提供的2种额外的通信方式</h2><ol><li><code>chrome.tabs.sendMessage</code>和<code>chrome.runtime.sendMessage</code> 用于简单的一次性请求;</li><li><code>chrome.tabs.connect</code>和<code>chrome.runtime.connect</code>，用于长时效连接。</li></ol><h2 id="通信接口使用限制" tabindex="-1"><a class="header-anchor" href="#通信接口使用限制" aria-hidden="true">#</a> 通信接口使用限制</h2><table><thead><tr><th></th><th>inject-script</th><th>content-script</th><th>popup-js</th><th>background</th></tr></thead><tbody><tr><td>inject-script</td><td>-</td><td>window.postMessage</td><td>-</td><td>-</td></tr><tr><td>content-script</td><td>window.postMessage</td><td>-</td><td>chrome.runtime.sendMessage chrome.runtime.connect</td><td>chrome.runtime.sendMessage chrome.runtime.connect</td></tr><tr><td>popup-js</td><td>-</td><td>chrome.tabs.sendMessage chrome.tabs.connect</td><td>-</td><td>chrome.runtime.sendMessage chrome.runtime.connect</td></tr><tr><td>background-js</td><td>-</td><td>chrome.tabs.sendMessage chrome.tabs.connect</td><td>chrome.tabs.sendMessage chrome.tabs.connect</td><td>-</td></tr><tr><td>devtools-js</td><td>chrome.devtools.inspectedWindow.eval</td><td></td><td>chrome.runtime.sendMessage</td><td>chrome.runtime.sendMessage</td></tr></tbody></table><blockquote><p><code>chrome.runtime.onMessageExternal</code> 接口用于扩展间通信，与<code>chrome.tabs.sendMessage</code> 用法类似。</p></blockquote><h2 id="一次性请求" tabindex="-1"><a class="header-anchor" href="#一次性请求" aria-hidden="true">#</a> 一次性请求</h2><p>一次性请求类似于HTTP请求，包含一次请求和一次返回，且如果接收方不在线，就会出现请求失败；</p><h3 id="扩展程序-popup、background-向content-script一次性通信" tabindex="-1"><a class="header-anchor" href="#扩展程序-popup、background-向content-script一次性通信" aria-hidden="true">#</a> 扩展程序（popup、background）向content-script一次性通信</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//popup.js发送</span>
<span class="token keyword">function</span> <span class="token function">sendToContentScript</span><span class="token punctuation">(</span><span class="token parameter">message<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	chrome<span class="token punctuation">.</span>tabs<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">active</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">currentWindow</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">tabs</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		chrome<span class="token punctuation">.</span>tabs<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>tabs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span> message<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">sendToContentScript</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">cmd</span><span class="token operator">:</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span><span class="token string">&#39;popup_to_content&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>   <span class="token operator">*</span><span class="token comment">// {res:&#39;content_to_popup&#39;}*</span>
<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// content_script.js接收</span>
chrome<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>onMessage<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> sender<span class="token punctuation">,</span> sendResponse</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>   <span class="token operator">*</span><span class="token comment">// {cmd:&#39;test&#39;, value:&#39;popup_to_content&#39;}*</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>cmd <span class="token operator">===</span> <span class="token string">&#39;content_to_bg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token function">sendResponse</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">res</span><span class="token operator">:</span><span class="token string">&#39;content_to_popup&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	  <span class="token comment">// 若异步使用sendResponse，需添加return true*</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>双方通信直接发送的都是JSON对象，不是JSON字符串，所以无需解析，很方便（当然也可以直接发送字符串）</p><h3 id="content-script主动向扩展程序-background、popup-一次性通信" tabindex="-1"><a class="header-anchor" href="#content-script主动向扩展程序-background、popup-一次性通信" aria-hidden="true">#</a> content-script主动向扩展程序（background、popup）一次性通信</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// content_script.js发送</span>
chrome<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">cmd</span><span class="token operator">:</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span><span class="token string">&#39;content_to_bg&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//{res:&#39;bg_to_content&#39;}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// background.js接收</span>
chrome<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>onMessage<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> sender<span class="token punctuation">,</span> sendResponse</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// {cmd: &#39;test&#39;, value:&#39;content_to_bg&#39;}</span>
	<span class="token function">sendResponse</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">res</span><span class="token operator">:</span><span class="token string">&#39;bg_to_content&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意事项</strong>：</p><ul><li><code>content_scripts</code>向<code>popup</code>主动发消息的前提是<code>popup</code>处于打开状态，否则需要利用<code>background</code>作中转；</li><li>使用<code>chrome.runtime.sendMessage</code>后无论是否需要回应，接收方都需调用<code>sendReponse</code>反馈，若不调用则<strong>发送方</strong>就会报错：</li><li>如果<code>background</code>和<code>popup</code>同时监听，那么它们都可以同时收到消息，但是只有一个可以<code>sendResponse</code>，一个先发送了，那么另外一个再发送就<strong>无效</strong>；</li></ul><h3 id="页面脚本-包括inject-script-和content-script之间一次性通信" tabindex="-1"><a class="header-anchor" href="#页面脚本-包括inject-script-和content-script之间一次性通信" aria-hidden="true">#</a> 页面脚本（包括inject-script）和content-script之间一次性通信</h3><p>由于inject-script和content-script内均可获取到原始页面的window对象，故可通过<code>window.postMessage</code>来进行通信。该方法还可规避跨域的限制,可以在任意页面之间进行通信。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">//inject-script</span>
window<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">cmd</span><span class="token operator">:</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span><span class="token literal-property property">value</span><span class="token operator">:</span><span class="token string">&quot;inject_to_content&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span>

<span class="token comment">//content-script</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token comment">//{cmd:&quot;test&quot;,value:&quot;inject_to_content&quot;}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="长时效连接" tabindex="-1"><a class="header-anchor" href="#长时效连接" aria-hidden="true">#</a> 长时效连接</h2><p>长连类似 <code>WebSocket</code>，建立连接后会一直保持，双方可以随时互发消息。</p><h3 id="chrome-tabs-connect和chrome-runtime-connect-长时效连接通信示例" tabindex="-1"><a class="header-anchor" href="#chrome-tabs-connect和chrome-runtime-connect-长时效连接通信示例" aria-hidden="true">#</a> <code>chrome.tabs.connect</code>和<code>chrome.runtime.connect</code> 长时效连接通信示例</h3><p>扩展程序和web页面之间建立长连接，只需要从一端建立就可以了。 <strong>在popup或js或background发起连接请求：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//popup.js或background.js 发起连接需要指定发送到某个标签页</span>
chrome<span class="token punctuation">.</span>tabs<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">active</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">currentWindow</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">tabs</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> port <span class="token operator">=</span> chrome<span class="token punctuation">.</span>tabs<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>tabs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;popup&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//向指定tabd页发起连接请求</span>
	port<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">cmd</span><span class="token operator">:</span> <span class="token string">&#39;popup-connect&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">value</span><span class="token operator">:</span><span class="token string">&#39;extension&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	port<span class="token punctuation">.</span>onMessage<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token parameter">msg</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>cmd <span class="token operator">===</span> <span class="token string">&#39;connected&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">//do something</span>
			port<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">cmd</span><span class="token operator">:</span> <span class="token string">&#39;done&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在content-script发起连接和监听消息：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// content-script直接建立长链接</span>
<span class="token keyword">const</span> port <span class="token operator">=</span> chrome<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;content&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
port<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">cmd</span><span class="token operator">:</span> <span class="token string">&#39;cnt-connect&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
port<span class="token punctuation">.</span>onMessage<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token parameter">msg</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>cmd <span class="token operator">===</span> <span class="token string">&#39;connected&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token comment">//do something</span>
		port<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">cmd</span><span class="token operator">:</span> <span class="token string">&#39;done&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>任意一端监听连接请求：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>chrome<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>onConnect<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token parameter">port</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>port<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">&#39;popup&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		port<span class="token punctuation">.</span>onMessage<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token parameter">msg</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>cmd<span class="token operator">==</span> <span class="token string">&#39;popup-connect&#39;</span><span class="token punctuation">)</span> port<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">cmd</span><span class="token operator">:</span> <span class="token string">&#39;connnected&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>port<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;content&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token operator">...</span><span class="token operator">...</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="postmessage和messagechannel-长时效连接通信" tabindex="-1"><a class="header-anchor" href="#postmessage和messagechannel-长时效连接通信" aria-hidden="true">#</a> <code>postMessage</code>和<code>messageChannel</code> 长时效连接通信</h3><ul><li>同一MessageChannel实例下的port1和port2两个对象可以通过<code>postMessage</code>和<code>onmessage</code>方法相互发送和接收消息;</li><li>port1和port2是MessagePort实例，MessagePort继承了Transferable接口，可在不同可执行上下文之间传递。</li><li><code>window.postMessage(message, targetOrigin, [transfer])</code>,第三个参数可以用来传递Transferable对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//inject-script</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>port1<span class="token punctuation">,</span>port2<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;load&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
port1<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
window<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&#39;来自inject_script的信息&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>port2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//content-script</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token parameter">e</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  e<span class="token punctuation">.</span>port<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&#39;来自content-script的信息&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32),o=[e];function c(i,u){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","Chrome扩展通信1.html.vue"]]);export{r as default};
