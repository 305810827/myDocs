import{_ as e,o,c as t,a}from"./app-53705635.js";const i={},d=a(`<h2 id="cookie" tabindex="-1"><a class="header-anchor" href="#cookie" aria-hidden="true">#</a> Cookie</h2><h5 id="name和value" tabindex="-1"><a class="header-anchor" href="#name和value" aria-hidden="true">#</a> name和value</h5><p>Name和Value是一个键值对。Name是Cookie的名称，Cookie一旦创建，名称便不可更改，一般名称不区分大小写；Value是该名称对应的Cookie的值，如果值为Unicode字符，需要为字符编码。如果值为二进制数据，则需要使用BASE64编码。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>document.cookie = &#39;name=xxx;&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="domain" tabindex="-1"><a class="header-anchor" href="#domain" aria-hidden="true">#</a> domain</h5><p>Domain决定Cookie在哪个域是有效的，也就是决定在向该域发送请求时是否携带此Cookie，Domain的设置是对子域生效的，如Doamin设置为 .a.com,则b.a.com和c.a.com均可使用该Cookie，但如果设置为b.a.com,则c.a.com不可使用该Cookie。</p><h5 id="path" tabindex="-1"><a class="header-anchor" href="#path" aria-hidden="true">#</a> path</h5><p>Path是Cookie的有效路径，和Domain类似，也对子路径生效，如Cookie1和Cookie2的Domain均为a.com，但Path不同，Cookie1的Path为 /b/,而Cookie的Path为 /b/c/,则在a.com/b页面时只可以访问Cookie1，在a.com/b/c页面时，可访问Cookie1和Cookie2。Path属性需要使用符号“/”结尾。</p><h5 id="expires-max-age" tabindex="-1"><a class="header-anchor" href="#expires-max-age" aria-hidden="true">#</a> Expires/Max-age</h5><p>Expires和Max-age均为Cookie的有效期，Expires是该Cookie被删除时的时间戳，格式为GMT,若设置为以前的时间，则该Cookie立刻被删除，并且该时间戳是服务器时间，不是本地时间！若不设置则默认页面关闭时删除该Cookie。 Max-age也是Cookie的有效期，但它的单位为秒，即多少秒之后失效，若Max-age设置为0，则立刻失效，设置为负数，则在页面关闭时失效。Max-age默认为 -1。</p><h5 id="size" tabindex="-1"><a class="header-anchor" href="#size" aria-hidden="true">#</a> size</h5><p>Szie是此Cookie的大小。在所有浏览器中，任何cookie大小超过限制都被忽略，且永远不会被设置。各个浏览器对Cookie的最大值和最大数目有不同的限制</p><h5 id="httponly" tabindex="-1"><a class="header-anchor" href="#httponly" aria-hidden="true">#</a> HttpOnly</h5><p>HttpOnly值为 true 或 false,若设置为true，则不允许通过脚本document.cookie去更改这个值，同样这个值在document.cookie中也不可见，但在发送请求时依旧会携带此Cookie</p><h5 id="secure" tabindex="-1"><a class="header-anchor" href="#secure" aria-hidden="true">#</a> secure</h5><p>Secure为Cookie的安全属性，若设置为true，则浏览器只会在HTTPS和SSL等安全协议中传输此Cookie，不会在不安全的HTTP协议中传输此Cookie。</p><h5 id="samesite" tabindex="-1"><a class="header-anchor" href="#samesite" aria-hidden="true">#</a> sameSite</h5><p>SameSite 可以设置为以下几个值</p><ul><li>none (旧 chrome 版本（80以下）默认规则)</li></ul><p>浏览器会在同站请求、跨站请求下继续发送 cookies，不区分大小写。网站可以选择显式关闭SameSite属性，将其设为None。不过，前提是必须同时设置Secure属性（Cookie 只能通过 HTTPS 协议发送），否则无效。</p><ul><li>Strict</li></ul><p>浏览器将只在访问相同站点时发送 cookie。</p><ul><li>Lax （新 chrome 版本默认规则）</li></ul><p>规则稍稍放宽，大多数情况也是不发送第三方 cookie，但是导航到目标网址的 get 请求除外。</p><p>导航到目标网址的 get 请求，只包括三种情况：链接，预加载请求，get 表单。详见下表。</p><table><thead><tr><th>请求类型</th><th>示例</th><th>正常情况</th><th>Lax</th></tr></thead><tbody><tr><td>链接</td><td><code>&lt;a href=&quot;...&quot;&gt;&lt;/a&gt;</code></td><td>发送 Cookie</td><td>发送 Cookie</td></tr><tr><td>预加载</td><td><code>&lt;link rel=&quot;prerender&quot; href=&quot;...&quot;/</code>&gt;</td><td>发送 Cookie 发送</td><td>Cookie</td></tr><tr><td>GET 表单</td><td><code>&lt;form method=&quot;GET&quot; action=&quot;...&quot;&gt;</code></td><td>发送 Cookie 发送</td><td>Cookie</td></tr><tr><td>POST 表单</td><td><code>&lt;form method=&quot;POST&quot; action=&quot;...&quot;&gt;</code></td><td>发送 Cookie</td><td>不发送</td></tr><tr><td>iframe</td><td><code>&lt;iframe src=&quot;...&quot;&gt;&lt;/iframe&gt;</code></td><td>发送 Cookie</td><td>不发送</td></tr><tr><td>AJAX</td><td><code>$.get(&quot;...&quot;)</code></td><td>发送 Cookie</td><td>不发送</td></tr><tr><td>Image</td><td><code>&lt;img src=&quot;...&quot;&gt;</code></td><td>发送 Cookie</td><td>不发送</td></tr></tbody></table><p>设置为 Lax 和 Strict 可以杜绝很多 csrf 攻击</p><h5 id="priority" tabindex="-1"><a class="header-anchor" href="#priority" aria-hidden="true">#</a> Priority</h5><p>优先级，chrome的提案，定义了三种优先级，Low/Medium/High，当cookie数量超出时，低优先级的cookie会被优先清除。</p><h3 id="cookie、localstorage、sessionstorage" tabindex="-1"><a class="header-anchor" href="#cookie、localstorage、sessionstorage" aria-hidden="true">#</a> Cookie、localStorage、sessionStorage</h3><h5 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期：</h5><p>cookie：可设置失效时间，没有设置的话，默认是关闭浏览器后失效</p><p>localStorage：除非被手动清除，否则将会永久保存。</p><p>sessionStorage： 仅在当前网页会话下有效，关闭页面或浏览器后就会被清除。</p><h5 id="存放数据大小" tabindex="-1"><a class="header-anchor" href="#存放数据大小" aria-hidden="true">#</a> 存放数据大小：</h5><p>cookie：4KB左右</p><p>localStorage和sessionStorage：可以保存5MB的信息。</p><h5 id="http请求" tabindex="-1"><a class="header-anchor" href="#http请求" aria-hidden="true">#</a> http请求：</h5><p>cookie：每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题</p><p>localStorage和sessionStorage：仅在客户端（即浏览器）中保存，不参与和服务器的通信</p>`,40),r=[d];function h(c,n){return o(),t("div",null,r)}const l=e(i,[["render",h],["__file","Cookie属性.html.vue"]]);export{l as default};
