import{_ as e,o as r,c as a,a as s}from"./app-53705635.js";const t="/assets/image-20220209171122837-32a58822.png",c={},o=s('<h3 id="一、csrf是什么" tabindex="-1"><a class="header-anchor" href="#一、csrf是什么" aria-hidden="true">#</a> 一、CSRF是什么？</h3><p>CSRF（Cross-site request forgery），中文名称：跨站请求伪造，也被称为：one click attack/session riding，缩写为：CSRF/XSRF。</p><h3 id="二、csrf可以做什么" tabindex="-1"><a class="header-anchor" href="#二、csrf可以做什么" aria-hidden="true">#</a> 二、CSRF可以做什么？</h3><p>你这可以这么理解CSRF攻击：攻击者盗用了你的身份，以你的名义发送恶意请求。CSRF能够做的事情包括：以你名义发送邮件，发消息，盗取你的账号，甚至于购买商品，虚拟货币转账…造成的问题包括：个人隐私泄露以及财产安全。</p><h3 id="三、csrf漏洞现状" tabindex="-1"><a class="header-anchor" href="#三、csrf漏洞现状" aria-hidden="true">#</a> 三、CSRF漏洞现状</h3><p>CSRF这种攻击方式在2000年已经被国外的安全人员提出，但在国内，直到06年才开始被关注，08年，国内外的多个大型社区和交互网站分别 爆出CSRF漏洞，如：NYTimes.com（纽约时报）、Metafilter（一个大型的BLOG网站），YouTube和百度HI…而 现在，互联网上的许多站点仍对此毫无防备，以至于安全业界称CSRF为“沉睡的巨人”。</p><h2 id="四、csrf的原理" tabindex="-1"><a class="header-anchor" href="#四、csrf的原理" aria-hidden="true">#</a> 四、CSRF的原理</h2><p><img src="'+t+'" alt="image-20220209171122837"></p><p>从上图可以看出，要完成一次CSRF攻击，受害者必须依次完成两个步骤：</p><p>登录受信任网站A，并在本地生成Cookie 在不登出A的情况下，访问危险网站B 看到这里，你也许会说：“如果我不满足以上两个条件中的一个，我就不会受到CSRF的攻击”。是的，确实如此，但你不能保证以下情况不会发生：</p><p>你不能保证你登录了一个网站后，不再打开一个tab页面并访问另外的网站 你不能保证你关闭浏览器了后，你本地的Cookie立刻过期，你上次的会话已经结束。（事实上，关闭浏览器不能结束一个会话，但大多数人都会错误的认为关闭浏览器就等于退出登录/结束会话了…） 上图中所谓的攻击网站，可能是一个存在其他漏洞的可信任的经常被人访问的网站 上面大概地讲了一下CSRF攻击的思想，下面我将用几个例子详细说说具体的CSRF攻击，这里我以一个银行转账的操作作为例子（仅仅是例子，真实的银行网站没这么傻:&gt;） https://www.cnblogs.com/lovesong/p/5233195.html</p>',11),i=[o];function n(h,d){return r(),a("div",null,i)}const f=e(c,[["render",n],["__file","Cross-Site-Request-Forgery.html.vue"]]);export{f as default};
