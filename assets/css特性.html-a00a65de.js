import{_ as s,o as n,c as a,a as t}from"./app-53705635.js";const e="/assets/image-20201102000634173-61b3679d.png",p={},c=t('<h3 id="css-三大特性" tabindex="-1"><a class="header-anchor" href="#css-三大特性" aria-hidden="true">#</a> css 三大特性</h3><h4 id="_1、层叠性-css样式冲突采取原则-后者覆盖前者" tabindex="-1"><a class="header-anchor" href="#_1、层叠性-css样式冲突采取原则-后者覆盖前者" aria-hidden="true">#</a> 1、层叠性：css样式冲突采取原则（后者覆盖前者）</h4><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/21574af804ab4409afcdefafb1265278~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><h4 id="_2、继承性-对于部分属性样式会有天生的继承" tabindex="-1"><a class="header-anchor" href="#_2、继承性-对于部分属性样式会有天生的继承" aria-hidden="true">#</a> 2、继承性：对于部分属性样式会有天生的继承</h4><p>（1）字体系列属性</p><p>font-family：字体系列</p><p>font-weight：字体的粗细</p><p>font-size：字体的大小</p><p>font-style：字体的风格</p><p>（2）文本系列属性</p><p>text-indent：文本缩进</p><p>text-align：文本水平对齐</p><p>line-height：行高</p><p>word-spacing：单词之间的间距</p><p>letter-spacing：中文或者字母之间的间距</p><p>text-transform：控制文本大小写（就是uppercase、lowercase、capitalize这三个）</p><p>color：文本颜色</p><p>（3）元素可见性：</p><p>visibility：控制元素显示隐藏</p><p>（4）列表布局属性：</p><p>list-style：列表风格，包括list-style-type、list-style-image等</p><p>（5）光标属性：</p><p>cursor：光标显示为何种形态</p><h5 id="控制继承的四个属性" tabindex="-1"><a class="header-anchor" href="#控制继承的四个属性" aria-hidden="true">#</a> 控制继承的四个属性</h5><ul><li><code>inherit</code>: 被应用属性继承父级的该属性（默认就是该值）</li><li><code>initial</code>初始化，把应用属性初始为它默认的样式，并且排除继承的干扰（默认会继承的属性也不在默认继承，而是表现出没有任何设置时候的默认样式）</li><li><code>unset</code>：意思是恢复其原本的继承方式。对<code>color</code>属性而言，就相当于<code>inherit</code>；而对于诸如<code>border</code>这样默认不继承的属性，就相当于<code>initial</code>。</li><li><code>revert</code>: 效果等同于<code>unset</code>且浏览器支持有限</li></ul><h4 id="_3、优先性-选择器优先级算法" tabindex="-1"><a class="header-anchor" href="#_3、优先性-选择器优先级算法" aria-hidden="true">#</a> 3、优先性：选择器优先级算法</h4><p><img src="'+e+`" alt="image-20201102000634173"></p><p><strong>值从左到右，左面的最大，一级大于一级，数位之间没有进制，级别之间不可超越。</strong></p><ul><li>div ul li ------&gt; 0,0,0,3</li><li>.nav ul li ------&gt; 0,0,1,2</li><li>a:hover -----—&gt; 0,0,1,1</li><li>.nav a ------&gt; 0,0,1,1</li></ul><p><strong>important适用优先级</strong>💡</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">#id div.box div</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> green <span class="token important">!important</span><span class="token punctuation">;</span> // 使用这个选择器中的颜色
<span class="token punctuation">}</span>

<span class="token selector">#id .box div</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> red <span class="token important">!important</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="deep-深度作用选择器" tabindex="-1"><a class="header-anchor" href="#deep-深度作用选择器" aria-hidden="true">#</a> /deep/深度作用选择器</h5><p>vue当 <code>&lt;style&gt;</code> 标签有 <code>scoped</code> 属性时，它的 CSS 只作用于当前组件中的元素。</p><p>它通过使用 PostCSS 来实现以下转换：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token selector">.example</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>example<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>hi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>转换结果：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token selector">.example[data-v-f3f3eg9]</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>example<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-v-f3f3eg9</span><span class="token punctuation">&gt;</span></span>hi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>scoped</code> 后，父组件的样式将不会渗透到子组件中。不过一个子组件的根节点会同时受其父组件的 scoped CSS 和子组件的 scoped CSS 的影响。这样设计是为了让父组件可以从布局的角度出发，调整其子组件根元素的样式。</p><p>如果你希望 <code>scoped</code> 样式中的一个选择器能够作用得“更深”，例如影响子组件，你可以使用 <code>&gt;&gt;&gt;</code> 操作符：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token selector">.a &gt;&gt;&gt; .b</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码将会编译成：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.a[data-v-f3f3eg9] .b</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过 <code>v-html</code> 创建的 DOM 动态生成的内容不受 scoped 样式影响，但是你仍然可以通过深度作用选择器来为他们设置样式</p><p>想要覆盖组件库组件样式，实现我们自己的样式时，可以使用/deep/深度作用选择器</p>`,44),l=[c];function o(i,d){return n(),a("div",null,l)}const r=s(p,[["render",o],["__file","css特性.html.vue"]]);export{r as default};
