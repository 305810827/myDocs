import{_ as t,r as p,o,c,b as s,d as n,e as i,a}from"./app-53705635.js";const r={},u=a('<h3 id="一、两者区别" tabindex="-1"><a class="header-anchor" href="#一、两者区别" aria-hidden="true">#</a> 一、两者区别</h3><p>区别一：</p><p><code>data</code>不需要用户（开发者）传值，自身维护</p><p><code>props</code>需要用户（开发者）传值</p><p>区别二：</p><p>1、data上的数据都是可读可写的，</p><p>2、props上的数据只可以读的，无法重新赋值</p><h3 id="二、props为什么不能修改" tabindex="-1"><a class="header-anchor" href="#二、props为什么不能修改" aria-hidden="true">#</a> 二、props为什么不能修改</h3>',8),l={href:"https://so.csdn.net/so/search?q=%E5%8D%95%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},d=a(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外变更父级组件的状态，从而导致你的应用的数据流向难以理解。
额外的，每次父级组件发生变更时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三、vue是如何监控props属性被子组件修改并给出警告的" tabindex="-1"><a class="header-anchor" href="#三、vue是如何监控props属性被子组件修改并给出警告的" aria-hidden="true">#</a> 三、Vue是如何监控props属性被子组件修改并给出警告的</h3><p>在组件 initProps 方法的时候，会对props进行defineReactive操作，传入的第四个参数是自定义的set函数，该函数会在触发props的set方法时执行，当props修改了，就会运行这里传入的第四个参数，然后进行判断，如果不是root根组件，并且不是更新子组件，那么说明更新的是props，所以会警告。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> hyphenatedKey <span class="token operator">=</span> <span class="token function">hyphenate</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isReservedAttribute</span><span class="token punctuation">(</span>hyphenatedKey<span class="token punctuation">)</span> <span class="token operator">||</span>
      config<span class="token punctuation">.</span><span class="token function">isReservedAttr</span><span class="token punctuation">(</span>hyphenatedKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">warn</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token string">&quot;\\&quot;&quot;</span> <span class="token operator">+</span> hyphenatedKey <span class="token operator">+</span> <span class="token string">&quot;\\&quot; is a reserved attribute and cannot be used as component prop.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      vm
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">defineReactive$$1</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isRoot <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isUpdatingChildComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">warn</span><span class="token punctuation">(</span>
        <span class="token string">&quot;Avoid mutating a prop directly since the value will be &quot;</span> <span class="token operator">+</span>
        <span class="token string">&quot;overwritten whenever the parent component re-renders. &quot;</span> <span class="token operator">+</span>
        <span class="token string">&quot;Instead, use a data or computed property based on the prop&#39;s &quot;</span> <span class="token operator">+</span>
        <span class="token string">&quot;value. Prop being mutated: \\&quot;&quot;</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">&quot;\\&quot;&quot;</span><span class="token punctuation">,</span>
        vm
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意，当从子组件修改的prop属于基础类型时会触发提示。 这种情况下，你是无法修改父组件的数据源的， 因为基础类型赋值时是值拷贝。 当修改引用类型的属性时不会触发提示，并且会修改父组件数据源的数据。</p>`,5);function k(v,m){const e=p("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("因为Vue是"),s("a",l,[n("单向数据流"),i(e)]),n("，为了保证数据的单向流动，便于对数据的追踪，出现了错误可以更加迅速的定位到错误发生的位置。")]),d])}const b=t(r,[["render",k],["__file","data和props.html.vue"]]);export{b as default};
