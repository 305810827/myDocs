import{_ as e,o as a,c,a as i}from"./app-53705635.js";const d="/assets/image-20231213165253885-867e06cd.png",s={},l=i('<h3 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h3><p>在<code>vue</code>、<code>react</code>出现以后，<code>gulp</code>渐渐淡出了做业务前端人员的视野，14到16年曾是<code>gulp</code>最巅峰的时期，取代了当时最火的<code>grunt</code> ，当时<code>webpack</code>在<code>gulp</code>中还有一个插件（<code>gulp-webpack</code>）作为使其可以作为<code>gulp</code>️一个子任务来执行，直到<code>vue</code>，<code>react</code>等<code>spa</code>项目出现，才让<code>webpack</code>取而代之，<code>gulp</code>也逐渐退出幕前，转战幕后，去做了它更擅长的事情：<strong>前端开发流程规范管理</strong>。</p><h3 id="gulp和webpack" tabindex="-1"><a class="header-anchor" href="#gulp和webpack" aria-hidden="true">#</a> gulp和webpack</h3><p><img src="'+d+`" alt="image-20231213165253885"></p><h3 id="核心api" tabindex="-1"><a class="header-anchor" href="#核心api" aria-hidden="true">#</a> 核心api</h3><ul><li>task: 创建一个任务</li><li>series：顺序执行多个任务</li><li>prallel：并行执行多个任务</li><li>src：读取数据源转换成stream</li><li>pipe：管道-可以在中间对数据流进行处理</li><li>dest：输出数据流到目标路径</li><li>on：事件监听</li><li>watch：数据源监听</li></ul><h3 id="增量编译" tabindex="-1"><a class="header-anchor" href="#增量编译" aria-hidden="true">#</a> 增量编译</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>const since = task =&gt; file =&gt;
  gulp.lastRun(task) &gt; file.stat.ctime ? gulp.lastRun(task) : 0;

const ts = () =&gt; gulp.src(
    &#39;src/**/*.ts&#39;,
    { since: since(ts) }
)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),t=[l];function n(o,r){return a(),c("div",null,t)}const p=e(s,[["render",n],["__file","gulp.html.vue"]]);export{p as default};
