import{_ as n,o as s,c as a,a as e}from"./app-53705635.js";const t={},p=e(`<h3 id="一、什么是hooks" tabindex="-1"><a class="header-anchor" href="#一、什么是hooks" aria-hidden="true">#</a> 一、什么是hooks</h3><p>直译“钩子”，在程序中代表，系统运行在某一时期时，会调用注册在该时机的回调函数。例如浏览器提供的onload或addEventListener能注册在浏览器各种时机调用的方法。</p><h3 id="二、react中的hooks" tabindex="-1"><a class="header-anchor" href="#二、react中的hooks" aria-hidden="true">#</a> 二、react中的hooks</h3><p>一系列以“use”作为开发的方法，提供在<strong>函数式组件</strong>中完成生命周期、状态管理、逻辑复用等几乎全部组件开发工作的能力</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect<span class="token punctuation">,</span> useCallback <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 比如以上这几个方法，就是最为典型的 Hooks</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三、vue中的hooks" tabindex="-1"><a class="header-anchor" href="#三、vue中的hooks" aria-hidden="true">#</a> 三、vue中的hooks</h3><p>在vue<strong>组合式API</strong>里，以”use“作为开头的，一系列提供了组件复用、状态管理等开发能力的方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useSlots<span class="token punctuation">,</span> useAttrs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-router&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 以上这些方法，也是 vue3 中相关的 Hook！</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四、为什么需要hooks" tabindex="-1"><a class="header-anchor" href="#四、为什么需要hooks" aria-hidden="true">#</a> 四、为什么需要hooks</h3><h5 id="_1、更好的状态复用" tabindex="-1"><a class="header-anchor" href="#_1、更好的状态复用" aria-hidden="true">#</a> 1、更好的状态复用</h5><p>（1）mixins</p><p><strong>弊端一：难以追溯的方法与属性</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mixins</span><span class="token operator">:</span> <span class="token punctuation">[</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">,</span> g <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 当然，这只是表示它混入了很多能力</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
    <span class="token comment">// mmp!这个 this.name 来自于谁？我难道要一个个混入看实现？</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>弊端二：覆盖、同名</strong></p><p><strong>弊端三：梅开二度，动态变量难以实现</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 动态生成mixin</span>
<span class="token keyword">function</span> <span class="token function">genNameMixin</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> funcKey</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token function">genRandomName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token punctuation">[</span>funcKey<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> v
      <span class="token punctuation">}</span> 
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mixins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">genNameMixin</span><span class="token punctuation">(</span><span class="token string">&#39;firstName&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;setFirstName&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">genNameMixin</span><span class="token punctuation">(</span><span class="token string">&#39;lastName&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;setLastName&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）hook的状态复用写法，解决了上述的问题</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 单个name的写法</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> setName <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 梅开二度的写法</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span> <span class="token operator">:</span> firstName<span class="token punctuation">,</span> <span class="token literal-property property">setName</span> <span class="token operator">:</span> setFirstName <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span> <span class="token operator">:</span> secondName<span class="token punctuation">,</span> <span class="token literal-property property">setName</span> <span class="token operator">:</span> setSecondName <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2、高度聚合-可阅读性提升" tabindex="-1"><a class="header-anchor" href="#_2、高度聚合-可阅读性提升" aria-hidden="true">#</a> 2、高度聚合，可阅读性提升</h5><h5 id="_3、比class组件更容易理解" tabindex="-1"><a class="header-anchor" href="#_3、比class组件更容易理解" aria-hidden="true">#</a> 3、比class组件更容易理解</h5><p>在 <code>react</code> 的 <code>class</code> 写法中，随处可见各种各样的 <code>.bind(this)</code>。（甚至官方文档里也有专门的章节描述了“为什么绑定是必要的？”这一问题）</p><p><code>vue</code> 玩家别笑，<code>computed: { a: () =&gt; { this } }</code> 里的 <code>this</code> 也是 <code>undefined</code>。</p><p>很显然，绑定虽然“必要”，但并不是“优点”，反而是“故障高发”地段。</p><p>但在<code>Hooks</code> 写法中，你就完全不必担心 <code>this</code> 的问题了。</p><h5 id="_4、友好的渐进式" tabindex="-1"><a class="header-anchor" href="#_4、友好的渐进式" aria-hidden="true">#</a> 4、友好的渐进式</h5><p>无论是 <code>vue</code> 还是 <code>react</code>，都只是提供了 <code>Hooks</code> API，并将它们的优劣利弊摆在了那里。并没有通过无法接受的 <code>break change</code> 来强迫你必须使用 <code>Hooks</code> 去改写之前的 <code>class</code> 组件。</p><p>你依然可以在项目里一边写 <code>class</code> 组件，一边写 <code>Hooks</code> 组件。</p><h3 id="五、react-的-hooks-写法" tabindex="-1"><a class="header-anchor" href="#五、react-的-hooks-写法" aria-hidden="true">#</a> 五、react 的 <code>Hooks</code> 写法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// my-component.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;React&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 通过 useState 可以创建一个 状态属性 和一个赋值方法</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span> name<span class="token punctuation">,</span> setName <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>

  <span class="token comment">// 通过 useEffect 可以对副作用进行处理</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> name <span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token comment">// 通过 useMemo 能生成一个依赖 name 的变量 message</span>
  <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span> message <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="六、vue-的-hooks-写法" tabindex="-1"><a class="header-anchor" href="#六、vue-的-hooks-写法" aria-hidden="true">#</a> 六、vue 的 <code>Hooks</code> 写法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
    <span class="token punctuation">{</span><span class="token punctuation">{</span> message <span class="token punctuation">}</span><span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> computed<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token comment">// 定义了一个 ref 对象</span>
<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 定义了一个依赖 name.value 的计算属性</span>
<span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="七、-vue-和-react-自定义-hook-的异同" tabindex="-1"><a class="header-anchor" href="#七、-vue-和-react-自定义-hook-的异同" aria-hidden="true">#</a> 七、 <code>vue</code> 和 <code>react</code> 自定义 <code>Hook</code> 的异同</h3><ul><li>相似点： 总体思路是一致的 都遵照着 &quot;定义状态数据&quot;，&quot;操作状态数据&quot;，&quot;隐藏细节&quot; 作为核心思路。</li><li>差异点： <code>组合式API</code> 和 <code>React函数组件</code> 有着本质差异 <code>vue3</code> 的组件里， <code>setup</code> 是作为一个早于 “created” 的生命周期存在的，无论如何，在一个组件的渲染过程中只会进入一次。 <code>React函数组件</code> 则完全不同，如果没有被 <code>memorized</code>，它们可能会被不停地触发，不停地进入并执行方法，因此需要开销的心智相比于<code>vue</code>其实是更多的。</li></ul>`,33),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","hooks.html.vue"]]);export{r as default};
