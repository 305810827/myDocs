import{_ as e,o as d,c as a,a as i}from"./app-53705635.js";const t={},c=i(`<h1 id="string-对象" tabindex="-1"><a class="header-anchor" href="#string-对象" aria-hidden="true">#</a> String 对象</h1><p><code>String</code>对象是 JavaScript 原生提供的三个包装对象之一，用来生成字符串对象。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var s1 = &#39;abc&#39;;
var s2 = new String(&#39;abc&#39;);

typeof s1 // &quot;string&quot;
typeof s2 // &quot;object&quot;

s2.valueOf() // &quot;abc&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，变量<code>s1</code>是字符串，<code>s2</code>是对象。由于<code>s2</code>是字符串对象，<code>s2.valueOf</code>方法返回的就是它所对应的原始字符串。</p><p>字符串对象是一个类似数组的对象（很像数组，但不是数组）。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>new String(&#39;abc&#39;)
// String {0: &quot;a&quot;, 1: &quot;b&quot;, 2: &quot;c&quot;, length: 3}
  
(new String(&#39;abc&#39;))[1] // &quot;b&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，字符串<code>abc</code>对应的字符串对象，有数值键（<code>0</code>、<code>1</code>、<code>2</code>）和<code>length</code>属性，所以可以像数组那样取值。</p><p>除了用作构造函数，<code>String</code>对象还可以当作工具方法使用，将任意类型的值转为字符串。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>String(true) // &quot;true&quot;
String(5) // &quot;5&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码将布尔值<code>true</code>和数值<code>5</code>，分别转换为字符串。</p><h2 id="静态方法" tabindex="-1"><a class="header-anchor" href="#静态方法" aria-hidden="true">#</a> 静态方法</h2><h3 id="fromcharcode" tabindex="-1"><a class="header-anchor" href="#fromcharcode" aria-hidden="true">#</a> fromCharCode()</h3><p><code>String</code>对象提供的静态方法（即定义在对象本身，而不是定义在对象实例的方法），主要是<code>String.fromCharCode()</code>。该方法的参数是一个或多个数值，代表 Unicode 码点，返回值是这些码点组成的字符串。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>String.fromCharCode() // &quot;&quot;
String.fromCharCode(97) // &quot;a&quot;
String.fromCharCode(104, 101, 108, 108, 111)
// &quot;hello&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>String.fromCharCode</code>方法的参数为空，就返回空字符串；否则，返回参数对应的 Unicode 字符串。</p><p>注意，该方法不支持 Unicode 码点大于<code>0xFFFF</code>的字符，即传入的参数不能大于<code>0xFFFF</code>（即十进制的 65535）。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>String.fromCharCode(0x20BB7)
// &quot;ஷ&quot;
String.fromCharCode(0x20BB7) === String.fromCharCode(0x0BB7)
// true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>String.fromCharCode</code>参数<code>0x20BB7</code>大于<code>0xFFFF</code>，导致返回结果出错。<code>0x20BB7</code>对应的字符是汉字<code>𠮷</code>，但是返回结果却是另一个字符（码点<code>0x0BB7</code>）。这是因为<code>String.fromCharCode</code>发现参数值大于<code>0xFFFF</code>，就会忽略多出的位（即忽略<code>0x20BB7</code>里面的<code>2</code>）。</p><p>这种现象的根本原因在于，码点大于<code>0xFFFF</code>的字符占用四个字节，而 JavaScript 默认支持两个字节的字符。这种情况下，必须把<code>0x20BB7</code>拆成两个字符表示。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>String.fromCharCode(0xD842, 0xDFB7)
// &quot;𠮷&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>0x20BB7</code>拆成两个字符<code>0xD842</code>和<code>0xDFB7</code>（即两个两字节字符，合成一个四字节字符），就能得到正确的结果。码点大于<code>0xFFFF</code>的字符的四字节表示法，由 UTF-16 编码方法决定。</p><h2 id="实例属性" tabindex="-1"><a class="header-anchor" href="#实例属性" aria-hidden="true">#</a> 实例属性</h2><h3 id="length" tabindex="-1"><a class="header-anchor" href="#length" aria-hidden="true">#</a> length</h3><p>字符串实例的<code>length</code>属性返回字符串的长度。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;abc&#39;.length // 3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="实例方法" tabindex="-1"><a class="header-anchor" href="#实例方法" aria-hidden="true">#</a> 实例方法</h2><h3 id="charat" tabindex="-1"><a class="header-anchor" href="#charat" aria-hidden="true">#</a> charAt()</h3><p><code>charAt</code>方法返回指定位置的字符，参数是从<code>0</code>开始编号的位置。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var s = new String(&#39;abc&#39;);

s.charAt(1) // &quot;b&quot;
s.charAt(s.length - 1) // &quot;c&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法完全可以用数组下标替代。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;abc&#39;.charAt(1) // &quot;b&quot;
&#39;abc&#39;[1] // &quot;b&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果参数为负数，或大于等于字符串的长度，<code>charAt</code>返回空字符串。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;abc&#39;.charAt(-1) // &quot;&quot;
&#39;abc&#39;.charAt(3) // &quot;&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="charcodeat" tabindex="-1"><a class="header-anchor" href="#charcodeat" aria-hidden="true">#</a> charCodeAt()</h3><p><code>charCodeAt()</code>方法返回字符串指定位置的 Unicode 码点（十进制表示），相当于<code>String.fromCharCode()</code>的逆操作。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;abc&#39;.charCodeAt(1) // 98
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面代码中，<code>abc</code>的<code>1</code>号位置的字符是<code>b</code>，它的 Unicode 码点是<code>98</code>。</p><p>如果没有任何参数，<code>charCodeAt</code>返回首字符的 Unicode 码点。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;abc&#39;.charCodeAt() // 97
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果参数为负数，或大于等于字符串的长度，<code>charCodeAt</code>返回<code>NaN</code>。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;abc&#39;.charCodeAt(-1) // NaN
&#39;abc&#39;.charCodeAt(4) // NaN
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，<code>charCodeAt</code>方法返回的 Unicode 码点不会大于65536（0xFFFF），也就是说，只返回两个字节的字符的码点。如果遇到码点大于 65536 的字符（四个字节的字符），必须连续使用两次<code>charCodeAt</code>，不仅读入<code>charCodeAt(i)</code>，还要读入<code>charCodeAt(i+1)</code>，将两个值放在一起，才能得到准确的字符。</p><h3 id="concat" tabindex="-1"><a class="header-anchor" href="#concat" aria-hidden="true">#</a> concat()</h3><p><code>concat</code>方法用于连接两个字符串，返回一个新字符串，不改变原字符串。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var s1 = &#39;abc&#39;;
var s2 = &#39;def&#39;;
  
s1.concat(s2) // &quot;abcdef&quot;
  s1 // &quot;abc&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该方法可以接受多个参数。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;a&#39;.concat(&#39;b&#39;, &#39;c&#39;) // &quot;abc&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果参数不是字符串，<code>concat</code>方法会将其先转为字符串，然后再连接。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var one = 1;
var two = 2;
var three = &#39;3&#39;;

&#39;&#39;.concat(one, two, three) // &quot;123&quot;
one + two + three // &quot;33&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>concat</code>方法将参数先转成字符串再连接，所以返回的是一个三个字符的字符串。作为对比，加号运算符在两个运算数都是数值时，不会转换类型，所以返回的是一个两个字符的字符串。</p><h3 id="slice" tabindex="-1"><a class="header-anchor" href="#slice" aria-hidden="true">#</a> slice()</h3><p><code>slice()</code>方法用于从原字符串取出子字符串并返回，不改变原字符串。它的第一个参数是子字符串的开始位置，第二个参数是子字符串的结束位置（不含该位置）。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;JavaScript&#39;.slice(0, 4) // &quot;Java&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果省略第二个参数，则表示子字符串一直到原字符串结束。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;JavaScript&#39;.slice(4) // &quot;Script&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果参数是负值，表示从结尾开始倒数计算的位置，即该负值加上字符串长度。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;JavaScript&#39;.slice(-6) // &quot;Script&quot;
&#39;JavaScript&#39;.slice(0, -6) // &quot;Java&quot;
&#39;JavaScript&#39;.slice(-2, -1) // &quot;p&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果第一个参数大于第二个参数（正数情况下），<code>slice()</code>方法返回一个空字符串。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;JavaScript&#39;.slice(2, 1) // &quot;&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="substring" tabindex="-1"><a class="header-anchor" href="#substring" aria-hidden="true">#</a> substring()</h3><p><code>substring</code>方法用于从原字符串取出子字符串并返回，不改变原字符串，跟<code>slice</code>方法很相像。它的第一个参数表示子字符串的开始位置，第二个位置表示结束位置（返回结果不含该位置）。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;JavaScript&#39;.substring(0, 4) // &quot;Java&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果省略第二个参数，则表示子字符串一直到原字符串的结束。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;JavaScript&#39;.substring(4) // &quot;Script&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果第一个参数大于第二个参数，<code>substring</code>方法会自动更换两个参数的位置。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;JavaScript&#39;.substring(10, 4) // &quot;Script&quot;
// 等同于
&#39;JavaScript&#39;.substring(4, 10) // &quot;Script&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，调换<code>substring</code>方法的两个参数，都得到同样的结果。</p><p>如果参数是负数，<code>substring</code>方法会自动将负数转为0。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;JavaScript&#39;.substring(-3) // &quot;JavaScript&quot;
&#39;JavaScript&#39;.substring(4, -3) // &quot;Java&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，第二个例子的参数<code>-3</code>会自动变成<code>0</code>，等同于<code>&#39;JavaScript&#39;.substring(4, 0)</code>。由于第二个参数小于第一个参数，会自动互换位置，所以返回<code>Java</code>。</p><p>由于这些规则违反直觉，因此不建议使用<code>substring</code>方法，应该优先使用<code>slice</code>。</p><h3 id="substr" tabindex="-1"><a class="header-anchor" href="#substr" aria-hidden="true">#</a> substr()</h3><p><code>substr</code>方法用于从原字符串取出子字符串并返回，不改变原字符串，跟<code>slice</code>和<code>substring</code>方法的作用相同。</p><p><code>substr</code>方法的第一个参数是子字符串的开始位置（从0开始计算），第二个参数是子字符串的长度。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;JavaScript&#39;.substr(4, 6) // &quot;Script&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果省略第二个参数，则表示子字符串一直到原字符串的结束。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;JavaScript&#39;.substr(4) // &quot;Script&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果第一个参数是负数，表示倒数计算的字符位置。如果第二个参数是负数，将被自动转为0，因此会返回空字符串。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;JavaScript&#39;.substr(-6) // &quot;Script&quot;
&#39;JavaScript&#39;.substr(4, -1) // &quot;&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，第二个例子的参数<code>-1</code>自动转为<code>0</code>，表示子字符串长度为<code>0</code>，所以返回空字符串。</p><h3 id="indexof-lastindexof" tabindex="-1"><a class="header-anchor" href="#indexof-lastindexof" aria-hidden="true">#</a> indexOf()，lastIndexOf()</h3><p><code>indexOf</code>方法用于确定一个字符串在另一个字符串中第一次出现的位置，返回结果是匹配开始的位置。如果返回<code>-1</code>，就表示不匹配。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;hello world&#39;.indexOf(&#39;o&#39;) // 4
&#39;JavaScript&#39;.indexOf(&#39;script&#39;) // -1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>indexOf</code>方法还可以接受第二个参数，表示从该位置开始向后匹配。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;hello world&#39;.indexOf(&#39;o&#39;, 6) // 7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>lastIndexOf</code>方法的用法跟<code>indexOf</code>方法一致，主要的区别是<code>lastIndexOf</code>从尾部开始匹配，<code>indexOf</code>则是从头部开始匹配。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;hello world&#39;.lastIndexOf(&#39;o&#39;) // 7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>另外，<code>lastIndexOf</code>的第二个参数表示从该位置起向前匹配。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;hello world&#39;.lastIndexOf(&#39;o&#39;, 6) // 4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="trim" tabindex="-1"><a class="header-anchor" href="#trim" aria-hidden="true">#</a> trim()</h3><p><code>trim</code>方法用于去除字符串两端的空格，返回一个新字符串，不改变原字符串。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;  hello world  &#39;.trim()
// &quot;hello world&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>该方法去除的不仅是空格，还包括制表符（<code>\\t</code>、<code>\\v</code>）、换行符（<code>\\n</code>）和回车符（<code>\\r</code>）。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;\\r\\nabc \\t&#39;.trim() // &#39;abc&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="tolowercase-touppercase" tabindex="-1"><a class="header-anchor" href="#tolowercase-touppercase" aria-hidden="true">#</a> toLowerCase()，toUpperCase()</h3><p><code>toLowerCase</code>方法用于将一个字符串全部转为小写，<code>toUpperCase</code>则是全部转为大写。它们都返回一个新字符串，不改变原字符串。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;Hello World&#39;.toLowerCase()
// &quot;hello world&quot;

&#39;Hello World&#39;.toUpperCase()
// &quot;HELLO WORLD&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="match" tabindex="-1"><a class="header-anchor" href="#match" aria-hidden="true">#</a> match()</h3><p><code>match</code>方法用于确定原字符串是否匹配某个子字符串，返回一个数组，成员为匹配的第一个字符串。如果没有找到匹配，则返回<code>null</code>。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;cat, bat, sat, fat&#39;.match(&#39;at&#39;) // [&quot;at&quot;]
&#39;cat, bat, sat, fat&#39;.match(&#39;xt&#39;) // null
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>返回的数组还有<code>index</code>属性和<code>input</code>属性，分别表示匹配字符串开始的位置和原始字符串。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var matches = &#39;cat, bat, sat, fat&#39;.match(&#39;at&#39;);
matches.index // 1
matches.input // &quot;cat, bat, sat, fat&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>match</code>方法还可以使用正则表达式作为参数，详见《正则表达式》一章。</p><h3 id="search-replace" tabindex="-1"><a class="header-anchor" href="#search-replace" aria-hidden="true">#</a> search()，replace()</h3><p><code>search</code>方法的用法基本等同于<code>match</code>，但是返回值为匹配的第一个位置。如果没有找到匹配，则返回<code>-1</code>。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;cat, bat, sat, fat&#39;.search(&#39;at&#39;) // 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>search</code>方法还可以使用正则表达式作为参数，详见《正则表达式》一节。</p><p><code>replace</code>方法用于替换匹配的子字符串，一般情况下只替换第一个匹配（除非使用带有<code>g</code>修饰符的正则表达式）。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;aaa&#39;.replace(&#39;a&#39;, &#39;b&#39;) // &quot;baa&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>replace</code>方法还可以使用正则表达式作为参数，详见《正则表达式》一节。</p><h3 id="split" tabindex="-1"><a class="header-anchor" href="#split" aria-hidden="true">#</a> split()</h3><p><code>split</code>方法按照给定规则分割字符串，返回一个由分割出来的子字符串组成的数组。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;a|b|c&#39;.split(&#39;|&#39;) // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果分割规则为空字符串，则返回数组的成员是原字符串的每一个字符。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;a|b|c&#39;.split(&#39;&#39;) // [&quot;a&quot;, &quot;|&quot;, &quot;b&quot;, &quot;|&quot;, &quot;c&quot;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果省略参数，则返回数组的唯一成员就是原字符串。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;a|b|c&#39;.split() // [&quot;a|b|c&quot;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果满足分割规则的两个部分紧邻着（即两个分割符中间没有其他字符），则返回数组之中会有一个空字符串。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;a||c&#39;.split(&#39;|&#39;) // [&#39;a&#39;, &#39;&#39;, &#39;c&#39;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果满足分割规则的部分处于字符串的开头或结尾（即它的前面或后面没有其他字符），则返回数组的第一个或最后一个成员是一个空字符串。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;|b|c&#39;.split(&#39;|&#39;) // [&quot;&quot;, &quot;b&quot;, &quot;c&quot;]
&#39;a|b|&#39;.split(&#39;|&#39;) // [&quot;a&quot;, &quot;b&quot;, &quot;&quot;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>split</code>方法还可以接受第二个参数，限定返回数组的最大成员数。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;a|b|c&#39;.split(&#39;|&#39;, 0) // []
&#39;a|b|c&#39;.split(&#39;|&#39;, 1) // [&quot;a&quot;]
&#39;a|b|c&#39;.split(&#39;|&#39;, 2) // [&quot;a&quot;, &quot;b&quot;]
&#39;a|b|c&#39;.split(&#39;|&#39;, 3) // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]
&#39;a|b|c&#39;.split(&#39;|&#39;, 4) // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>split</code>方法的第二个参数，决定了返回数组的成员数。</p><p><code>split</code>方法还可以使用正则表达式作为参数，详见《正则表达式》一节。</p><h3 id="localecompare" tabindex="-1"><a class="header-anchor" href="#localecompare" aria-hidden="true">#</a> localeCompare()</h3><p><code>localeCompare</code>方法用于比较两个字符串。它返回一个整数，如果小于0，表示第一个字符串小于第二个字符串；如果等于0，表示两者相等；如果大于0，表示第一个字符串大于第二个字符串。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;apple&#39;.localeCompare(&#39;banana&#39;) // -1
&#39;apple&#39;.localeCompare(&#39;apple&#39;) // 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>该方法的最大特点，就是会考虑自然语言的顺序。举例来说，正常情况下，大写的英文字母小于小写字母。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;B&#39; &gt; &#39;a&#39; // false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面代码中，字母<code>B</code>小于字母<code>a</code>。因为 JavaScript 采用的是 Unicode 码点比较，<code>B</code>的码点是66，而<code>a</code>的码点是97。</p><p>但是，<code>localeCompare</code>方法会考虑自然语言的排序情况，将<code>B</code>排在<code>a</code>的前面。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;B&#39;.localeCompare(&#39;a&#39;) // 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面代码中，<code>localeCompare</code>方法返回整数1，表示<code>B</code>较大。</p><p><code>localeCompare</code>还可以有第二个参数，指定所使用的语言（默认是英语），然后根据该语言的规则进行比较。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;ä&#39;.localeCompare(&#39;z&#39;, &#39;de&#39;) // -1
&#39;ä&#39;.localeCompare(&#39;z&#39;, &#39;sv&#39;) // 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>de</code>表示德语，<code>sv</code>表示瑞典语。德语中，<code>ä</code>小于<code>z</code>，所以返回<code>-1</code>；瑞典语中，<code>ä</code>大于<code>z</code>，所以返回<code>1</code>。</p>`,137),n=[c];function s(o,r){return d(),a("div",null,n)}const u=e(t,[["render",s],["__file","index.html.vue"]]);export{u as default};
