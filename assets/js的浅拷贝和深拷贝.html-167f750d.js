import{_ as n,o as s,c as a,a as t}from"./app-53705635.js";const p={},o=t(`<h1 id="js的浅拷贝和深拷贝" tabindex="-1"><a class="header-anchor" href="#js的浅拷贝和深拷贝" aria-hidden="true">#</a> js的浅拷贝和深拷贝</h1><h3 id="js的数据类型" tabindex="-1"><a class="header-anchor" href="#js的数据类型" aria-hidden="true">#</a> js的数据类型</h3><p>js有两种数据类型：基本数据类型和引用数据类型</p><p>基本数据类型：number、string、boolean、undefined、null、symbol</p><p>引用数据类型：Array、Function、Object 等</p><h3 id="栈和堆" tabindex="-1"><a class="header-anchor" href="#栈和堆" aria-hidden="true">#</a> 栈和堆</h3><p>栈和堆都是内存中划分出来用来存储的区域。</p><p><strong>栈</strong>是系统自动分配的内存空间，有结构，数据共享，每个区域按一定的次序存放(后进先出)，优点检索快，缺点存在栈中的数据大小与生存期必须是确定的。栈中主要存放基本类型的变量的值以及指向堆中的数组或者对象的地址。</p><p><strong>堆</strong>是系统动态分配的内存空间，没有结构，数据可以任意存放，它是用户存放复杂数据类型(引用类型)的。</p><h3 id="栈的数据共享" tabindex="-1"><a class="header-anchor" href="#栈的数据共享" aria-hidden="true">#</a> 栈的数据共享</h3><p>​ int a = 3; int b = 3；编译器先处理int a = 3；首先它会在栈中创建一个变量为a的引用，然后查找有没有字面值为3的地址，没找到，就开辟一个存放3这个字面值的地址，然后将a指向3的地址。接着处理int b = 3；在创建完b的引用变量后，由于在栈中已经有3这个字面值，便将b直接指向3的地址。这样，就出现了a与b同时均指向3的情况。</p><p>​ 特别注意的是，这种字面值的引用与类对象的引用不同。假定两个类对象的引用同时指向一个对象，如果一个对象引用变量修改了这个对象的内部状态，那么另一个对象引用变量也即刻反映出这个变化。</p><p>​ 相反，通过字面值的引用来修改其值，不会导致另一个指向此字面值的引用的值也跟着改变的情况。如上例，我们定义完a与 b的值后，再令a=4；那么，b不会等于4，还是等于3。在编译器内部，遇到a=4；时，它就会重新搜索栈中是否有4的字面值，如果没有，重新开辟地址存放4的值；如果已经有了，则直接将a指向这个地址。因此a值的改变不会影响到b的值。</p><h3 id="基本数据类型值不可变" tabindex="-1"><a class="header-anchor" href="#基本数据类型值不可变" aria-hidden="true">#</a> 基本数据类型值不可变</h3><p>​ 理解了上述的特性，就可以明白为什么基本数据类型的值不可变。例如先定义int a = 3；再令a = 4；这个a = 4其实并不是把栈中的字面值3改为4，只是修改a的引用，使其指向字面值为4的地址。</p><h3 id="浅拷贝和深拷贝" tabindex="-1"><a class="header-anchor" href="#浅拷贝和深拷贝" aria-hidden="true">#</a> 浅拷贝和深拷贝</h3><p>浅拷贝和深拷贝的使用场景是在复杂数据类型里(引用类型)</p><h4 id="浅拷贝" tabindex="-1"><a class="header-anchor" href="#浅拷贝" aria-hidden="true">#</a> 浅拷贝</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var object1 = {
    name：&quot;jie&quot;,
    age: 23
}
var object2 = object1;
object2.age = 100;

console.log(object1)  // { name:&quot;jie&quot;,age:100 }
console.log(object2)  // { name:&quot;jie&quot;,age:100 }

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 由此可见object2 = object1，只是将object1指向对象的地址赋给了object2，当object2 指向的对象的属性object2.age改变时，object1因为指向是同一个对象，所以object1.age也跟着改变</p><p><img src="https://img-blog.csdnimg.cn/20190803160301666.png" alt="img"></p><p>所以引用类型不能通过赋值来拷贝副本，这时候就需要浅拷贝。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> object1 <span class="token operator">=</span> <span class="token punctuation">{</span>
    name：<span class="token string">&quot;jie&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> object2 <span class="token operator">=</span> <span class="token function">shallowClone</span><span class="token punctuation">(</span>object1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">shallowClone</span><span class="token punctuation">(</span><span class="token parameter">object1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> object<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> property <span class="token keyword">in</span> object1<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//hasOwnProperty()函数用于指示一个对象自身(不包括原型链)是否具有指定名称的属性</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>object1<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            object<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">=</span> object1<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> object<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

object1<span class="token punctuation">.</span>name <span class="token operator">=</span> xyj<span class="token punctuation">;</span>
object1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//{ name:&quot;xyj&quot;, 100 }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//{ name:&quot;jie&quot;, 23 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 浅拷贝得到的的 object2就是重新创建的新对象。但是浅拷贝只复制一层对象的属性，并不包括对象里面的为引用类型的数据。如果对象里面又有一个对象，用浅拷贝会怎么样?</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> object1 <span class="token operator">=</span> <span class="token punctuation">{</span>
    name：<span class="token string">&quot;jie&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span>
    <span class="token literal-property property">hobby</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;sing&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;jump&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;rap&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;basketball&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> object2 <span class="token operator">=</span> <span class="token function">shallowClone</span><span class="token punctuation">(</span>object1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">shallowClone</span><span class="token punctuation">(</span><span class="token parameter">object1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> object<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> property <span class="token keyword">in</span> object1<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//hasOwnProperty()函数用于指示一个对象自身(不包括原型链)是否具有指定名称的属性</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>object1<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            object<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">=</span> object1<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> object<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

object1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;xyj&quot;</span><span class="token punctuation">;</span>
object1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
object1<span class="token punctuation">.</span>hobby<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;run&quot;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//{ name:&quot;xyj&quot;, 100 hobby: [&quot;run&quot;,&quot;jump&quot;,&quot;rap&quot;,&quot;basketball&quot;]}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//{ name:&quot;jie&quot;, 23 hobby: [&quot;run&quot;,&quot;jump&quot;,&quot;rap&quot;,&quot;basketball&quot;]}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 可以看到修改object1属性里的数组的值，object2的数据也跟着改变，实际上object1的属性hobby内存存放的就是一个指向数组的地址。这就是浅拷贝只复制一层对象的属性，那么这时就需要深拷贝，对对象以及对象的所有子对象进行拷贝。</p><h4 id="深拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝" aria-hidden="true">#</a> 深拷贝</h4><p>深拷贝就是拷贝对象各个层级的属性，实现思路很简单递归上述浅拷贝，遍历所有属性进行赋值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> object1 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;jie&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">,</span>
    <span class="token literal-property property">hobby</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&quot;sing&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;jump&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;rap&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;basketball&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">object</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> objClone <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">//typeof判断null、对象、数组返回的都是object类型</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>object <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> object <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>property <span class="token keyword">in</span> object<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">hasOwnPorperty</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">//判断ojb子元素是否为对象，如果是，递归复制</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>object<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> object<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">===</span><span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    objClone<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>object<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span><span class="token punctuation">{</span>
                    objClone<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">=</span> object<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>    
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> objClone<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> object2 <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>object1<span class="token punctuation">)</span><span class="token punctuation">;</span>

object1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;xyj&quot;</span><span class="token punctuation">;</span>
object1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">100</span>
object1<span class="token punctuation">.</span>hobby<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;run&quot;</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//{ name:&quot;xyj&quot;, 100 hobby: [&quot;run&quot;,&quot;jump&quot;,&quot;rap&quot;,&quot;basketball&quot;]}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//{ name:&quot;jie&quot;, 23 hobby: [&quot;sing&quot;,&quot;jump&quot;,&quot;rap&quot;,&quot;basketball&quot;]}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ typeof判断null、对象、数组返回的都是object类型，null的类型是object，这是由于历史原因造成的。1995年的 JavaScript 语言第一版，只设计了五种数据类型（对象、整数、浮点数、字符串和布尔值），没考虑null，只把它当作object的一种特殊值。后来null独立出来，作为一种单独的数据类型，为了兼容以前的代码，typeof null返回object就没法改变了。</p><p>​ 除了递归，我们还可以借用JSON对象的parse和stringify实现深拷贝</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> object1 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;jie&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">,</span>
    <span class="token literal-property property">hobby</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&quot;sing&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;jump&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;rap&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;basketball&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">object</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> objClone <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>
    objClone <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>objClone<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> objClone<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> object2 <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>object1<span class="token punctuation">)</span><span class="token punctuation">;</span>

object1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;xyj&quot;</span><span class="token punctuation">;</span>
object1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">100</span>
object1<span class="token punctuation">.</span>hobby<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;run&quot;</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//{ name:&quot;xyj&quot;, 100 hobby: [&quot;run&quot;,&quot;jump&quot;,&quot;rap&quot;,&quot;basketball&quot;]}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//{ name:&quot;jie&quot;, 23 hobby: [&quot;sing&quot;,&quot;jump&quot;,&quot;rap&quot;,&quot;basketball&quot;]}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32),e=[o];function c(u,l){return s(),a("div",null,e)}const r=n(p,[["render",c],["__file","js的浅拷贝和深拷贝.html.vue"]]);export{r as default};
