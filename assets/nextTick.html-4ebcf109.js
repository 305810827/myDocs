import{_ as n,o as a,c as s,a as e}from"./app-53705635.js";const t={},c=e(`<h3 id="一、用法" tabindex="-1"><a class="header-anchor" href="#一、用法" aria-hidden="true">#</a> 一、用法</h3><p>接受一个回调函数作为参数，并将该函数延迟到Dom更新后执行。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;延迟执行函数&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要解决单一事件更新后需要立即操作dom的场景</p><h3 id="二、原理" tabindex="-1"><a class="header-anchor" href="#二、原理" aria-hidden="true">#</a> 二、原理</h3><p>1、vue通过异步队列的方式来控制DOM更新和nextTick回调的先后执行。DOM的更新可能是本次事件循环的最后进行或者是下一次事件循环当中。</p><p>2、microtask因为优先特性，能保证队列中的微任务在一次事件循环完前被执行完毕。</p><p>3、当监听到数据发生变化时不会立即更新DOM，而是开启一个任务列表，并缓存同一个事件循环中发生的所有的数据变更，好处是将多次数据更新合并成一次，减少更新DOM的次数。</p><p>4、将传入的回调函数包装成异步方法延迟其执行顺序，至于封装为微任务还是宏任务取决于环境。</p>`,9),p=[c];function o(i,l){return a(),s("div",null,p)}const u=n(t,[["render",o],["__file","nextTick.html.vue"]]);export{u as default};
