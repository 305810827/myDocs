import{_ as e,o as a,c as s,a as n}from"./app-53705635.js";const d={},i=n(`<h1 id="resolve" tabindex="-1"><a class="header-anchor" href="#resolve" aria-hidden="true">#</a> <strong>Resolve</strong></h1><p>Webpack 在启动后会从配置的入口模块出发找出所有依赖的模块，Resolve 配置 Webpack 如何寻找模块所对应的文件。 Webpack 内置 JavaScript 模块化语法解析功能，默认会采用模块化标准里约定好的规则去寻找，但你也可以根据自己的需要修改默认的规则。</p><h2 id="alias" tabindex="-1"><a class="header-anchor" href="#alias" aria-hidden="true">#</a> alias</h2><p>resolve.alias 配置项通过别名来把原导入路径映射成一个新的导入路径。例如使用以下配置：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// Webpack alias 配置
resolve:{
  alias:{
    components: &#39;./src/components/&#39;
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当你通过 <code>import Button from &#39;components/button</code> 导入时，实际上被 <code>alias</code> 等价替换成了 <code>import Button from &#39;./src/components/button&#39;</code> 。</p><p>这样做可能会命中太多的导入语句，alias 还支持 <code>$</code> 符号来缩小范围到只命中以关键字结尾的导入语句：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>resolve:{
  alias:{
    &#39;react$&#39;: &#39;/path/to/react.min.js&#39;
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>react$ 只会命中以 react 结尾的导入语句，即只会把 <code>import &#39;react&#39;</code> 关键字替换成 <code>import &#39;/path/to/react.min.js&#39;</code></p><h2 id="extensions" tabindex="-1"><a class="header-anchor" href="#extensions" aria-hidden="true">#</a> extensions</h2><p>在导入语句没带文件后缀时，Webpack 会自动带上后缀后去尝试访问文件是否存在。 resolve.extensions 用于配置在尝试过程中用到的后缀列表，默认是：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>extensions: [&#39;.js&#39;, &#39;.json&#39;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也就是说当遇到 require(&#39;./data&#39;) 这样的导入语句时，Webpack 会先去寻找 ./data.js 文件，如果该文件不存在就去寻找 ./data.json 文件， 如果还是找不到就报错。</p><h2 id="modules" tabindex="-1"><a class="header-anchor" href="#modules" aria-hidden="true">#</a> modules</h2><p>resolve.modules 配置 Webpack 去哪些目录下寻找第三方模块，默认是只会去 node_modules 目录下寻找。 有时你的项目里会有一些模块会大量被其它模块依赖和导入，由于其它模块的位置分布不定，针对不同的文件都要去计算被导入模块文件的相对路径， 这个路径有时候会很长，就像这样 import &#39;../../../components/button&#39; 这时你可以利用 modules 配置项优化，假如那些被大量导入的模块都在 ./src/components 目录下，把 modules 配置成</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>modules:[&#39;./src/components&#39;,&#39;node_modules&#39;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>后，你可以简单通过 import &#39;button&#39; 导入。</p>`,17),t=[i];function o(r,l){return a(),s("div",null,t)}const u=e(d,[["render",o],["__file","resolve.html.vue"]]);export{u as default};
