import{_ as d,r as p,o as l,c as s,b as e,d as o,e as c,a as u}from"./app-53705635.js";const r={},i=u('<blockquote><h3 id="_1-创建-submodule" tabindex="-1"><a class="header-anchor" href="#_1-创建-submodule" aria-hidden="true">#</a> <strong>1.创建 submodule</strong></h3></blockquote><p>使用 <code>git submodule add &lt;submodule_url&gt;</code> 命令可以在项目中创建一个子模块。</p><p>此时项目仓库中会多出两个文件：<code>.gitmodules</code> 和 <code>project-sub-1</code> 。</p><p>前者的内容是这样的，事实上就是子模块的相关信息；而后者那个文件，实际上保存的是子模块当前版本的版本号信息。</p>',4),n={href:"https://link.zhihu.com/?target=https%3A//github.com/username/project-sub-1.git",target:"_blank",rel:"noopener noreferrer"},a=u('<p>如果此前项目中已经存在 <code>.gitmodules</code> 文件，则会在文件内容中多出上述三行记录。</p><p>通常此时可以使用 <code>git commit -m &quot;add submodule xxx&quot;</code> 提交一次，表示引入了某个子模块。提交后，在主项目仓库中，会显示出子模块文件夹，并带上其所在仓库的版本号。</p><blockquote><h3 id="_2-获取-submodule" tabindex="-1"><a class="header-anchor" href="#_2-获取-submodule" aria-hidden="true">#</a> <strong>2.获取 submodule</strong></h3></blockquote><p>上述步骤在创建子模块的过程中，会自动将相关代码克隆到对应路径，但对于后续使用者而言，对于主项目使用普通的 <code>clone</code> 操作并不会拉取到子模块中的实际代码。</p><p>使用以下命令进行克隆，完成后 <code>project-main/project-sub-1</code> 文件夹是空的：</p>',5),b={href:"https://link.zhihu.com/?target=https%3A//github.com/username/project-main.git",target:"_blank",rel:"noopener noreferrer"},m=e("p",null,[o("如果希望子模块代码也获取到，一种方式是在克隆主项目的时候带上参数 "),e("code",null,"--recurse-submodules"),o("，这样会递归地将项目中所有子模块的代码拉取。")],-1),g={href:"https://link.zhihu.com/?target=https%3A//github.com/username/project-main.git",target:"_blank",rel:"noopener noreferrer"},h=u('<p>此时 <code>project-main/project-sub-1</code> 文件夹是有内容的，并且固定在某个 Git 提交的版本上。</p><p>另外一种可行的方式是，在当前主项目中执行：</p><blockquote><p>git submodule init git submodule update</p></blockquote><p>则会根据主项目的配置信息，拉取更新子模块中的代码。</p><blockquote><h3 id="_3-子模块内容的更新" tabindex="-1"><a class="header-anchor" href="#_3-子模块内容的更新" aria-hidden="true">#</a> <strong>3.子模块内容的更新</strong></h3></blockquote><p>对于子模块而言，并不需要知道引用自己的主项目的存在。对于自身来讲，子模块就是一个完整的 Git 仓库，按照正常的 Git 代码管理规范操作即可。</p><p>对于主项目而言，子模块的内容发生变动时，通常有三种情况：</p><p>1）当前项目下子模块文件夹内的内容发生了未跟踪的内容变动；</p><p>2）当前项目下子模块文件夹内的内容发生了版本变化；</p><p>3）当前项目下子模块文件夹内的内容没变，远程有更新；</p><blockquote><p>&gt; 情况1：子模块有未跟踪的内容变动</p></blockquote><p>对于第1种情况，通常是在开发环境中，直接修改子模块文件夹中的代码导致的。</p><p>此时在主项目中使用 <code>git status</code> 能够看到关于子模块尚未暂存以备提交的变更，但是于主项目而言是无能为力的，使用 <code>git add/commit</code> 对其也不会产生影响。</p><blockquote><p>➜ project-main git:(master) git status 位于分支 master 您的分支与上游分支 &#39;origin/master&#39; 一致。 尚未暂存以备提交的变更： （使用 &quot;git add &lt;文件&gt;...&quot; 更新要提交的内容） （使用 &quot;git checkout -- &lt;文件&gt;...&quot; 丢弃工作区的改动） （提交或丢弃子模组中未跟踪或修改的内容） 修改： project-sub-1 (未跟踪的内容) 修改尚未加入提交（使用 &quot;git add&quot; 和/或 &quot;git commit -a&quot;）</p></blockquote><p>在此情景下，通常需要进入子模块文件夹，按照子模块内部的版本控制体系提交代码。</p><p>当提交完成后，主项目的状态则进入了情况2，即当前项目下子模块文件夹内的内容发生了版本变化。</p><blockquote><p>&gt; 情况2：子模块有版本变化</p></blockquote><p>当子模块版本变化时，在主项目中使用 <code>git status</code> 查看仓库状态时，会显示子模块有新的提交：</p><blockquote><p>➜ project-main git:(master) ✗ git status 位于分支 master 您的分支与上游分支 &#39;origin/master&#39; 一致。 尚未暂存以备提交的变更： （使用 &quot;git add &lt;文件&gt;...&quot; 更新要提交的内容） （使用 &quot;git checkout -- &lt;文件&gt;...&quot; 丢弃工作区的改动） 修改： project-sub-1 (新提交) 修改尚未加入提交（使用 &quot;git add&quot; 和/或 &quot;git commit -a&quot;）</p></blockquote><p>在这种情况下，可以使用 <code>git add/commit</code> 将其添加到主项目的代码提交中，实际的改动就是那个子模块 <code>文件</code> 所表示的版本信息：</p><blockquote><p>git diff HEAD HEAD^ diff --git a/project-sub-1 b/project-sub-1 index ace9770..7097c48 160000 --- a/project-sub-1 +++ b/project-sub-1 @@ -1 +1 @@ -Subproject commit ace977071f94f4f88935f9bb9a33ac0f8b4ba935 +Subproject commit 7097c4887798b71cee360e99815f7dbd1aa17eb4</p></blockquote><p>通常当子项目更新后，主项目修改其所依赖的版本时，会产生类似这种情景的 commit 提交信息。</p><blockquote><p>&gt; 情况3：子模块远程有更新</p></blockquote><p>通常来讲，主项目与子模块的开发不会恰好是同时进行的。通常是子模块负责维护自己的版本升级后，推送到远程仓库，并告知主项目可以更新对子模块的版本依赖。</p><p>在这种情况下，主项目是比较茫然的。</p><p>之前曾经提到，主项目可以使用 <code>git submodule update</code> 更新子模块的代码，但那是指 <code>当前主项目文件夹下的子模块目录内容</code> 与 <code>当前主项目记录的子模块版本</code> 不一致时，会参考后者进行更新。</p><p>但如今这种情况下，后者 <code>当前主项目记录的子模块版本</code> 还没有变化，在主项目看来当前情况一切正常。</p><p>此时，需要让主项目主动进入子模块拉取新版代码，进行升级操作。</p><p>通常流程是：</p><blockquote><p>cd project-sub-1 git pull origin master</p></blockquote><p>子模块目录下的代码版本会发生变化，转到情况2的流程进行主项目的提交。</p><p>当主项目的子项目特别多时，可能会不太方便，此时可以使用 <code>git submodule</code> 的一个命令 <code>foreach</code> 执行：</p><blockquote><p>git submodule foreach &#39;git pull origin master&#39;</p></blockquote><blockquote><p>&gt; 情况汇总</p></blockquote><p>终上所述，可知在不同场景下子模块的更新方式如下：</p><ul><li>对于子模块，只需要管理好自己的版本，并推送到远程分支即可；</li><li>对于父模块，若子模块版本信息未提交，需要更新子模块目录下的代码，并执行 <code>commit</code> 操作提交子模块版本信息；</li><li>对于父模块，若子模块版本信息已提交，需要使用 <code>git submodule update</code> ，Git 会自动根据子模块版本信息更新所有子模块目录的相关代码。</li></ul><blockquote><h3 id="_4-删除子模块" tabindex="-1"><a class="header-anchor" href="#_4-删除子模块" aria-hidden="true">#</a> <strong>4.删除子模块</strong></h3></blockquote><p>网上流传了一些偏法，主要步骤是直接移除模块，并手动修改 <code>.gitmodules</code>、<code>.git/config</code> 和 <code>.git/modules</code> 内容。包含了一大堆类似<code>git rm --cached &lt;sub-module&gt;</code>、<code>rm -rf &lt;sub-moduel&gt;</code>、<code>rm .gitmodules</code> 和 <code>git rm --cached</code> 之类的代码。</p><p>实际上这是一种比较野的做法，不建议使用。</p><p>根据官方文档的说明，应该使用 <code>git submodule deinit</code> 命令卸载一个子模块。这个命令如果添加上参数 <code>--force</code>，则子模块工作区内即使有本地的修改，也会被移除。</p><blockquote><p>git submodule deinit project-sub-1 git rm project-sub-1</p></blockquote><p>执行 <code>git submodule deinit project-sub-1</code> 命令的实际效果，是自动在 <code>.git/config</code> 中删除了以下内容：</p>',42),_={href:"https://link.zhihu.com/?target=https%3A//github.com/username/project-sub-1.git",target:"_blank",rel:"noopener noreferrer"},q=e("p",null,[o("执行 "),e("code",null,"git rm project-sub-1"),o(" 的效果，是移除了 "),e("code",null,"project-sub-1"),o(" 文件夹，并自动在 "),e("code",null,".gitmodules"),o(" 中删除了以下内容：")],-1),k={href:"https://link.zhihu.com/?target=https%3A//github.com/username/project-sub-1.git",target:"_blank",rel:"noopener noreferrer"},j=e("p",null,[o("此时，主项目中关于子模块的信息基本已经删除（虽然貌似 "),e("code",null,".git/modules"),o(" 目录下还有残余）：")],-1),f=e("blockquote",null,[e("p",null,`➜ project-main git:(master) ✗ gs 位于分支 master 您的分支与上游分支 'origin/master' 一致。 要提交的变更： （使用 "git reset HEAD <文件>..." 以取消暂存） 修改： .gitmodules 删除： project-sub-1`)],-1),x=e("p",null,"可以提交代码：",-1),A=e("blockquote",null,[e("p",null,'git commit -m "delete submodule project-sub-1"')],-1),E=e("p",null,"至此完成对子模块的删除。",-1);function z(G,N){const t=p("ExternalLinkIcon");return l(),s("div",null,[i,e("blockquote",null,[e("p",null,[o('[submodule "project-sub-1"] path = project-sub-1 url = '),e("a",n,[o("https://github.com/username/project-sub-1.git"),c(t)])])]),a,e("blockquote",null,[e("p",null,[o("cd /path/to/temp git clone "),e("a",b,[o("https://github.com/username/project-main.git"),c(t)])])]),m,e("blockquote",null,[e("p",null,[o("cd /path/to/temp2 git clone "),e("a",g,[o("https://github.com/username/project-main.git"),c(t)]),o(" --recurse-submodules")])]),h,e("blockquote",null,[e("p",null,[o('[submodule "project-sub-1"] url = '),e("a",_,[o("https://github.com/username/project-sub-1.git"),c(t)])])]),q,e("blockquote",null,[e("p",null,[o('[submodule "project-sub-1"] path = project-sub-1 url = '),e("a",k,[o("https://github.com/username/project-sub-1.git"),c(t)])])]),j,f,x,A,E])}const v=d(r,[["render",z],["__file","submodule.html.vue"]]);export{v as default};
