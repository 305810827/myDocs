import{_ as e,o,c,a as l}from"./app-53705635.js";const d={},i=l('<h4 id="一、在-typescript-中-as-以及其他符号有各自的含义和用法" tabindex="-1"><a class="header-anchor" href="#一、在-typescript-中-as-以及其他符号有各自的含义和用法" aria-hidden="true">#</a> 一、在 TypeScript 中，<code>|</code>, <code>!</code>, <code>?</code>, <code>as</code> 以及其他符号有各自的含义和用法：</h4><ol><li><code>|</code>：类型联合 <ul><li>用于定义一个变量可以接受多个不同类型的值。</li><li>例如：<code>let age: number | string;</code> 表示 <code>age</code> 可以是一个数字或者一个字符串类型。</li></ul></li><li><code>!</code>：非空断言 <ul><li>用于告诉 TypeScript 某个变量一定是非空的，可以避免出现空值错误。</li><li>例如：<code>document.getElementById(&#39;app&#39;)!;</code> 表示断言 <code>document.getElementById(&#39;app&#39;)</code> 不为空。</li></ul></li><li><code>?</code>：可选属性 <ul><li>用于定义一个对象的属性是可选的，可以不传入该属性。</li><li>例如：<code>interface Person { name: string; age?: number; }</code> 表示 <code>age</code> 属性是可选的。</li></ul></li><li><code>as</code>：类型断言 <ul><li>用于告诉 TypeScript 某个变量的具体类型，通常在开发者明确知道变量的类型时使用。</li><li>例如：<code>let num: any = 123; let strLength = (num as string).length;</code> 表示将 <code>num</code> 断言为字符串类型，并获取其长度。</li></ul></li></ol><h4 id="二、其他常见符号的含义和用法" tabindex="-1"><a class="header-anchor" href="#二、其他常见符号的含义和用法" aria-hidden="true">#</a> 二、其他常见符号的含义和用法：</h4><ul><li><code>:</code>：类型注解 <ul><li>用于标注变量、函数参数或函数返回值的类型。</li><li>例如：<code>let age: number; function add(a: number, b: number): number { ... }</code></li></ul></li><li><code>!</code>：非空断言 <ul><li>在变量后面加上 <code>!</code> 表示告诉 TypeScript 该变量一定是非空的，可以避免空值错误。</li></ul></li><li><code>&amp;</code>：交叉类型 <ul><li>用于合并多个类型为一个新的类型。</li><li>例如：<code>interface A { name: string; } interface B { age: number; } type C = A &amp; B;</code> 表示 <code>C</code> 是 <code>A</code> 和 <code>B</code> 的交叉类型，即包含 <code>name</code> 和 <code>age</code> 属性。</li></ul></li><li><code>typeof</code>：类型查询 <ul><li>用于获取一个变量或值的类型。</li><li>例如：<code>let num: number = 123; type NumType = typeof num;</code> 表示 <code>NumType</code> 是 <code>number</code> 类型。</li></ul></li><li><code>keyof</code>：索引类型查询 <ul><li>用于获取一个对象的键的联合类型。</li><li>例如：<code>interface Person { name: string; age: number; } type PersonKeys = keyof Person;</code> 表示 <code>PersonKeys</code> 是 <code>&#39;name&#39; | &#39;age&#39;</code> 的联合类型。</li></ul></li><li><code>in</code>：迭代类型 <ul><li>用于遍历一个对象的所有键。</li><li>例如：<code>type Colors = &#39;red&#39; | &#39;blue&#39; | &#39;green&#39;; for (let color in Colors) { ... }</code></li></ul></li><li><code>extends</code>：泛型约束 <ul><li>用于限制泛型类型的范围。</li><li>例如：<code>function merge&lt;T extends object, U extends object&gt;(obj1: T, obj2: U): T &amp; U { ... }</code> 表示 <code>T</code> 和 <code>U</code> 必须是对象类型。</li></ul></li></ul>',4),t=[i];function n(r,a){return o(),c("div",null,t)}const s=e(d,[["render",n],["__file","ts常见符号的含义和用法.html.vue"]]);export{s as default};
