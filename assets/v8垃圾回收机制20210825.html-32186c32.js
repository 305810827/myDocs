import{_ as o,o as s,c as t,a as n}from"./app-53705635.js";const r={},p=n('<h4 id="js的垃圾回收机制" tabindex="-1"><a class="header-anchor" href="#js的垃圾回收机制" aria-hidden="true">#</a> JS的垃圾回收机制</h4><p>​ JS的垃圾回收机制都是由js引擎实现的，大部分浏览器都有自己的js引擎，所以各自实现的垃圾回收机制都略有不同。但是主要的策略就两种:</p><p>1、<strong>标记清除</strong> 标记阶段：把所有活动对象做上标记。 清除阶段：把没有标记的对象销毁。</p><p>​ 缺点：没有被清除的对象位置不变，导致清楚后的空闲内存空间不连续（内存碎片）</p><p>2、<strong>引用计数</strong></p><p>​ 一个值赋给了一个变量，这个值引用计数加一，又被赋给另一个变量就再加一（类推），另一个值要是覆盖了原本已经赋值的变量，则这个值引用计数减一。</p><p>​ 缺点：1、需要一个不知上限的计数器。2、循环引用无法回收</p><h4 id="v8的垃圾回收机制" tabindex="-1"><a class="header-anchor" href="#v8的垃圾回收机制" aria-hidden="true">#</a> v8的垃圾回收机制</h4><p>​ 分代式垃圾回收：分为<strong>新生代区域</strong>和<strong>老生代区域</strong>。新生代区域容量小，会保存存活较短、体积较小的对象。老生代反之。不同分区的垃圾回收机制与回收频率都不同。</p><p><strong>新生代区</strong></p><p>​ 新生代区又分为<strong>使用区</strong>和<strong>空闲区</strong>，通过 <code>Scavenge</code> 算法把使用区活着的对象复制到空闲区并排序（<strong>解决内存碎片化问题</strong>），随后清理使用区剩余未标记的垃圾，此时使用区变成空闲区，空闲区变成使用区。上述过程反复，一个对象多次复制后仍存活就直接移到<strong>老生代区</strong>，就像两个杯子，一杯水倒来倒去，一直没撒出去的就是存活较久的，可以移到<strong>老生代区</strong>。或者当对象复制到空闲区，内存超过空闲区的25%时，也会直接移到老生代区。</p><p><strong>老生代区</strong></p><p>​ 老生代区使用<strong>标记清除</strong>(<code>Mark-Sweep</code>)，从根节点(dom、window、global)遍历标记活着的对象，回收器定时清理死亡的对象。使用<strong>标记整理算法</strong>把标记的对象向内存一端移动（<strong>解决标记清除的内存碎片化问题</strong>）</p><p>tip： <code>Scavenge</code>只复制活着的对象，<code>Mark-Sweep</code>只清除死亡的对象。活对象在新生代区较少，死对象在老生代中交少，这是两种回收方式高效的原因。</p><p><strong>并行回收</strong></p><p>​ js是单线程，所以垃圾回收会阻塞js脚本的执行，<strong>并行回收</strong>就是开启辅助线程帮助垃圾回收。</p><p>​ 缺点：像老生代区活着的对象大而多，就算是并行任务，一次的清理任务也可能过重导致阻塞过长，所以需要使用<strong>增量标记</strong>和<strong>惰性清理</strong>。</p><p><strong>增量标记</strong></p><p>​ 把回收任务分成一小步一小步的，执行完一小步再把主线程交给js，这样交替增量执行完一次标记任务，但可能会出现执行任务程序时内存中标记好的对象引用关系被修改的问题，所以需要引入<strong>三色标记法</strong>和<strong>写屏障法</strong>来解决。</p><p><strong>惰性清理</strong></p><p>​ 在内存充足情况先优先执行js代码，主线程空闲时才清理垃圾，无需一次去清理完未标记的对象，逐一清理，配合增量标记使用</p><p>​ 缺点：增量标记后惰性清理，没有减少占用主线程的时间，甚至增加了。</p><p><strong>并发回收</strong></p><p>​ 完全在辅助线程执行，不会占用主线程。</p><p>​ 缺点：需要考虑垃圾回收器在辅助线程已经做的标记或者正在做标记时，js对象引用的改变，需要额外实现读写锁机制。</p><p>v8垃圾回收机制就是根据上述方法的优缺点，结合使用。</p><p>参考：</p><p>1、《深入浅出nodejs》5.1- v8的垃圾回收机制与内存限制</p><p>2、掘金：https://juejin.cn/post/6981588276356317214?share_token=6cecbce3-8f54-4e4a-9049-d73399fa76e8</p>',29),e=[p];function g(a,c){return s(),t("div",null,e)}const _=o(r,[["render",g],["__file","v8垃圾回收机制20210825.html.vue"]]);export{_ as default};
