import{_ as p,r as e,o as t,c as o,b as s,d as n,e as c,a as l}from"./app-53705635.js";const i={},u={href:"https://link.zhihu.com/?target=https%3A//juejin.cn/post/7055202073511460895",target:"_blank",rel:"noopener noreferrer"},k=l(`<p>为了方便描述，将上面的代码转化为下面这样</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> p1 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> p2 <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> p3 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> p3<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> p4 <span class="token operator">=</span> p2<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> p5 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> p6 <span class="token operator">=</span> p5<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> p7 <span class="token operator">=</span> p6<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> p8 <span class="token operator">=</span> p7<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> p9 <span class="token operator">=</span> p8<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> p10 <span class="token operator">=</span> p9<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1、先执行所有的同步代码，执行过程如下面的注释</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> p1 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 1. p1 的状态为 fulfilled</span>

<span class="token keyword">let</span> p2 <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> p3 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> p3<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 2. 因为 p1 的状态已经是 fulfilled，所以调用 then 后立即将 onFulfilled 放入 microtask 队列</span>
<span class="token comment">// 此时 microtask 只有p1的 onFulfilled： [p1.onFulfilled]</span>

<span class="token keyword">let</span> p4 <span class="token operator">=</span> p2<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 3. p2的状态还是 pending，所以调用 then 后是为 p2 收集依赖，</span>
<span class="token comment">// 此时 p2 的 reactions 如下</span>
<span class="token comment">/*{
    onFulfilled: (res) =&gt; {console.log(res)},
    onRejected: undefined
}*/</span>


<span class="token keyword">let</span> p5 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 4. p5 的状态为 fulfilled</span>

<span class="token keyword">let</span> p6 <span class="token operator">=</span> p5<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 5. 同第2步，将 onFulfilled 加入 microtask 队列</span>
<span class="token comment">// 此时 microtask 是： [p1.onFulfilled, p5.onFulfilled]</span>

<span class="token keyword">let</span> p7 <span class="token operator">=</span> p6<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 6. 同第3步，是给 p6 添加 reactions</span>

<span class="token keyword">let</span> p8 <span class="token operator">=</span> p7<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 7. 同上，是给 p7 添加 reactions</span>

<span class="token keyword">let</span> p9 <span class="token operator">=</span> p8<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 8. 同上，是给 p8 添加 reactions</span>

<span class="token keyword">let</span> p10 <span class="token operator">=</span> p9<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 9. 同上，是给 p9 添加 reactions</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当同步代码执行完成后，microtask 队列只有</p><p>[p1.onFulfilled, p5.onFulfilled]</p><p>2、然后取出 p1.onFulfilled 来执行，此时输出 <code>0</code>，但是发现 p1.onFulfilled 返回值的 p3 是一个 Promise 对象。所以会执行 ResolvePromise 的 Enqueue 代码块，里面会调用 NewPromiseResolveThenableJobTask 产生一个微任务，这个微任务的要做的事情就是调用 p3 的then方法，然后在其处理函数执行时调用p2的resolve函数，翻译成js大致就是下面这样</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">promiseResolveThenableJobTask</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    p3<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
        <span class="token function">ReslovePromise</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span> value<span class="token punctuation">)</span> 
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后将其加入 microtask 队列， 这时 microtask 队列就变成了 :</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[p5.onFulfilled, promiseResolveThenableJobTask]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3、继续取出 p5.onFulfilled 执行，此时输出 <code>1</code>，因为 p5.onFulfilled 返回值是 undefined，所以就将 undefined 作为 p6 的值，然后将 p6 的状态变为 fulfilled。 因为 p6 的状态被改变，所以它的 reactions 也会加入 microtask 队列，这时 microtask 队列就变成这样： <code>[promiseResolveThenableJobTask，p6.onFulfilled]</code></p><p>4、同样是取 promiseResolveThenableJobTask 执行，因为 promiseResolveThenableJobTask 的内容是下面这样</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">promiseResolveThenableJobTask</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    p3<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
        <span class="token function">ReslovePromise</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token comment">// ReslovePromise 的作用上面有介绍</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以执行 promiseResolveThenableJobTask 时就相当于执行了 <code>p3.then((value) =&gt; {ReslovePromise(p2, value)})</code> 因为 p3 的状态是 fulfilled ，所以会将其 onFulfilled 加入 microtask 队列（参数就是未来 p2 的值 4，也是现在p3的值，所以说其作用就是将p3的value同步给p2），这时 microtask 队列就变成这样：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[p6.onFulfilled，p3.onFulfilled]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>5、同样是取 p6.onFulfilled 执行，然后输出 2 并将其返回值 undefined 设置为 p7 的值，并将 p7 变为 fulfilled 状态，所以 p7 的 reactions 也会加入 microtask 队列，这时 microtask 队列就变成这样：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[p3.onFulfilled，p7.onFulfilled]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>6、p3.onFulfilled 出队执行，p3.onFulfilled 是 <code>(value) =&gt; {ReslovePromise(p2, value)}</code>, 参数 value 是 4，所以此时就执行 ReslovePromise(p2, 4),这就相当于调用了 p2 的 resolve。 所以此时 p2 的 值变为 4， 状态为变 fulfilled，然后将其 reactions 挨个加入 microtask 队列，这时 microtask 队列就变成这样：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[p7.onFulfilled，p2.onFulfilled]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>7、p7.onFulfilled 出队列执行，输出 3，p8 状态变为 fulfille，值变为 undefined，然后 p8.onFulfilled 加入队列</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[p2.onFulfilled，p8.onFulfilled]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>8、p2.onFulfilled 出队列执行，输出 4，因为 p2 没有被在此调用 then 方法，所以就没有产生下一个 Promise 对象以及需要放入 microtask 队列的处理函数，所以也就没有后序了。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[p8.onFulfilled]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>https://www.zhihu.com/question/453677175 https://juejin.cn/post/6953452438300917790</p>`,24);function r(d,v){const a=e("ExternalLinkIcon");return t(),o("div",null,[s("p",null,[n("你好，我在参考 徐鹏跃 大佬的文章后整理的《"),s("a",u,[n("V8 Promise 源码全面解读"),c(a)]),n("》中在末尾充分的描述了上述代码的执行过程，有兴趣可以看看。")]),k])}const b=p(i,[["render",r],["__file","一道promise面试题.html.vue"]]);export{b as default};
