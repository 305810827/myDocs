import{_ as e,r as p,o,c,b as s,d as n,e as t,a as l}from"./app-53705635.js";const i={},u=s("h3",{id:"介绍",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#介绍","aria-hidden":"true"},"#"),n(" 介绍")],-1),r={href:"https://chromedevtools.github.io/devtools-protocol/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://developers.google.com/web/updates/2017/04/headless-chrome",target:"_blank",rel:"noopener noreferrer"},d=l(`<h3 id="主要作用" tabindex="-1"><a class="header-anchor" href="#主要作用" aria-hidden="true">#</a> 主要作用</h3><p>​ 1、爬取页面中动态加载的的内容</p><p>​ 2、自动化测试，控制鼠标和键盘的输入，还有各种高级 API 可操作浏览器。</p><h3 id="使用总结" tabindex="-1"><a class="header-anchor" href="#使用总结" aria-hidden="true">#</a> 使用总结</h3><h5 id="_1、puppeteer浏览器上下文" tabindex="-1"><a class="header-anchor" href="#_1、puppeteer浏览器上下文" aria-hidden="true">#</a> 1、puppeteer浏览器上下文</h5><p>​ puppeteer可以通过配置启动参数（下面常用参数）得到浏览器上下文对象browser，还可以通过browser对象的createIncognitoBrowserContext方法得到无痕的浏览器上下文对象context。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> browser <span class="token operator">=</span> <span class="token keyword">await</span> puppeteer<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">ignoreHTTPSErrors</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                      <span class="token comment">// 是否忽略 HTTPS 错误</span>
  <span class="token literal-property property">userDataDir</span><span class="token operator">:</span> <span class="token string">&quot;./user_data&quot;</span>										<span class="token comment">// 用户数据目录,例如历史记录、书签和 cookie</span>
  <span class="token literal-property property">headless</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                               <span class="token comment">// ”无头(无UI)”的模式运行chrome，提高性能</span>
  <span class="token literal-property property">arg</span><span class="token operator">:</span> <span class="token punctuation">[</span>                                        <span class="token comment">// 要传递给浏览器实例的其他参数</span>
    <span class="token string">&#39;--no-sandbox&#39;</span><span class="token punctuation">,</span>															<span class="token comment">// 禁用沙箱，为了让root用户也能执行</span>
    <span class="token string">&#39;--proxy-server=http://127.0.0.1:20127&#39;</span><span class="token punctuation">,</span>    <span class="token comment">// 设置HTTP和HTTPS请求的代理服务器</span>
    <span class="token string">&#39;--disable-web-security&#39;</span><span class="token punctuation">,</span>                   <span class="token comment">// 不执行同源政策</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建一个新的隐身浏览器上下文，无痕下无用户数据</span>
<span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">createIncognitoBrowserContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2、page-goto-url-options-页面加载的优化" tabindex="-1"><a class="header-anchor" href="#_2、page-goto-url-options-页面加载的优化" aria-hidden="true">#</a> 2、page.goto(url[, options])，页面加载的优化</h5><p>​ 在爬取各种网址的数据过程中，总会出现网址加载慢或者加载不出来的情况（不包含ip禁用），所以我们需要减少页面不必要文件的加载，同时要给页面加载时限。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> browser <span class="token operator">=</span> <span class="token keyword">await</span> puppeteer<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 激活请求拦截</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">setRequestInterception</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 请求会被拦截停止，除非使用request的bort、continue或者response方法</span>
page<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">,</span> <span class="token parameter">req</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token comment">// 将以下类型的请求都拦截掉</span>
	<span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;image&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;other&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;stylesheet&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;script&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">resourceType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	flag <span class="token operator">?</span> req<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> req<span class="token punctuation">.</span><span class="token function">continue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">&#39;https://www.google.com&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">waitUntil</span><span class="token operator">:</span><span class="token punctuation">[</span>             <span class="token comment">// 设置网页导航完成的条件，字符串或数组，为数组时需要满足所有条件才算导航完成</span>
    <span class="token string">&#39;load&#39;</span><span class="token punctuation">,</span>               <span class="token comment">// load事件触发后</span>
    <span class="token string">&#39;domcontentloaded&#39;</span><span class="token punctuation">,</span>   <span class="token comment">// domcontentloaded事件触发后</span>
    <span class="token string">&#39;networkidle0&#39;</span><span class="token punctuation">,</span>       <span class="token comment">// 500ms内无网络请求</span>
    <span class="token string">&#39;networkidle2&#39;</span>				<span class="token comment">// 500ms内没有超过2个网络请求</span>
	<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">30000</span>          <span class="token comment">// 网页加载超过30s就加载失败 </span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
<span class="token comment">//结束后需要关闭网页和浏览器</span>
page<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
browser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3、配置代理" tabindex="-1"><a class="header-anchor" href="#_3、配置代理" aria-hidden="true">#</a> 3、配置代理</h5><p>​ puppeteer提供在launch时可以配置代理服务器，但是这样有几个缺点:</p><p>​ 1、整个浏览器上下文创建的page使用的同一个代理服务器。 ​ 2、如果要切换代理，则需要关闭整个browser，再修改--proxy-server重新实例化一个browser。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> browser <span class="token operator">=</span> <span class="token keyword">await</span> puppeteer<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">arg</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;--proxy-server=http://127.0.0.1:20127&#39;</span><span class="token punctuation">,</span>    <span class="token comment">// 设置HTTP和HTTPS请求的代理服务器</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 针对上面问题，可以使用npm包puppeteer-page-proxy，主要原理就是通过激活拦截请求，给每个拦截的request配置上代理服务器。</p><p>​ 用法1：可以只给page设置proxy，不需要重启browser。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> useProxy <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;puppeteer-page-proxy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> <span class="token function">useProxy</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> <span class="token string">&#39;http://127.0.0.1:80&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 设置http://127.0.0.1:80代理服务器</span>
<span class="token keyword">await</span> <span class="token function">useProxy</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 取消代理</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 用法2：给每个request设置proxy。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">setRequestInterception</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
page<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">request</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token function">useProxy</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">&#39;https://127.0.0.1:443&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4、useragent" tabindex="-1"><a class="header-anchor" href="#_4、useragent" aria-hidden="true">#</a> 4、userAgent</h5><p>​ 每个page可以通过setUserAgent方法配置不同的userAgent。使用user-agents包，可以随机产生一个指定系统或者浏览器的UserAgent。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> UserAgent <span class="token keyword">from</span> <span class="token string">&#39;user-agents&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> opt         <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^((?!linux).)*$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token literal-property property">deviceCategory</span><span class="token operator">:</span> <span class="token string">&#39;desktop&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">platform</span>      <span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.5</span> <span class="token operator">?</span> <span class="token string">&#39;Win32&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;MacIntel&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 不配置opt则随机输出</span>
<span class="token keyword">const</span> userAgent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserAgent</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

page<span class="token punctuation">.</span><span class="token function">setUserAgent</span><span class="token punctuation">(</span>userAgent<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5、在页面植入js" tabindex="-1"><a class="header-anchor" href="#_5、在页面植入js" aria-hidden="true">#</a> 5、在页面植入js</h5><p>​ page.evaluate(pageFunction, ...args)，pageFunction是在页面实例上下文中执行的方法，所以不能调用在当前js写的函数，需要在页面中植入该函数才能调用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getNum</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">addScriptTag</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span> getNum <span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">param</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token function">getNum</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">// 页面中的控制台会输出2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>6、执行脚本僵死；</p><p>7、监听browser disconnect (调查一下)</p><p>8、禁止 webrtc</p><p>9、禁止canvas</p>`,29);function v(m,g){const a=p("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("​ Puppeteer 是一个 Node 库，它提供了一个高级 API 来通过"),s("a",r,[n("DevTools 协议"),t(a)]),n("控制 "),s("a",k,[n("无头"),t(a)]),n("Chrome 或 Chromium，无头Chrome就是可以在不打开浏览器的情况下，在v8引擎中处理dom的操作，因为没有UI，所以性能比真实浏览器更好。它还可以配置为使用完整（非无头）Chrome 或 Chromium。")]),d])}const h=e(i,[["render",v],["__file","使用puppeteer爬虫的总结.html.vue"]]);export{h as default};
