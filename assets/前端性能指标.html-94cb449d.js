import{_ as t,o as e,c as d,a}from"./app-53705635.js";const o={},c=a(`<h2 id="一、rail性能模型" tabindex="-1"><a class="header-anchor" href="#一、rail性能模型" aria-hidden="true">#</a> 一、RAIL性能模型</h2><p><code>RAIL</code>是<code>Response</code>，<code>Animation</code>，<code>Idle</code>和<code>Load</code>的首字母缩写，是一种由<code>Google Chrome</code>团队于<code>2015年</code>提出的性能模型，用于提升浏览器的用户体验和性能。</p><p><code>RAIL</code>模型的理念是以用户为中心，最终目标并不是让你的网站在任何特定设备上都能运行很快，而是使用户满意。</p><p><code>Response</code>: 应该尽可能快速的响应用户的操作，应在在<code>100ms</code>以内响应用户输入。</p><p><code>Animation</code>: 在展示动画的时候，每一帧应该以<code>16ms</code>进行渲染，这样可以保持动画效果的一致性，并且避免卡顿。</p><p><code>Idle</code>: 当使用<code>js</code>主线程的时候，应该把任务划分到执行时间小于<code>50ms</code>的片段中去，这样可以释放线程以进行用户交互。<code>50ms</code>为单位是为了保证用户在发生操作的<code>100ms</code>内做出响应。</p><p>要使网站响应迅速，动画流畅，通常都需要较长的处理时间，但以用户为中心来看待性能问题，就会发现并非所有工作都需要在响应和加载阶段完成，完全可以利用浏览器的空闲时间处理可延迟的任务，只要让用户感受不到延迟即可。利用空闲时间处理延迟可减少预加载的数据大小，以保证网站或应用快速完成加载。</p><p><code>Load</code>: 应该在小于<code>1s</code>的时间内加载完成你的网站，并可以进行用户交互。根据网络条件和硬件的不同，用户对性能延迟的理解也有所不同，在<code>3G</code>网络需要花费更多的时间，<code>5s</code>是一个更现实的目标。</p><p>基于用户体验的性能指标其中包括一下几个比较重要的性能指标。</p><h3 id="_1-fcp-first-contentful-paint" tabindex="-1"><a class="header-anchor" href="#_1-fcp-first-contentful-paint" aria-hidden="true">#</a> 1. FCP (First Contentful Paint)</h3><p>首次内容绘制，浏览器首次绘制来自<code>DOM</code>的内容的时间，内容必须包括文本，图片，非白色的<code>canvas</code>或<code>svg</code>，也包括带有正在加载中的<code>web</code>字体文本。这是用户第一次看到的内容。</p><table><thead><tr><th>FCP时间(秒)</th><th>颜色编码</th><th>FPC分数</th></tr></thead><tbody><tr><td>0 - 2</td><td>绿色(快)</td><td>75 - 100</td></tr><tr><td>2 - 4</td><td>橙色(中等)</td><td>50 - 74</td></tr><tr><td>超过4</td><td>红色(慢)</td><td>0 - 49</td></tr></tbody></table><h3 id="_2-lcp-largest-contentful-paint" tabindex="-1"><a class="header-anchor" href="#_2-lcp-largest-contentful-paint" aria-hidden="true">#</a> 2. LCP (Largest Contentful Paint)</h3><p>最大内容绘制，可视区域中最大的内容元素呈现到屏幕上的时间，用以估算页面的主要内容对用户的可见时间。<code>img</code>图片，<code>video</code>元素的封面，通过<code>url</code>加载到的北京，文本节点等，为了提供更好的用户体验，网站应该在<code>2.5s</code>以内或者更短的时间最大内容绘制。</p><table><thead><tr><th>LCP时间(秒)</th><th>颜色编码</th></tr></thead><tbody><tr><td>0 - 2.5</td><td>绿色(快)</td></tr><tr><td>2.5 - 4</td><td>橙色(中等)</td></tr><tr><td>超过4</td><td>红色(慢)</td></tr></tbody></table><h3 id="_3-fid-first-input-delay" tabindex="-1"><a class="header-anchor" href="#_3-fid-first-input-delay" aria-hidden="true">#</a> 3. FID (First Input Delay)</h3><p>首次输入延迟，从用户第一次与页面进行交互到浏览器实际能够响应该交互的时间，输入延迟是因为浏览器的主线程正忙于做其他事情，所以不能响应用户，发生这种情况的一个常见原因是浏览器正忙于解析和执行应用程序加载的大量计算的<code>JavaScript</code>。</p><table><thead><tr><th>FID时间(毫秒)</th><th>颜色编码</th></tr></thead><tbody><tr><td>0 - 100</td><td>绿色(快)</td></tr><tr><td>100 - 300</td><td>橙色(中等)</td></tr><tr><td>超过300</td><td>红色(慢)</td></tr></tbody></table><h3 id="_4-tti-time-to-interactive" tabindex="-1"><a class="header-anchor" href="#_4-tti-time-to-interactive" aria-hidden="true">#</a> 4. TTI (Time to Interactive)</h3><p>网页第一次完全达到可交互状态的时间点，浏览器已经可以持续的响应用户的输入，完全达到可交互的状态的时间是在最后一个长任务完成的时间，并且在随后的<code>5s</code>内网络和主线程是空闲的。从定义上来看，中文名称叫持续可交互时间或可流畅交互时间更合适。</p><table><thead><tr><th>TTI时间(秒)</th><th>颜色编码</th></tr></thead><tbody><tr><td>0 - 3.8</td><td>绿色(快)</td></tr><tr><td>3.9 - 7.3</td><td>橙色(中等)</td></tr><tr><td>超过7.3</td><td>红色(慢)</td></tr></tbody></table><h3 id="_5-tbt-total-block-time" tabindex="-1"><a class="header-anchor" href="#_5-tbt-total-block-time" aria-hidden="true">#</a> 5. TBT (Total Block Time)</h3><p>总阻塞时间，度量了<code>FCP</code>和<code>TTI</code>之间的总时间，在该时间范围内，主线程被阻塞足够长的时间以防止输入响应。只要存在长任务，该主线程就会被视为阻塞，该任务在主线程上运行超过<code>50</code>毫秒。</p><p>线程阻塞是因为浏览器无法中断正在进行的任务，因此如果用户确实在较长的任务中间与页面进行交互，则浏览器必须等待任务完成才能响应。</p><table><thead><tr><th>TBT时间(毫秒)</th><th>颜色编码</th></tr></thead><tbody><tr><td>0 - 300</td><td>绿色(快)</td></tr><tr><td>300 - 600</td><td>橙色(中等)</td></tr><tr><td>超过600</td><td>红色(慢)</td></tr></tbody></table><h3 id="_6-cls-cumulative-layout-shift" tabindex="-1"><a class="header-anchor" href="#_6-cls-cumulative-layout-shift" aria-hidden="true">#</a> 6. CLS (Cumulative Layout Shift)</h3><p>累计布局位移，<code>CLS</code>会测量在页面整个生命周期中发生的每个意外的布局移位的所有单独布局移位分数的总和，他是一种保证页面的视觉稳定性从而提升用户体验的指标方案。</p><p>用人话来说就是当点击页面中的某个元素的时候，突然布局变了，手指点到了其它位置。比如想点击页面的链接，突然出现了一个<code>banner</code>。这种情况可能是因为尺寸未知的图像或者视频。</p><table><thead><tr><th>CLS时间(毫秒)</th><th>颜色编码</th></tr></thead><tbody><tr><td>0 - 0.1</td><td>绿色(快)</td></tr><tr><td>0.1 - 0.25</td><td>橙色(中等)</td></tr><tr><td>超过0.25</td><td>红色(慢)</td></tr></tbody></table><h2 id="二、web-vitals" tabindex="-1"><a class="header-anchor" href="#二、web-vitals" aria-hidden="true">#</a> 二、Web Vitals</h2><p>这也是谷歌指定的<code>web</code>性能指标标准, 谷歌认为之前的标准太复杂，指标太多了，在<code>2020</code>年重新进行了梳理，简化到了三个。加载性能<code>LCP</code>，交互性<code>FID</code>，视觉稳定性<code>CLS</code>。只需要做好这三个，网站的性能基本上就可以了。</p><p>测量<code>Web Vitals</code>的工具有很多，比如<code>Lighthouse</code>，<code>web-vitals</code>，浏览器插件<code>web vitals</code>。</p><h3 id="_1-web-vitals" tabindex="-1"><a class="header-anchor" href="#_1-web-vitals" aria-hidden="true">#</a> 1. Web-Vitals</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// npm install web-vitals -g</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> getLCP<span class="token punctuation">,</span> getFID<span class="token punctuation">,</span> getCLS <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;web-vitals&#39;</span><span class="token punctuation">;</span>

<span class="token function">getCLS</span><span class="token punctuation">(</span>conole<span class="token punctuation">.</span>log<span class="token punctuation">)</span>
<span class="token function">getFID</span><span class="token punctuation">(</span>conole<span class="token punctuation">.</span>log<span class="token punctuation">)</span>
<span class="token function">getCLS</span><span class="token punctuation">(</span>conole<span class="token punctuation">.</span>log<span class="token punctuation">)</span>
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-浏览器插件" tabindex="-1"><a class="header-anchor" href="#_2-浏览器插件" aria-hidden="true">#</a> 2. 浏览器插件</h3><p>谷歌浏览器可以直接在插件市场中查找并且安装<code>web vitals</code>。安装完成之后浏览器的右上角会多出插件标志，点击就会显示页面的性能指标。</p><h2 id="三、性能测试" tabindex="-1"><a class="header-anchor" href="#三、性能测试" aria-hidden="true">#</a> 三、性能测试</h2><h3 id="_1-lighthouse-灯塔" tabindex="-1"><a class="header-anchor" href="#_1-lighthouse-灯塔" aria-hidden="true">#</a> 1. Lighthouse（灯塔）</h3><p><code>Lighthouse</code>是谷歌开发并开源的<code>web</code>性能测试工具，用于改进网络应用的质量，可以将其作为一个<code>Chrome</code>扩展程序运行，或从命令行运行。只需要为其提供一个需要审查的地址，<code>Lighthouse</code>就会对页面进行一连串的测试，生成一个有关页面性能的报告。</p><p>在浏览器的调试工具中默认就存在<code>lighthouse</code>选项，只需要切换至<code>lighthouse</code>，在右侧的选项区选中需要的选项。点击生成报告。</p><h3 id="_2-webpagetest" tabindex="-1"><a class="header-anchor" href="#_2-webpagetest" aria-hidden="true">#</a> 2. WebPageTest</h3><p>在线<code>web</code>性能测试工具(<code>https://www.webpagetest.org</code>), 提供多地点测试。他只能测试已经发布了的网站。输入需要测试的网页地址，点击<code>start test</code>按钮就开始测试了，可以选择测试地理位置，测试的浏览器等。</p><p>https://juejin.cn/post/6974565176427151397</p>`,43),n=[c];function s(i,r){return e(),d("div",null,n)}const l=t(o,[["render",s],["__file","前端性能指标.html.vue"]]);export{l as default};
