import{_ as d,o as t,c as e,a as c}from"./app-53705635.js";const o={},r=c(`<h3 id="字符集" tabindex="-1"><a class="header-anchor" href="#字符集" aria-hidden="true">#</a> 字符集</h3><p>计算机系统里的字符集，就是已编号的字符的有序集合。比如ASCII字符集，按照编号顺序排列。</p><h3 id="字符集编码过程" tabindex="-1"><a class="header-anchor" href="#字符集编码过程" aria-hidden="true">#</a> 字符集编码过程</h3><p>一个<code>字符集</code>从诞生到真正让计算机使用大致要经历下边5个步骤：</p><ol><li><p><strong>明确包含字符的范围。</strong></p><p>这个步骤就是确定<code>字符集</code>里应该包含哪些字符。比如<code>ASCII字符集</code>收录128个字符，而<code>GB2312字符集</code>收录7445个字符。</p></li><li><p><strong>给步骤<code>1</code>中确定的字符进行编号。</strong></p><p>对于字符集中已经确定的字符，想个办法让某个字符和某个数字建立一一对应关系。</p><p>比如<code>ASCII字符集</code>，字符只有128个，所以直接给每一个字符指定一个<code>0~127</code>的数字。但是比较复杂的字符集就不是那么简单了，比如<code>GB2312字符集</code>用了<code>区位码</code>的方式来给字符编号。</p><p>特别注意：编号与下边步骤中的<code>编码</code>是两个完全不同的概念。</p></li><li><p><strong>将步骤<code>2</code>中的<code>编号</code>确定<code>逻辑上的字符编码</code>。</strong></p><p>计算机只能认识二进制，要把字符存到计算机里需要把字符<code>编号</code>映射为二进制数据。这种映射有的是直接把编号映射为二进制数据，有的因为一些原因不能直接映射，采用一些算法来计算出该编号对应的二进制数据。</p><table><thead><tr><th>Bin(二进制)</th><th>Oct(八进制)</th><th>Dec(十进制)</th><th>Hex(十六进制)</th><th>缩写/字符</th><th>解释</th></tr></thead><tbody><tr><td>0011 0000</td><td>060</td><td>48</td><td>0x30</td><td>0</td><td>字符0</td></tr><tr><td>0011 0001</td><td>061</td><td>49</td><td>0x31</td><td>1</td><td>字符1</td></tr><tr><td>0011 0010</td><td>062</td><td>50</td><td>0x32</td><td>2</td><td>字符2</td></tr><tr><td>0011 0011</td><td>063</td><td>51</td><td>0x33</td><td>3</td><td>字符3</td></tr><tr><td>0011 0100</td><td>064</td><td>52</td><td>0x34</td><td>4</td><td>字符4</td></tr><tr><td>0011 0101</td><td>065</td><td>53</td><td>0x35</td><td>5</td><td>字符5</td></tr><tr><td>0011 0110</td><td>066</td><td>54</td><td>0x36</td><td>6</td><td>字符6</td></tr><tr><td>0011 0111</td><td>067</td><td>55</td><td>0x37</td><td>7</td><td>字符7</td></tr><tr><td>0011 1000</td><td>070</td><td>56</td><td>0x38</td><td>8</td><td>字符8</td></tr><tr><td>0011 1001</td><td>071</td><td>57</td><td>0x39</td><td>9</td><td>字符9</td></tr></tbody></table><p>但是用二进制表示<code>字符</code>需要注意一下这些事：</p><ul><li><p>对于一段文本的二进制文件，计算机一次应该读多少位呢？</p><p>计算机里是以<code>字节</code>(8位)为基本处理单位的，不同的字符集编码有不同的规定，有的一次读一个字节，有的一次读2个，有的一次读4个。所以一次读的位数应该是8的倍数。</p><p>计算机一次读的规定的字节称为<code>编码单位</code>(英文名叫<code>Code Unit</code>)，也叫<code>码元</code>。</p></li></ul><p><code>逻辑字符编码</code>的意思就是把步骤<code>2</code>中的字符编号映射为一个二进制数字，并且规定好<code>码元</code>大小。一个<code>字符</code>也可以由几个<code>码元</code>排列起来，这个排起来的序列可以称之为<code>码元序列</code>，例如utf-8有可能一个字符由几个<code>码元</code>排列起来的。</p><p>对于同一种字符集，因为从<code>编号</code>映射到二进制数据的方式不同或者采用的<code>码元</code>大小不一样，同一种字符集也可能有多种编码方式。(unicode字符集)</p></li><li><p>给步骤<code>3</code>中确定的逻辑上的字符编码生成物理上的字符编码。</p><p>对于步骤<code>3</code>确定的二进制数字，是跟特定的计算机系统平台无关的<code>逻辑意义上的编码</code>，那么所谓的<code>物理上的字符编码</code>就是跟特定的计算机系统平台有关的更具体的编码。</p><p>这个主要是针对<code>码元</code>是多个字节的情况，<code>码元</code>为单个字节的可以认为步骤3和步骤4是一样的。字节的排列顺序会受到不同系统的影响。</p><p>经过物理编码后的二进制序列，我们称之为<code>字节序列</code>。当然，很多时候<code>码元序列</code>和<code>字节序列</code>的值是一样的。</p></li><li><p>面向计算机更底层，进行进一步的适应性编码处理。</p></li></ol><h3 id="解码就是编码的逆过程" tabindex="-1"><a class="header-anchor" href="#解码就是编码的逆过程" aria-hidden="true">#</a> 解码就是编码的逆过程</h3><p>ASCII编码规定1个字节作为1个<code>码元</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>01001100 01001101 01001110
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1001100 对应编号 76 (L)
1001101 对应编号 77 (M)
1001110 对应编号 78 (N)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符集和字符编码模型介绍" tabindex="-1"><a class="header-anchor" href="#字符集和字符编码模型介绍" aria-hidden="true">#</a> 字符集和字符编码模型介绍</h3><table><thead><tr><th>字符集</th><th>说明</th></tr></thead><tbody><tr><td>ASCII</td><td>美国信息交换标准代码, 包含字母、数字和一些特殊符号</td></tr><tr><td>GB2312</td><td>收录了汉字以及拉丁字母、希腊字母、日文平假名及片假名字母、俄语西里尔字母。其中收录汉字6763个，其他文字符号682个。</td></tr><tr><td>BIG5</td><td>又称大五码或五大码，宏碁(Acer)、神通(MiTAC)、佳佳、零壹 (Zero One)、大众 (FIC)创立，故称大五码。是台湾发明的，繁体字符集。</td></tr><tr><td>GBK</td><td><code>GBK</code>字符集就是在<code>GB2312</code>的基础上，对它收录的字符做了一个扩充，共收录 <code>21886</code> 个汉字和图形符号，BIG5的字符集，非国家标准，K代表扩展。</td></tr><tr><td>GB18030</td><td>GB家族的新版字符集。</td></tr><tr><td>unicode</td><td>包含ASCII字符集，重新定义了全球通用的字符集。</td></tr></tbody></table><table><thead><tr><th>编码模型</th><th>说明</th></tr></thead><tbody><tr><td>ASCII</td><td>ASCII字符编码，以0-127编号，使用编号直接进行二进制编码</td></tr><tr><td>GB2312</td><td>最早的简体中文编码，使用分区编码</td></tr><tr><td>BIG5</td><td>繁体中文编码，主要用于台湾地区</td></tr><tr><td>GBK</td><td>略</td></tr><tr><td>GB18030</td><td>GB家族的新版编码，向下兼容</td></tr><tr><td>UTF-8、UTF-16、UTF-32</td><td>国际化编码标准，<code>码元</code>大小分别为1个字节、2个字节、4个字节。</td></tr></tbody></table><p><code>unicode字符集</code>编码的时候目前<code>码元</code>大小有1个字节、2个字节、4个字节这么三种情况，分别对应的编码方式是<code>UTF-8</code>、<code>UTF-16</code>、<code>UTF-32</code>这三种</p><h5 id="utf-8" tabindex="-1"><a class="header-anchor" href="#utf-8" aria-hidden="true">#</a> UTF-8</h5><p>这种编码方案的<code>码元</code>采用一个字节。但是一个字节最多只能表示256个字符。所以<code>UTF-8编码</code>是可以使用了多个字节组成一个字符，用首字节的开头几位来辨别是一个字符用几个字节编码的：</p><ul><li>如果首字节以0开头，肯定是单字节编码(单个码元)；</li><li>如果首字节以110开头，肯定是双字节编码(2个码元)；</li><li>如果首字节以1110开头，肯定是三字节编码(3个码元)。</li></ul><h5 id="utf-16" tabindex="-1"><a class="header-anchor" href="#utf-16" aria-hidden="true">#</a> UTF-16</h5><p>这种编码方案的<code>码元</code>采用2个字节，但是2个字节最多只能表示65536个字符，<code>UTF-16</code>提出了一个<code>代理区</code>的概念。</p><h5 id="utf-32" tabindex="-1"><a class="header-anchor" href="#utf-32" aria-hidden="true">#</a> UTF-32</h5><p>这种编码方案的<code>码元</code>采用4个字节，4个字节就可以表示<code>4294967296</code>个数，所以使用一个码元(4字节)就基本可以表示unicode字符集所有的编号了。</p><p><strong>Tip</strong></p><p>u字符的在三种编号被编号为：</p><p>UTF-8</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>01110101
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>UTF-16</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>00000000 01110101
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>UTF-32</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>00000000 00000000 00000000 01110101
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所以UTF-16、UTF-32在编码0~127编号的字符的时候会比UTF-8浪费。</p><h3 id="bom-byte-order-mark-字节顺序标记" tabindex="-1"><a class="header-anchor" href="#bom-byte-order-mark-字节顺序标记" aria-hidden="true">#</a> BOM（Byte Order Mark）字节顺序标记</h3><p>当使用windows记事本保存文件的时候，编码方式可以选择ANSI（通过locale判断，简体中文系统下是GB家族）、UTF-16LE、Utf-8等。</p><p>windows（例如：简体中文系统）在文件头部增加了几个字节以表示编码方式，三个字节（0xef, 0xbb, 0xbf）表示UTF-8；两个字节（0xff, 0xfe或者0xfe, 0xff）表示UTF-16（Unicode）；无表示GB**。</p><p>excel沿用了windows判断编码的逻辑（上文提到），当发现无BOM时，采用GB18030编码进行解码而导致内容乱码。</p>`,33),a=[r];function i(n,l){return t(),e("div",null,a)}const p=d(o,[["render",i],["__file","字符编码.html.vue"]]);export{p as default};
