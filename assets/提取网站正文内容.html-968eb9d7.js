import{_ as n,o as s,c as a,a as t}from"./app-53705635.js";const p={},e=t(`<h3 id="_1、htmlparser2" tabindex="-1"><a class="header-anchor" href="#_1、htmlparser2" aria-hidden="true">#</a> 1、htmlparser2</h3><p>​ <strong>htmlparser2</strong>是一个可以对HTML解析的npm包，提供了一个解析器——<strong>Parser</strong>。初始化Parser必需传一个handler对象，这个对象可以设置钩子函数，Parser解析时会在每个阶段运行对应的钩子函数。第二个参数options是可选的。</p><p>​ htmlparser2会按顺序读取html的每个字符，并且推测哪些是标签名、属性和text，所以htmlparser2在解析完每一个标签后都会按顺序运行相应的钩子函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 主要用到的钩子函数</span>
<span class="token function">onopentagname</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>str<span class="token operator">&gt;</span> name<span class="token punctuation">)</span>              <span class="token comment">// 标签开始时</span>
<span class="token function">onattribute</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>str<span class="token operator">&gt;</span> name<span class="token punctuation">,</span> <span class="token operator">&lt;</span>str<span class="token operator">&gt;</span> value<span class="token punctuation">)</span>   <span class="token comment">// 读到标签属性时</span>
<span class="token function">ontext</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>str<span class="token operator">&gt;</span> text<span class="token punctuation">)</span>                     <span class="token comment">// 读到标签文本时</span>
<span class="token function">onclosetag</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>str<span class="token operator">&gt;</span> name<span class="token punctuation">)</span>                 <span class="token comment">// 标签闭合时</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>官方例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> htmlparser2 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;htmlparser2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">htmlparser2<span class="token punctuation">.</span>Parser</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function">onopentag</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> attributes</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">&quot;script&quot;</span> <span class="token operator">&amp;&amp;</span> attributes<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&quot;text/javascript&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;JS! Hooray!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">ontext</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;--&gt;&quot;</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">onclosetag</span><span class="token punctuation">(</span><span class="token parameter">tagname</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tagname <span class="token operator">===</span> <span class="token string">&quot;script&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;That&#39;s it?!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
parser<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>
    <span class="token string">&quot;Xyz &lt;script type=&#39;text/javascript&#39;&gt;const foo = &#39;&lt;&lt;bar&gt;&gt;&#39;;&lt;/ script&gt;&quot;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
parser<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

输出
<span class="token operator">--</span><span class="token operator">&gt;</span> Xyz
<span class="token constant">JS</span><span class="token operator">!</span> Hooray<span class="token operator">!</span>
<span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token string">&#39;&lt;&lt;bar&gt;&gt;&#39;</span><span class="token punctuation">;</span>
That&#39;s it<span class="token operator">?</span><span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、readabilitysax" tabindex="-1"><a class="header-anchor" href="#_2、readabilitysax" aria-hidden="true">#</a> 2、readabilitySAX</h3><p>​ <strong>readabilitySAX</strong>提供了一个<strong>Readability</strong>构造函数，Readability可以初始化一个Parser解析器需要的handler对象，Parser解析器和Readability实例对象搭配使用就可以比较精准的提取到网站的正文内容。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span>Readability<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;readabilitySAX&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>Parser<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;htmlparser2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> readable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Readability</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parser</span><span class="token punctuation">(</span>readable<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

parser<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> article <span class="token operator">=</span> <span class="token keyword">await</span> readable<span class="token punctuation">.</span><span class="token function">getArticle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

parser<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、解析正文过程" tabindex="-1"><a class="header-anchor" href="#_3、解析正文过程" aria-hidden="true">#</a> 3、解析正文过程</h3><p>![image-20211223153102513](/Users/xuyanjie/Library/Application Support/typora-user-images/image-20211223153102513.png)</p><h3 id="_4、readability的实现" tabindex="-1"><a class="header-anchor" href="#_4、readability的实现" aria-hidden="true">#</a> 4、Readability的实现</h3><p>自定义了一个<strong>Element类</strong>，一个轻量级的类dom对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">tagName<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> tagName<span class="token punctuation">;</span>        <span class="token comment">// 标签名</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>       <span class="token comment">// 父级Element类</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>attributes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>       <span class="token comment">// 属性</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token comment">// 子级</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>tagScore <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token comment">// 标签得分</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>attributeScore <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 属性得分</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>totalScore <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 总得分</span>
  <span class="token operator">...</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>isCandidate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token comment">// 是否为正文内容的候选人</span>
<span class="token punctuation">}</span>
<span class="token function">addInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token function">getOuterHTML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token function">getInnerHTML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token function">getFormattedText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token function">getTopCandidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一些标签名分组或者可能标签名的黑白名单</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> headerTags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;h1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;h2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;h3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;h4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;h5&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;h6&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> tagScores <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span>
    <span class="token literal-property property">article</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
    <span class="token literal-property property">blockquote</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
    <span class="token operator">...</span>
    <span class="token literal-property property">th</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span>
    <span class="token literal-property property">ul</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
<span class="token keyword">const</span> re_positive <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">article|blog|body|content|entry|main|news|page|pagination)|post|story|text</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> re_negative <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">contact|footer|masthead|media|meta|outbrain|promo|related|scroll|shoutbox|sidebar|sponsor|shopping|tags|tool|widget</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Readability类</strong>，构造Parser解析器需要的handler函数。Readability通过钩子函数构造了一个Element树，类似简易版的dom树。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Readability</span> <span class="token punctuation">{</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>              <span class="token comment">// 初始化currentElement为new Element(&quot;document&quot;)</span>
	
	<span class="token comment">// 开始标签时</span>
	<span class="token function">onopentagname</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>  <span class="token comment">// 创建以currentElement为parent的Element类给到currentElement</span>
	
	<span class="token comment">// 读到标签属性时</span>
	<span class="token function">onattribute</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token operator">...</span>
		<span class="token comment">// 根据id、class的属性值是否命中自定义的标签名分组，来给当前Element的attributeScore加减分</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">&quot;id&quot;</span> <span class="token operator">||</span> name <span class="token operator">===</span> <span class="token string">&quot;class&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>re_safe<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        elem<span class="token punctuation">.</span>attributeScore <span class="token operator">+=</span> <span class="token number">300</span><span class="token punctuation">;</span>
        elem<span class="token punctuation">.</span>isCandidate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>re_negative<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> elem<span class="token punctuation">.</span>attributeScore <span class="token operator">-=</span> <span class="token number">25</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>re_positive<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> elem<span class="token punctuation">.</span>attributeScore <span class="token operator">+=</span> <span class="token number">25</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">...</span>
    <span class="token comment">// 如果标签时img，width超过了设置值，有概率为正文内容中的图片</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>elem<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&quot;img&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">&quot;width&quot;</span> <span class="token operator">||</span> name <span class="token operator">===</span> <span class="token string">&quot;height&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    	 <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">&quot;width&quot;</span> <span class="token operator">?</span> value <span class="token operator">&gt;=</span> <span class="token number">390</span> <span class="token operator">:</span> value <span class="token operator">&gt;=</span> <span class="token number">290</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       		elem<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>attributeScore <span class="token operator">+=</span> <span class="token number">20</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">&quot;width&quot;</span> <span class="token operator">?</span> value <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">:</span> value <span class="token operator">&gt;=</span> <span class="token number">150</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       		elem<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>attributeScore <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token operator">...</span>
	<span class="token punctuation">}</span>
	
	<span class="token comment">// 读到标签内容时, 将文本内容添加进Element的children中</span>
	<span class="token function">ontext</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  	<span class="token keyword">this</span><span class="token punctuation">.</span>_currentElement<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token function">onclosetag</span><span class="token punctuation">(</span><span class="token parameter">tagName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 		<span class="token operator">...</span>
    <span class="token comment">// 遇到标签名为title时，取title的内容为origTitle</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tagName <span class="token operator">===</span> <span class="token string">&quot;title&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>_origTitle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_origTitle <span class="token operator">=</span> elem<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>re_whitespace<span class="token punctuation">,</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>headerTags<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>tagName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token comment">// headerTags标签内容包含在origTitle中，则大概率为正文标题</span>
      <span class="token keyword">const</span> title <span class="token operator">=</span> elem<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>re_whitespace<span class="token punctuation">,</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_origTitle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_origTitle<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>_headerTitle <span class="token operator">=</span> title<span class="token punctuation">;</span>
          <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tagName <span class="token operator">===</span> <span class="token string">&quot;h1&quot;</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tagName <span class="token operator">===</span> <span class="token string">&quot;h1&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 直接取第一个h1标签内容为正文标题</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_headerTitle <span class="token operator">=</span> title<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
 		<span class="token punctuation">}</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个<strong>Element</strong>类拥有<strong>score</strong>和<strong>getTopCandidate</strong>方法，<strong>getTopCandidate</strong>是递归遍历当前<strong>Element</strong>的<strong>children</strong>，得到<strong>score</strong>最高的<strong>Element</strong>作为<strong>topCandidate</strong>，然后再根据这个<strong>topCandidate</strong>递归遍历拼接text，最终得到正文内容。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获取topCandidate</span>
<span class="token function">getTopCandidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> childs <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">;</span>
  <span class="token keyword">let</span> topScore <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> topCandidate<span class="token punctuation">;</span>
  <span class="token keyword">let</span> elem<span class="token punctuation">;</span>
  <span class="token keyword">debugger</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> childs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> childs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>childs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>isCandidate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      elem <span class="token operator">=</span> childs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token comment">// 标签名得分</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>elem<span class="token punctuation">.</span>name <span class="token keyword">in</span> tagScores<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        elem<span class="token punctuation">.</span>tagScore <span class="token operator">+=</span> tagScores<span class="token punctuation">[</span>elem<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token operator">...</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 递归遍历找到最高totalScore的elem</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>elem <span class="token operator">=</span> childs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getTopCandidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> topScore <span class="token operator">&lt;</span> elem<span class="token punctuation">.</span>totalScore<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      topScore <span class="token operator">=</span> elem<span class="token punctuation">.</span>totalScore<span class="token punctuation">;</span>
      topCandidate <span class="token operator">=</span> elem<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> topCandidate<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">// 获取正文内容</span>
<span class="token function">getInnerHTML</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>children
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
         <span class="token keyword">typeof</span> child <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span> <span class="token operator">?</span> child <span class="token operator">:</span> child<span class="token punctuation">.</span><span class="token function">getOuterHTML</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">getOuterHTML</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> i <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">.</span>attributes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ret <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>attributes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token keyword">in</span> formatTags<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ret<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ret<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt;&lt;/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
	<span class="token comment">// 递归遍历拼接text生成正文内容</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ret<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getInnerHTML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>readabilitySAX.js：https://github.com/fb55/readabilitySAX/blob/master/readabilitySAX.js</p>`,21),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","提取网站正文内容.html.vue"]]);export{r as default};
