import{_ as a,o as e,c as r,a as i}from"./app-53705635.js";const t={},h=i('<h3 id="常见的编译性语言和解释性语言" tabindex="-1"><a class="header-anchor" href="#常见的编译性语言和解释性语言" aria-hidden="true">#</a> 常见的编译性语言和解释性语言</h3><p><strong>解释性语言</strong>：Java、Python、Perl、C#、JavaScript、VBScript、Ruby、MATLAB等。 <strong>编译性语言</strong>：C/C++、Pascal/Object Pascal（Delphi）等。</p><p>计算机不能直接理解高级语言，只能直接理解机器语言，所以必须要把高级语言翻译成机器语言，计算机才能执行高级语言编写的程序。</p><p>机器翻译的方式有两种，一个是编译，一个是解释。两种方式只是翻译的时间不同。</p><h3 id="编译性语言" tabindex="-1"><a class="header-anchor" href="#编译性语言" aria-hidden="true">#</a> 编译性语言</h3><p>编译型语言写的程序执行之前，需要一个专门的编译过程，把程序编译成为机器语言的文件，比如exe文件，以后要运行的话就不用重新翻译了，直接使用编译的结果就行了（exe文件），因为翻译只做了一次，运行时不需要翻译，所以编译型语言的程序执行效率高。</p><h3 id="解释性语言" tabindex="-1"><a class="header-anchor" href="#解释性语言" aria-hidden="true">#</a> <strong>解释性语言</strong></h3><p>解释则不同，<strong>解释性语言的程序不需要编译</strong>，省了道工序，解释性语言在运行程序的时候才翻译，比如解释性java语言，专门有一个解释器能够直接执行java程序，每个语句都是执行的时候才翻译。这样解释性语言每执行一次就要翻译一次，效率比较低。</p><h3 id="脚本语言" tabindex="-1"><a class="header-anchor" href="#脚本语言" aria-hidden="true">#</a> 脚本语言</h3><p>脚本语言是解释性语言。脚本语言一般都有相应的脚本引擎来解释执行。它们一般需要解释器才能运行。所以只要系统上有相应语言的解释程序就可以做到跨平台。脚本语言是一种解释性的语言，例如vbscript,javascript,install shield script等等,它不象c\\c++等可以编译成二进制代码，以可执行文件的形式存在。</p><p>脚本语言不需要编译，可以直接用，由解释器来负责解释。</p><h3 id="java语言" tabindex="-1"><a class="header-anchor" href="#java语言" aria-hidden="true">#</a> JAVA语言</h3><p>java语言是特殊的解释性语言。java程序同样需要编译，但是没有直接编译称为机器语言，而是编译为字节码，然后用解释方式执行字节码。Java既可以被编译，也可以被解释。通过编译器，可以把Java程序翻译成一种中间代码 - 称为字节码 - 可以被Java解释器解释的独立于平台的代码。通过解释器，每条Java字节指令被分析，然后在计算机上运行。只需编译一次，程序运行时解释执行，实现跨平台功能。 　　 Java字节码使“写一次，到处运行”成为可能。可以在任何有Java编译器的平台上把Java程序编译成字节码。这个字节码可以运行在任何JVM(Java虚拟机)上。例如，同一个Java程序可以运行在WindowsNT、Solaris和Macintosh上。</p><h3 id="编译器与解释器的区别" tabindex="-1"><a class="header-anchor" href="#编译器与解释器的区别" aria-hidden="true">#</a> 编译器与解释器的区别</h3><p>编译型语言在程序执行之前，有一个单独编译过程，将程序翻译成机器语言，以后执行这个程序时，就不用再进行翻译了。</p><p>解释型语言，是在运行的时候将程序翻译成机器语言，所以运行速度相对于编译型语言要慢。</p><p>编译型与解释型，两者各有利弊。前者由于程序执行速度快，同等条件下对系统要求较低，因此像开发操作系统、大型应用程序、数据库系统等时都采用它，像C/C++、Pascal/Object Pascal（Delphi）等都是编译语言，而一些网页脚本、服务器脚本及辅助开发接口这样的对速度要求不高、对不同系统平台间的兼容性有一定要求的程序则通常使用解释性语言，如Java、JavaScript、VBScript、Perl、Python、Ruby、MATLAB 等等。</p><h3 id="编译性语言不如解释性语言跨平台性好" tabindex="-1"><a class="header-anchor" href="#编译性语言不如解释性语言跨平台性好" aria-hidden="true">#</a> 编译性语言不如解释性语言跨平台性好？</h3><p>编译性语言例如c语言：用C语言开发了程序后，需要通过编译器把程序编译成机器语言（即计算机识别的二进制文件，因为不同的操作系统计算机识别的二进制文件是不同的），所以C语言程序进行移植后，要重新编译。（如windows编译成ext文件，linux编译成erp文件）。</p><p>解释性语言，例如java语言，java程序首先通过编译器编译成.class文件，如果在windows平台上运行，则通过windows平台上的java虚拟机（VM）进行解释。如果运行在linux平台上，则通过linux平台上的java虚拟机进行解释执行。所以说能跨平台，前提是平台上必须要有相匹配的java虚拟机。如果没有java虚拟机，则不能进行跨平台。</p>',20),n=[h];function s(c,d){return e(),r("div",null,n)}const o=a(t,[["render",s],["__file","编译性语言和解释性语言.html.vue"]]);export{o as default};
