import{_ as n,o as s,c as a,a as t}from"./app-53705635.js";const p={},e=t(`<h3 id="一、定义" tabindex="-1"><a class="header-anchor" href="#一、定义" aria-hidden="true">#</a> 一、定义</h3><p>1、重绘 <strong>Repaint</strong>：元素样式的改变</p><p>2、回流 <strong>Reflow</strong>：元素大小，位置的改变，触发了重新布局，导致渲染树重新计算布局和渲染</p><p>第一次渲染页面的时候：触发一次回流和重绘</p><h3 id="二、两者关系" tabindex="-1"><a class="header-anchor" href="#二、两者关系" aria-hidden="true">#</a> 二、两者关系</h3><p>回流一定会触发重绘，重绘不一定回流。</p><p>重绘不是很消耗性能，回流很消耗性能（DOM元素的大小和位置信息都要重新计算一遍），而且一旦发生回流，重新计算完后，还需要重绘。</p><h3 id="三、减少回流" tabindex="-1"><a class="header-anchor" href="#三、减少回流" aria-hidden="true">#</a> 三、减少回流</h3><p><strong>1、获取样式的代码或修改样式的代码写在一起。</strong></p><p>因为现代浏览器默认增加了渲染队列机制，以此减少回流和重绘</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 一次回流重绘</span>
box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">&#39;200px&#39;</span><span class="token punctuation">;</span>
box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">&#39;200px&#39;</span><span class="token punctuation">;</span>
box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>margin <span class="token operator">=</span> <span class="token string">&#39;20px&#39;</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：遇到修改样式的代码会进入渲染队列，仅直到获取样式的代码为止，会将队列里的任务先执行渲染完，形成一次DOM的回流和重绘，所有将获取样式的代码或修改样式的代码写在一起可以减少回流和重绘。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 三次回流和重绘</span>
box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">&#39;200px&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//=&gt;中断渲染队列，立即渲染一次，引发一次DOM回流和重绘  200px</span>
box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">&#39;200px&#39;</span><span class="token punctuation">;</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>
box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>margin <span class="token operator">=</span> <span class="token string">&#39;20px&#39;</span><span class="token punctuation">;</span> 

<span class="token comment">// 一次回流重绘</span>
box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">&#39;200px&#39;</span><span class="token punctuation">;</span>
box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">&#39;200px&#39;</span><span class="token punctuation">;</span>
box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>margin <span class="token operator">=</span> <span class="token string">&#39;20px&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2、使用documentFragment文档碎片批量修改dom</strong></p><p>documentFragment不是真实的dom节点，修改documentFragment不会出发回流和重绘，可以在documentFragment上操作完后，在覆盖到真实dom上，浏览器会智能判断，将重流和重绘只限制到相关的子树上面。</p><p><strong>3、动画使用absolute和fixed定位，脱离文档流，减少对其他元素的影响。</strong></p><p>使用translate实现动画，不会引发重绘回流</p><p><strong>4、隐藏显示元素尽量使用visibility:hidden/visible，不要使用display:none</strong></p><p>visibility所占据的空间位置仍然存在，仅仅是在视觉上看不见，不会有回流。</p><p><strong>5、window.requestAnimationFrame</strong></p><p>使用<code>window.requestAnimationFrame()</code>，因为它可以把代码推迟到下一次重绘之前执行，而不是立即要求页面重绘。</p><p>其他：文件打包优化、请求接口的优化，css的优化</p>`,22),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","重绘和回流.html.vue"]]);export{r as default};
