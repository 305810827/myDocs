(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{448:function(e,t,a){"use strict";a.r(t);var r=a(62),o=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"set-对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-对象"}},[e._v("#")]),e._v(" Set 对象")]),e._v(" "),a("p",[a("strong",[a("code",[e._v("Set")])]),e._v(" 对象允许你存储任何类型的唯一值，无论是[原始值](javascript:if(confirm('https://developer.mozilla.org/en-US/docs/Glossary/커뮤니티  \\n\\n该文件无法用 Teleport Ultra 下载, 因为 它是一个域或路径外部被设置为它的启始地址的地址。  \\n\\n你想在服务器上打开它?'))window.location='https://developer.mozilla.org/en-US/docs/Glossary/커뮤니티')或者是对象引用。")]),e._v(" "),a("h2",{attrs:{id:"语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[e._v("#")]),e._v(" 语法")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("new Set([iterable]);\n")])])]),a("h5",{attrs:{id:"参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参数"}},[e._v("#")]),e._v(" 参数")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("iterable")]),e._v(" "),a("p",[e._v("如果传递一个[可迭代对象](javascript:if(confirm('https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of  \\n\\n该文件无法用 Teleport Ultra 下载, 因为 它是一个域或路径外部被设置为它的启始地址的地址。  \\n\\n你想在服务器上打开它?'))window.location='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of')，它的所有元素将被添加到新的 "),a("strong",[e._v("Set")]),e._v("中。如果不指定此参数或其值为null，则新的 "),a("strong",[e._v("Set")]),e._v("为空。")])]),e._v(" "),a("li",[a("p",[e._v("返回值一个新的Set对象。")])])]),e._v(" "),a("h2",{attrs:{id:"简述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简述"}},[e._v("#")]),e._v(" 简述")]),e._v(" "),a("p",[a("code",[e._v("Set")]),e._v("对象是值的集合，你可以按照插入的顺序迭代它的元素。 Set中的元素只会出现一次，即 Set 中的元素是唯一的。")]),e._v(" "),a("h5",{attrs:{id:"值的相等"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#值的相等"}},[e._v("#")]),e._v(" 值的相等")]),e._v(" "),a("p",[e._v("因为 Set 中的值总是唯一的，所以需要判断两个值是否相等。判断相等的算法与严格相等（===操作符）不同。具体来说，对于 Set ， +0 （+0 严格相等于-0）和-0是不同的值。尽管在最新的 ECMAScript 6规范中这点已被更改。从Gecko 29.0和 [recent nightly Chrome](javascript:if(confirm('https://code.google.com/p/v8/issues/mozbrowserloadstart  \\n\\n该文件无法用 Teleport Ultra 下载, 因为 它是一个域或路径外部被设置为它的启始地址的地址。  \\n\\n你想在服务器上打开它?'))window.location='https://code.google.com/p/v8/issues/mozbrowserloadstart')开始，Set 视 +0 和 -0 为相同的值。另外，"),a("code",[e._v("NaN")]),e._v("和"),a("code",[e._v("undefined")]),e._v("都可以被存储在Set 中， "),a("code",[e._v("NaN")]),e._v("之间被视为相同的值（尽管 NaN !== NaN）。")]),e._v(" "),a("h2",{attrs:{id:"属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性"}},[e._v("#")]),e._v(" 属性")]),e._v(" "),a("ul",[a("li",[a("p",[a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/size",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("Set.prototype.size")]),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("返回 Set 对象中的值的个数")])])]),e._v(" "),a("h2",{attrs:{id:"实例方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例方法"}},[e._v("#")]),e._v(" 实例方法")]),e._v(" "),a("ul",[a("li",[a("h3",{attrs:{id:"add-value"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-value"}},[e._v("#")]),e._v(" "),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/add",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("add(*value*)")]),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("在"),a("code",[e._v("Set")]),e._v("对象尾部添加一个元素。返回该"),a("code",[e._v("Set")]),e._v("对象。")])]),e._v(" "),a("li",[a("h3",{attrs:{id:"clear"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#clear"}},[e._v("#")]),e._v(" "),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/clear",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("clear()")]),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("移除"),a("code",[e._v("Set")]),e._v("对象内的所有元素。")])]),e._v(" "),a("li",[a("h3",{attrs:{id:"delete-value"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#delete-value"}},[e._v("#")]),e._v(" "),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/delete",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("delete(*value*)")]),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("移除"),a("code",[e._v("Set")]),e._v("中与这个值相等的元素，返回"),a("code",[e._v("Set.prototype.has(value)")]),e._v("在这个操作前会返回的值（即如果该元素存在，返回"),a("code",[e._v("true")]),e._v("，否则返回"),a("code",[e._v("false")]),e._v("）。"),a("code",[e._v("Set.prototype.has(value)")]),e._v("在此后会返回"),a("code",[e._v("false")]),e._v("。")])]),e._v(" "),a("li",[a("h3",{attrs:{id:"entries"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#entries"}},[e._v("#")]),e._v(" "),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/entries",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("entries()")]),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("返回一个新的迭代器对象，该对象包含"),a("code",[e._v("Set")]),e._v("对象中的按插入顺序排列的所有元素的值的"),a("code",[e._v("[value, value]")]),e._v("数组。为了使这个方法和"),a("code",[e._v("Map")]),e._v("对象保持相似， 每个值的键和值相等。")])]),e._v(" "),a("li",[a("h3",{attrs:{id:"foreach"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#foreach"}},[e._v("#")]),e._v(" "),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("forEach()")]),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("按照插入顺序，为Set对象中的每一个值调用一次callBackFn。如果提供了"),a("code",[e._v("thisArg")]),e._v("参数，回调中的"),a("code",[e._v("this")]),e._v("会是这个参数。")])]),e._v(" "),a("li",[a("h3",{attrs:{id:"has-value"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#has-value"}},[e._v("#")]),e._v(" "),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/has",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("has(*value*)")]),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("返回一个布尔值，表示该值在"),a("code",[e._v("Set")]),e._v("中存在与否。")])]),e._v(" "),a("li",[a("h3",{attrs:{id:"keys"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keys"}},[e._v("#")]),e._v(" "),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/values",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("keys()")]),e._v(" "),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("与**"),a("code",[e._v("values()")]),e._v("**方法相同，返回一个新的迭代器对象，该对象包含"),a("code",[e._v("Set")]),e._v("对象中的按插入顺序排列的所有元素的值。")])]),e._v(" "),a("li",[a("h3",{attrs:{id:"values"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#values"}},[e._v("#")]),e._v(" "),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/values",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("values()")]),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("返回一个新的迭代器对象，该对象包含"),a("code",[e._v("Set")]),e._v("对象中的按插入顺序排列的所有元素的值。")])]),e._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/@@iterator",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("Set.prototype[@@iterator]()")]),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("返回一个新的迭代器对象，该对象包含"),a("code",[e._v("Set")]),e._v("对象中的按插入顺序排列的所有元素的值。")])])]),e._v(" "),a("h2",{attrs:{id:"示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[e._v("#")]),e._v(" 示例")]),e._v(" "),a("h3",{attrs:{id:"使用set对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用set对象"}},[e._v("#")]),e._v(" 使用"),a("code",[e._v("Set")]),e._v("对象")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let mySet = new Set();\nmySet.add(1);\n// Set(1) {1}\nmySet.add(5);\n// Set(2) {1, 5}\nmySet.add("some text");\n// Set(3) {1, 5, "some text"}\nmySet.has(1);\n// true\nmySet.has(3);\n// false\nmySet.has(5);\n// true\nmySet.has(Math.sqrt(25));\n// true\nmySet.has("Some Text".toLowerCase());\n// true\nmySet.size;\n// 3\nmySet.delete(5);\n// true,  从set中移除5\nmySet.has(5);\n// false, 5已经被移除\nmySet.size;\n// 2, 我们刚刚移除了一个值\n')])])]),a("h3",{attrs:{id:"迭代set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迭代set"}},[e._v("#")]),e._v(" 迭代Set")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// 迭代整个set\n// 按顺序输出：1, "some text"\nfor (let item of mySet) console.log(item);\n// 按顺序输出：1, "some text"\nfor (let item of mySet.keys()) console.log(item);\n// 按顺序输出：1, "some text"\nfor (let item of mySet.values()) console.log(item);\n// 按顺序输出：1, "some text"\n//(键与值相等)\nfor (let [key, value] of mySet.entries()) console.log(key);\n// 转换Set为Array (with Array comprehensions)\nvar myArr = [v for (v of mySet)]; // [1, "some text"]\n// 替代方案(with Array.from)\nvar myArr = Array.from(mySet); // [1, "some text"]\n// 如果在HTML文档中工作，也可以：\nmySet.add(document.body);\nmySet.has(document.querySelector("body")); // true\n// Set和Array互换\nmySet2 = new Set([1,2,3,4]);\nmySet2.size; // 4\n[...mySet2]; // [1,2,3,4]\n// 截取  \nvar intersection = new Set([x for (x of set1) if (set2.has(x))]);\n// 用forEach迭代\nmySet.forEach(function(value) {\n  console.log(value);\n});\n// 1\n// 2\n// 3\n// 4\n')])])]),a("h3",{attrs:{id:"与-array-的联系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#与-array-的联系"}},[e._v("#")]),e._v(" 与 "),a("code",[e._v("Array 的联系")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('var myArray = ["value1", "value2", "value3"];\n// 用Set构造器将Array转换为Set\nvar mySet = new Set(myArray);\nmySet.has("value1"); // returns true\n// 用...(展开操作符)操作符将Set转换为Array\nconsole.log([...mySet]); // 与myArray完全一致\n')])])])])}),[],!1,null,null,null);t.default=o.exports}}]);