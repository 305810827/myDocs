(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{455:function(t,_,e){"use strict";e.r(_);var v=e(62),a=Object(v.a)({},(function(){var t=this,_=t.$createElement,e=t._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("mysql")]),t._v(" "),e("p",[t._v("REGEXP")]),t._v(" "),e("p",[t._v("假设，我现在需要匹配不仅仅是包含100数字的用户，而是100,200，或者300，只要是整百的都需要匹配。或者说，我需要所有名字里面包含数字的，无论什么数字。那么使用"),e("code",[t._v("LIKE")]),t._v("来实现就会显得十分的困难。而正则表达式就会显得十分简单。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("SELECT * FROM my_user WHERE `name` REGEXP '.00'; // 匹配包含整百的名字，如100,200,300等等\n")])])]),e("p",[t._v("表达式"),e("code",[t._v(".00")]),t._v("里面的点，代表的任意字符。也就是无论是1还是2还是9，或者是字母什么的都可以匹配，匹配任意。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("SELECT * FROM my_user WHERE `name` REGEXP '[0-9]'; // 匹配所有名字里面包含数字的用户\n")])])]),e("p",[t._v("或查询也叫"),e("code",[t._v("OR")]),t._v("查询，是条件并列查询的一种情况。类似于编程语言里面的"),e("code",[t._v("if else")]),t._v("只要有一个条件符合就会被匹配。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("SELECT * FROM my_user WHERE `name` REGEXP '100|200';\n")])])]),e("p",[t._v("正则匹配中有一种特殊的"),e("code",[t._v("OR")]),t._v("匹配。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("SELECT * FROM my_user WHERE `name` REGEXP '[12]';\n\n\n")])])]),e("h2",{attrs:{id:"使用预定义字符集"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用预定义字符集"}},[t._v("#")]),t._v(" 使用预定义字符集")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("类")]),t._v(" "),e("th",[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("[:alnum:]")]),t._v(" "),e("td",[t._v("任意数字和字母。相当于[a-zA-Z0-9]")])]),t._v(" "),e("tr",[e("td",[t._v("[:alpha:]")]),t._v(" "),e("td",[t._v("任意字符。相当于[a-zA-z]")])]),t._v(" "),e("tr",[e("td",[t._v("[:blank:]")]),t._v(" "),e("td",[t._v("空格和制表。相当于[（双斜杠，segmentfault这里双斜杠打不出来）t]")])]),t._v(" "),e("tr",[e("td",[t._v("[:cntrl:]")]),t._v(" "),e("td",[t._v("ASCII控制字符（ASCII 0 到31和127）")])]),t._v(" "),e("tr",[e("td",[t._v("[:digit:]")]),t._v(" "),e("td",[t._v("任意数字。相当于[0-9]")])]),t._v(" "),e("tr",[e("td",[t._v("[:graph:]")]),t._v(" "),e("td",[t._v("与[:print:]相同，但是不包含空格")])]),t._v(" "),e("tr",[e("td",[t._v("[:lower:]")]),t._v(" "),e("td",[t._v("任意的小写字母。相当于[a-z]")])]),t._v(" "),e("tr",[e("td",[t._v("[:print:]")]),t._v(" "),e("td",[t._v("任意可打印字符")])]),t._v(" "),e("tr",[e("td",[t._v("[:punct:]")]),t._v(" "),e("td",[t._v("既不在[:alnum:]又不在[:cntrl:]中的任意字符")])]),t._v(" "),e("tr",[e("td",[t._v("[:space:]")]),t._v(" "),e("td",[t._v("包括空格在内的任意空白字符。")])]),t._v(" "),e("tr",[e("td",[t._v("[:upper:]")]),t._v(" "),e("td",[t._v("任意大写字母。相当于[A-Z]")])]),t._v(" "),e("tr",[e("td",[t._v("[:xdigit:]")]),t._v(" "),e("td",[t._v("任意十六进制的数字。相当于[a-fA-F0-9]")])])])]),t._v(" "),e("h2",{attrs:{id:"元字符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#元字符"}},[t._v("#")]),t._v(" 元字符")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("元字符")]),t._v(" "),e("th",[t._v("作用")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("*")]),t._v(" "),e("td",[t._v("重复0次或者多次")])]),t._v(" "),e("tr",[e("td",[t._v("+")]),t._v(" "),e("td",[t._v("重复一次或者多次。相当于{1,}")])]),t._v(" "),e("tr",[e("td",[t._v("?")]),t._v(" "),e("td",[t._v("重复0次或者1次")])]),t._v(" "),e("tr",[e("td",[t._v("{n}")]),t._v(" "),e("td",[t._v("重复n次")])]),t._v(" "),e("tr",[e("td",[t._v("{n,}")]),t._v(" "),e("td",[t._v("重复至少n次")])]),t._v(" "),e("tr",[e("td",[t._v("{n,m}")]),t._v(" "),e("td",[t._v("重复n-m次")])])])]),t._v(" "),e("h2",{attrs:{id:"定位元字符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#定位元字符"}},[t._v("#")]),t._v(" 定位元字符")]),t._v(" "),e("p",[t._v("除了之前的重复元字符，正则还有一种特殊的定位元字符")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("元字符")]),t._v(" "),e("th",[t._v("作用")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("^")]),t._v(" "),e("td",[t._v("文本开始")])]),t._v(" "),e("tr",[e("td",[t._v("$")]),t._v(" "),e("td",[t._v("文本结尾")])]),t._v(" "),e("tr",[e("td",[t._v("[[:<:]]")]),t._v(" "),e("td",[t._v("词的开始")])]),t._v(" "),e("tr",[e("td",[t._v("[[:>:]]")]),t._v(" "),e("td",[t._v("词的结尾")])])])]),t._v(" "),e("h2",{attrs:{id:"regexp-replace"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#regexp-replace"}},[t._v("#")]),t._v(" REGEXP_REPLACE")]),t._v(" "),e("p",[t._v("例子")]),t._v(" "),e("p",[t._v("下面的示例进行检查"),e("code",[t._v("phone_number")]),t._v("，寻找模式*"),e("code",[t._v("xxx")]),e("em",[t._v("。")]),e("code",[t._v("xxx")]),e("em",[t._v(". "),e("em",[e("code",[t._v("xxxx")])]),t._v(". Oracle 使用 ( "),e("em",[e("code",[t._v("xxx")])]),t._v(") "),e("em",[e("code",[t._v("xxx")])]),t._v("-重新格式化此模式")]),e("code",[t._v("xxxx")]),t._v("*。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\n选择\n  REGEXP_REPLACE（电话号码，\n                 '([[:digit:]]{3})\\.([[:digit:]]{3})\\.([[:digit:]]{4})',\n                 '(\\\\1) \\\\2-\\\\3') \"REGEXP_REPLACE\"\n  来自员工\n  ORDER BY \"REGEXP_REPLACE\";\n\nREGEXP_REPLACE\n-------------------------------------------------- ------------------------------\n(515) 123-4444\n(515) 123-4567\n(515) 123-4568\n(515) 123-4569\n(515) 123-5555\n. . .\n")])])]),e("p",[t._v("以下示例检查"),e("code",[t._v("country_name")]),t._v(". Oracle 在字符串中的每个非空字符后放置一个空格。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\n选择\n  REGEXP_REPLACE(country_name, '(.)', '\\\\1 ') \"REGEXP_REPLACE\"\n  来自国家；\n\nREGEXP_REPLACE\n-------------------------------------------------- ------------------------------\n阿根廷\n澳大利亚\n比利时\n巴西\n加拿大\n. . .\n")])])]),e("p",[t._v("以下示例检查字符串，查找两个或多个空格。Oracle 将每次出现的两个或多个空格替换为一个空格。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\n选择\n  REGEXP_REPLACE('500 Oracle Parkway, Redwood Shores, CA',\n                 '( ){2,}', ' ') \"REGEXP_REPLACE\"\n  从双重;\n\nREGEXP_REPLACE\n-------------------------------\n500 Oracle Parkway, Redwood Shores, CA\n")])])]),e("p",[e("strong",[t._v("REGEXP_REPLACE 模式匹配：示例")])]),t._v(" "),e("p",[t._v("以下语句创建一个表 regexp_temp 并向其中插入值：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\n创建表 regexp_temp(empName varchar2(20), emailID varchar2(20));\n\nINSERT INTO regexp_temp (empName, emailID) VALUES ('John Doe', 'johndoe@example.com');\nINSERT INTO regexp_temp (empName, emailID) VALUES ('Jane Doe', 'janedoe@example.com');\n")])])]),e("p",[t._v("以下语句将字符串 'Jane' 替换为 'John'：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\nSELECT empName, REGEXP_REPLACE (empName, 'Jane', 'John') \"STRING_REPLACE\" FROM regexp_temp;\n\nEMPNAME STRING_REPLACE\n\n")])])]),e("p",[t._v("以下语句将字符串 'John' 替换为 'Jane'：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\nSELECT empName, REGEXP_REPLACE (empName, 'Jane', 'John') \"STRING_REPLACE\" FROM regexp_temp;\n\nEMPNAME STRING_REPLACE\n\n")])])]),e("p",[e("strong",[t._v("update")]),t._v(" t_wb_blog t1,")]),t._v(" "),e("p",[t._v("("),e("strong",[t._v("SELECT")]),t._v(" * "),e("strong",[t._v("FROM")]),t._v(" t_wb_blog")]),t._v(" "),e("p",[e("strong",[t._v("WHERE")]),t._v(" Frelease_time "),e("strong",[t._v("REGEXP")]),t._v(" '^[0-9]+\\-[0-9]+\\ [0-9]+\\:[0-9]+$') "),e("strong",[t._v("as")]),t._v(" t2")]),t._v(" "),e("p",[e("strong",[t._v("set")]),t._v(" t1.Frelease_time = "),e("strong",[t._v("REGEXP_REPLACE")]),t._v("(t1.Frelease_time, '([0-9]+\\-[0-9]+)(\\ [0-9]+\\:[0-9]+)', '2021-\\1')")]),t._v(" "),e("p",[e("strong",[t._v("where")]),t._v(" t1.Fid = t2.Fid;")])])}),[],!1,null,null,null);_.default=a.exports}}]);