(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{476:function(t,n,e){"use strict";e.r(n);var a=e(62),l=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"call、apply、bind实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#call、apply、bind实现"}},[t._v("#")]),t._v(" call、apply、bind实现")]),t._v(" "),e("h3",{attrs:{id:"call的使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#call的使用"}},[t._v("#")]),t._v(" call的使用")]),t._v(" "),e("p",[t._v("需要传多个参数时，直接后面接着传参数")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("let people = {\n    name: '鲁迅'\n}\nlet peopleFn = function (str) {\n    return `${str}${this.name}`\n}\npeopleFn('我叫')  // 我叫\npeopleFn.call(people, '我叫') // 我叫鲁迅\n")])])]),e("h3",{attrs:{id:"call的实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#call的实现"}},[t._v("#")]),t._v(" call的实现")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("let people = {\n    name: '鲁迅'\n}\nlet peopleFn = function (str) {\n    return `${str}${this.name}`\n}\n\nFunction.prototype.myCall = function(context){\n\t\tcontext = context || window\n    let arg = [...arguments].slice(1)\n    let fn = Symbol('fn')\n    context[fn] = this\n    let result = context[fn](arg)\n\t\tdelete context[fn]\n\t\treturn result\n}\n\npeopleFn('我叫')  // 我叫\npeopleFn.myCall(people, '我叫') // 我叫鲁迅\n")])])]),e("h3",{attrs:{id:"apply的使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#apply的使用"}},[t._v("#")]),t._v(" apply的使用")]),t._v(" "),e("p",[t._v("与call不同的是，使用数组实现传多个参数")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("peopleFn.apply(people, ['我叫', ',也叫周树人'])\n")])])]),e("h3",{attrs:{id:"apply的实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#apply的实现"}},[t._v("#")]),t._v(" apply的实现")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("let people = {\n    name: '鲁迅'\n}\nlet peopleFn = function (str, endStr) {\n    return `${str}${this.name}${endStr}`\n}\n\nFunction.prototype.myApply = function(context, arg){\n    if (!Array.isArray(arg)) throw new Error('参数必须为数组')\n    context = context || window\n    let fn = Symbol('fn')\n    context[fn] = this\n    let result = context[fn](...arg)\n    delete context[fn]\n    return result\n}\npeopleFn.myApply(people, ['我叫',',也叫周树人']) // 我叫鲁迅,也叫周树人\n")])])]),e("h3",{attrs:{id:"bind的使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bind的使用"}},[t._v("#")]),t._v(" bind的使用")]),t._v(" "),e("p",[t._v("跟call一样接受多个参数，单返回的是一个函数，不会立即执行，返回的函数可以继续传参执行，属于柯里化函数。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("let people = {\n    name: '鲁迅'\n}\nlet peopleFn = function (first, second, third) {\n    return `${this.name},${first},${second},${third}`\n}\n\n\nlet fn = peopleFn.bind(people, '文学家', '思想家')\nfn('革命家') // 鲁迅,文学家,思想家,革命家\n")])])]),e("h3",{attrs:{id:"bind的实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bind的实现"}},[t._v("#")]),t._v(" bind的实现")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("let people = {\n    name: '鲁迅'\n}\nlet peopleFn = function (first, second, third) {\n    return `${this.name},${first},${second},${third}`\n}\n\nFunction.prototype.myBind = function(context){\n    context = context || window\n    let fn = Symbol('fn')\n    let arg = [...arguments].slice(1)\n    context[fn] = this\n    \n    return function () {\n         let arg1 = [...arguments]\n         let result = context[fn](...arg, ...arg1)\n         delete context[fn]\n         return result\n    }\n}\nlet fn = peopleFn.myBind(people, '文学家', '思想家')\nfn('革命家')\n\n")])])])])}),[],!1,null,null,null);n.default=l.exports}}]);