(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{521:function(e,a,r){"use strict";r.r(a);var s=r(62),n=Object(s.a)({},(function(){var e=this,a=e.$createElement,r=e._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"module"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#module"}},[e._v("#")]),e._v(" "),r("strong",[e._v("Module")])]),e._v(" "),r("h3",{attrs:{id:"配置-loader"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#配置-loader"}},[e._v("#")]),e._v(" 配置 Loader")]),e._v(" "),r("p",[e._v("rules 配置模块的读取和解析规则，通常用来配置 Loader。其类型是一个数组，数组里每一项都描述了如何去处理部分文件。 配置一项 "),r("code",[e._v("rules")]),e._v(" 时大致通过以下方式：")]),e._v(" "),r("ol",[r("li",[e._v("条件匹配：通过 test 、 include 、 exclude 三个配置项来命中 Loader 要应用规则的文件。")]),e._v(" "),r("li",[e._v("应用规则：对选中后的文件通过 "),r("code",[e._v("use")]),e._v(" 配置项来应用 Loader，可以只应用一个 Loader 或者按照从后往前的顺序应用一组 Loader，同时还可以分别给 Loader 传入参数。")]),e._v(" "),r("li",[e._v("重置顺序：一组 Loader 的执行顺序默认是从右到左执行，通过 "),r("code",[e._v("enforce")]),e._v(" 选项可以让其中一个 Loader 的执行顺序放到最前或者最后。")])]),e._v(" "),r("p",[e._v("下面来通过一个例子来说明具体使用方法：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("module: {\n  rules: [\n    {\n      // 命中 JavaScript 文件\n      test: /\\.js$/,\n      // 用 babel-loader 转换 JavaScript 文件\n      // ?cacheDirectory 表示传给 babel-loader 的参数，用于缓存 babel 编译结果加快重新编译速度\n      use: ['babel-loader?cacheDirectory'],\n      // 只命中src目录里的js文件，加快 Webpack 搜索速度\n      include: path.resolve(__dirname, 'src')\n    },\n    {\n      // 命中 SCSS 文件\n      test: /\\.scss$/,\n      // 使用一组 Loader 去处理 SCSS 文件。\n      // 处理顺序为从后到前，即先交给 sass-loader 处理，再把结果交给 css-loader 最后再给 style-loader。\n      use: ['style-loader', 'css-loader', 'sass-loader'],\n      // 排除 node_modules 目录下的文件\n      exclude: path.resolve(__dirname, 'node_modules'),\n    },\n    {\n      // 对非文本文件采用 file-loader 加载\n      test: /\\.(gif|png|jpe?g|eot|woff|ttf|svg|pdf)$/,\n      use: ['file-loader'],\n    },\n  ]\n}\n")])])]),r("p",[e._v("在 Loader 需要传入很多参数时，你还可以通过一个 Object 来描述，例如在上面的 babel-loader 配置中有如下代码：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("use: [\n  {\n    loader:'babel-loader',\n    options:{\n      cacheDirectory:true,\n    },\n    // enforce:'post' 的含义是把该 Loader 的执行顺序放到最后\n    // enforce 的值还可以是 pre，代表把 Loader 的执行顺序放到最前面\n    enforce:'post'\n  },\n  // 省略其它 Loader\n]\n")])])]),r("p",[e._v("上面的例子中 "),r("code",[e._v("test include exclude")]),e._v(" 这三个命中文件的配置项只传入了一个字符串或正则，其实它们还都支持数组类型，使用如下：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("{\n  test:[\n    /\\.jsx?$/,\n    /\\.tsx?$/\n  ],\n  include:[\n    path.resolve(__dirname, 'src'),\n    path.resolve(__dirname, 'tests'),\n  ],\n  exclude:[\n    path.resolve(__dirname, 'node_modules'),\n    path.resolve(__dirname, 'bower_modules'),\n  ]\n}\n")])])]),r("h2",{attrs:{id:"noparse"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#noparse"}},[e._v("#")]),e._v(" noParse")]),e._v(" "),r("p",[r("code",[e._v("noParse")]),e._v(" 配置项可以让 Webpack 忽略对部分没采用模块化的文件的递归解析和处理，这样做的好处是能提高构建性能。 原因是一些库例如 jQuery 、ChartJS 它们庞大又没有采用模块化标准，让 Webpack 去解析这些文件耗时又没有意义。")]),e._v(" "),r("p",[r("code",[e._v("noParse")]),e._v(" 是可选配置项，类型需要是 "),r("code",[e._v("RegExp")]),e._v("、"),r("code",[e._v("[RegExp]")]),e._v("、"),r("code",[e._v("function")]),e._v(" 其中一个。")]),e._v(" "),r("p",[e._v("例如想要忽略掉 jQuery 、ChartJS，可以使用如下代码：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// 使用正则表达式\nnoParse: /jquery|chartjs/\n\n// 使用函数，从 Webpack 3.0.0 开始支持\nnoParse: (content)=> {\n  // content 代表一个模块的文件路径\n  // 返回 true or false\n  return /jquery|chartjs/.test(content);\n}\n")])])]),r("h2",{attrs:{id:"注意被忽略掉的文件里不应该包含-import-、-require-、-define-等模块化语句-不然会导致构建出的代码中包含无法在浏览器环境下执行的模块化语句。"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#注意被忽略掉的文件里不应该包含-import-、-require-、-define-等模块化语句-不然会导致构建出的代码中包含无法在浏览器环境下执行的模块化语句。"}},[e._v("#")]),e._v(" 注意被忽略掉的文件里不应该包含 "),r("code",[e._v("import")]),e._v(" 、 "),r("code",[e._v("require")]),e._v(" 、 "),r("code",[e._v("define")]),e._v(" 等模块化语句，不然会导致构建出的代码中包含无法在浏览器环境下执行的模块化语句。")]),e._v(" "),r("h2",{attrs:{id:"parser"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#parser"}},[e._v("#")]),e._v(" parser")]),e._v(" "),r("p",[e._v("因为 Webpack 是以模块化的 JavaScript 文件为入口，所以内置了对模块化 JavaScript 的解析功能，支持 AMD、CommonJS、SystemJS、ES6。 "),r("code",[e._v("parser")]),e._v(" 属性可以更细粒度的配置哪些模块语法要解析哪些不解析，和 "),r("code",[e._v("noParse")]),e._v(" 配置项的区别在于 "),r("code",[e._v("parser")]),e._v(" 可以精确到语法层面， 而 noParse 只能控制哪些文件不被解析。 "),r("code",[e._v("parser")]),e._v(" 使用如下：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("module: {\n  rules: [\n    {\n      test: /\\.js$/,\n      use: ['babel-loader'],\n      parser: {\n      amd: false, // 禁用 AMD\n      commonjs: false, // 禁用 CommonJS\n      system: false, // 禁用 SystemJS\n      harmony: false, // 禁用 ES6 import/export\n      requireInclude: false, // 禁用 require.include\n      requireEnsure: false, // 禁用 require.ensure\n      requireContext: false, // 禁用 require.context\n      browserify: false, // 禁用 browserify\n      requireJs: false, // 禁用 requirejs\n      }\n    },\n  ]\n}\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);