{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{441:function(a,e,t){\"use strict\";t.r(e);var s=t(62),v=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[t(\"h1\",{attrs:{id:\"string-对象\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#string-对象\"}},[a._v(\"#\")]),a._v(\" String 对象\")]),a._v(\" \"),t(\"p\",[t(\"code\",[a._v(\"String\")]),a._v(\"对象是 JavaScript 原生提供的三个包装对象之一，用来生成字符串对象。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v('var s1 = \\'abc\\';\\nvar s2 = new String(\\'abc\\');\\n\\ntypeof s1 // \"string\"\\ntypeof s2 // \"object\"\\n\\ns2.valueOf() // \"abc\"\\n')])])]),t(\"p\",[a._v(\"上面代码中，变量\"),t(\"code\",[a._v(\"s1\")]),a._v(\"是字符串，\"),t(\"code\",[a._v(\"s2\")]),a._v(\"是对象。由于\"),t(\"code\",[a._v(\"s2\")]),a._v(\"是字符串对象，\"),t(\"code\",[a._v(\"s2.valueOf\")]),a._v(\"方法返回的就是它所对应的原始字符串。\")]),a._v(\" \"),t(\"p\",[a._v(\"字符串对象是一个类似数组的对象（很像数组，但不是数组）。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v('new String(\\'abc\\')\\n// String {0: \"a\", 1: \"b\", 2: \"c\", length: 3}\\n  \\n(new String(\\'abc\\'))[1] // \"b\"\\n')])])]),t(\"p\",[a._v(\"上面代码中，字符串\"),t(\"code\",[a._v(\"abc\")]),a._v(\"对应的字符串对象，有数值键（\"),t(\"code\",[a._v(\"0\")]),a._v(\"、\"),t(\"code\",[a._v(\"1\")]),a._v(\"、\"),t(\"code\",[a._v(\"2\")]),a._v(\"）和\"),t(\"code\",[a._v(\"length\")]),a._v(\"属性，所以可以像数组那样取值。\")]),a._v(\" \"),t(\"p\",[a._v(\"除了用作构造函数，\"),t(\"code\",[a._v(\"String\")]),a._v(\"对象还可以当作工具方法使用，将任意类型的值转为字符串。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v('String(true) // \"true\"\\nString(5) // \"5\"\\n')])])]),t(\"p\",[a._v(\"上面代码将布尔值\"),t(\"code\",[a._v(\"true\")]),a._v(\"和数值\"),t(\"code\",[a._v(\"5\")]),a._v(\"，分别转换为字符串。\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"静态方法\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#静态方法\"}},[a._v(\"#\")]),a._v(\" 静态方法\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"fromcharcode\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#fromcharcode\"}},[a._v(\"#\")]),a._v(\" fromCharCode()\")]),a._v(\" \"),t(\"p\",[t(\"code\",[a._v(\"String\")]),a._v(\"对象提供的静态方法（即定义在对象本身，而不是定义在对象实例的方法），主要是\"),t(\"code\",[a._v(\"String.fromCharCode()\")]),a._v(\"。该方法的参数是一个或多个数值，代表 Unicode 码点，返回值是这些码点组成的字符串。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v('String.fromCharCode() // \"\"\\nString.fromCharCode(97) // \"a\"\\nString.fromCharCode(104, 101, 108, 108, 111)\\n// \"hello\"\\n')])])]),t(\"p\",[a._v(\"上面代码中，\"),t(\"code\",[a._v(\"String.fromCharCode\")]),a._v(\"方法的参数为空，就返回空字符串；否则，返回参数对应的 Unicode 字符串。\")]),a._v(\" \"),t(\"p\",[a._v(\"注意，该方法不支持 Unicode 码点大于\"),t(\"code\",[a._v(\"0xFFFF\")]),a._v(\"的字符，即传入的参数不能大于\"),t(\"code\",[a._v(\"0xFFFF\")]),a._v(\"（即十进制的 65535）。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v('String.fromCharCode(0x20BB7)\\n// \"ஷ\"\\nString.fromCharCode(0x20BB7) === String.fromCharCode(0x0BB7)\\n// true\\n')])])]),t(\"p\",[a._v(\"上面代码中，\"),t(\"code\",[a._v(\"String.fromCharCode\")]),a._v(\"参数\"),t(\"code\",[a._v(\"0x20BB7\")]),a._v(\"大于\"),t(\"code\",[a._v(\"0xFFFF\")]),a._v(\"，导致返回结果出错。\"),t(\"code\",[a._v(\"0x20BB7\")]),a._v(\"对应的字符是汉字\"),t(\"code\",[a._v(\"𠮷\")]),a._v(\"，但是返回结果却是另一个字符（码点\"),t(\"code\",[a._v(\"0x0BB7\")]),a._v(\"）。这是因为\"),t(\"code\",[a._v(\"String.fromCharCode\")]),a._v(\"发现参数值大于\"),t(\"code\",[a._v(\"0xFFFF\")]),a._v(\"，就会忽略多出的位（即忽略\"),t(\"code\",[a._v(\"0x20BB7\")]),a._v(\"里面的\"),t(\"code\",[a._v(\"2\")]),a._v(\"）。\")]),a._v(\" \"),t(\"p\",[a._v(\"这种现象的根本原因在于，码点大于\"),t(\"code\",[a._v(\"0xFFFF\")]),a._v(\"的字符占用四个字节，而 JavaScript 默认支持两个字节的字符。这种情况下，必须把\"),t(\"code\",[a._v(\"0x20BB7\")]),a._v(\"拆成两个字符表示。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v('String.fromCharCode(0xD842, 0xDFB7)\\n// \"𠮷\"\\n')])])]),t(\"p\",[a._v(\"上面代码中，\"),t(\"code\",[a._v(\"0x20BB7\")]),a._v(\"拆成两个字符\"),t(\"code\",[a._v(\"0xD842\")]),a._v(\"和\"),t(\"code\",[a._v(\"0xDFB7\")]),a._v(\"（即两个两字节字符，合成一个四字节字符），就能得到正确的结果。码点大于\"),t(\"code\",[a._v(\"0xFFFF\")]),a._v(\"的字符的四字节表示法，由 UTF-16 编码方法决定。\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"实例属性\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#实例属性\"}},[a._v(\"#\")]),a._v(\" 实例属性\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"length\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#length\"}},[a._v(\"#\")]),a._v(\" length\")]),a._v(\" \"),t(\"p\",[a._v(\"字符串实例的\"),t(\"code\",[a._v(\"length\")]),a._v(\"属性返回字符串的长度。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"'abc'.length // 3\\n\")])])]),t(\"h2\",{attrs:{id:\"实例方法\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#实例方法\"}},[a._v(\"#\")]),a._v(\" 实例方法\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"charat\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#charat\"}},[a._v(\"#\")]),a._v(\" charAt()\")]),a._v(\" \"),t(\"p\",[t(\"code\",[a._v(\"charAt\")]),a._v(\"方法返回指定位置的字符，参数是从\"),t(\"code\",[a._v(\"0\")]),a._v(\"开始编号的位置。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v('var s = new String(\\'abc\\');\\n\\ns.charAt(1) // \"b\"\\ns.charAt(s.length - 1) // \"c\"\\n')])])]),t(\"p\",[a._v(\"这个方法完全可以用数组下标替代。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"'abc'.charAt(1) // \\\"b\\\"\\n'abc'[1] // \\\"b\\\"\\n\")])])]),t(\"p\",[a._v(\"如果参数为负数，或大于等于字符串的长度，\"),t(\"code\",[a._v(\"charAt\")]),a._v(\"返回空字符串。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"'abc'.charAt(-1) // \\\"\\\"\\n'abc'.charAt(3) // \\\"\\\"\\n\")])])]),t(\"h3\",{attrs:{id:\"charcodeat\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#charcodeat\"}},[a._v(\"#\")]),a._v(\" charCodeAt()\")]),a._v(\" \"),t(\"p\",[t(\"code\",[a._v(\"charCodeAt()\")]),a._v(\"方法返回字符串指定位置的 Unicode 码点（十进制表示），相当于\"),t(\"code\",[a._v(\"String.fromCharCode()\")]),a._v(\"的逆操作。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"'abc'.charCodeAt(1) // 98\\n\")])])]),t(\"p\",[a._v(\"上面代码中，\"),t(\"code\",[a._v(\"abc\")]),a._v(\"的\"),t(\"code\",[a._v(\"1\")]),a._v(\"号位置的字符是\"),t(\"code\",[a._v(\"b\")]),a._v(\"，它的 Unicode 码点是\"),t(\"code\",[a._v(\"98\")]),a._v(\"。\")]),a._v(\" \"),t(\"p\",[a._v(\"如果没有任何参数，\"),t(\"code\",[a._v(\"charCodeAt\")]),a._v(\"返回首字符的 Unicode 码点。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"'abc'.charCodeAt() // 97\\n\")])])]),t(\"p\",[a._v(\"如果参数为负数，或大于等于字符串的长度，\"),t(\"code\",[a._v(\"charCodeAt\")]),a._v(\"返回\"),t(\"code\",[a._v(\"NaN\")]),a._v(\"。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"'abc'.charCodeAt(-1) // NaN\\n'abc'.charCodeAt(4) // NaN\\n\")])])]),t(\"p\",[a._v(\"注意，\"),t(\"code\",[a._v(\"charCodeAt\")]),a._v(\"方法返回的 Unicode 码点不会大于65536（0xFFFF），也就是说，只返回两个字节的字符的码点。如果遇到码点大于 65536 的字符（四个字节的字符），必须连续使用两次\"),t(\"code\",[a._v(\"charCodeAt\")]),a._v(\"，不仅读入\"),t(\"code\",[a._v(\"charCodeAt(i)\")]),a._v(\"，还要读入\"),t(\"code\",[a._v(\"charCodeAt(i+1)\")]),a._v(\"，将两个值放在一起，才能得到准确的字符。\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"concat\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#concat\"}},[a._v(\"#\")]),a._v(\" concat()\")]),a._v(\" \"),t(\"p\",[t(\"code\",[a._v(\"concat\")]),a._v(\"方法用于连接两个字符串，返回一个新字符串，不改变原字符串。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"var s1 = 'abc';\\nvar s2 = 'def';\\n  \\ns1.concat(s2) // \\\"abcdef\\\"\\n  s1 // \\\"abc\\\"\\n\")])])]),t(\"p\",[a._v(\"该方法可以接受多个参数。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"'a'.concat('b', 'c') // \\\"abc\\\"\\n\")])])]),t(\"p\",[a._v(\"如果参数不是字符串，\"),t(\"code\",[a._v(\"concat\")]),a._v(\"方法会将其先转为字符串，然后再连接。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"var one = 1;\\nvar two = 2;\\nvar three = '3';\\n\\n''.concat(one, two, three) // \\\"123\\\"\\none + two + three // \\\"33\\\"\\n\")])])]),t(\"p\",[a._v(\"上面代码中，\"),t(\"code\",[a._v(\"concat\")]),a._v(\"方法将参数先转成字符串再连接，所以返回的是一个三个字符的字符串。作为对比，加号运算符在两个运算数都是数值时，不会转换类型，所以返回的是一个两个字符的字符串。\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"slice\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#slice\"}},[a._v(\"#\")]),a._v(\" slice()\")]),a._v(\" \"),t(\"p\",[t(\"code\",[a._v(\"slice()\")]),a._v(\"方法用于从原字符串取出子字符串并返回，不改变原字符串。它的第一个参数是子字符串的开始位置，第二个参数是子字符串的结束位置（不含该位置）。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"'JavaScript'.slice(0, 4) // \\\"Java\\\"\\n\")])])]),t(\"p\",[a._v(\"如果省略第二个参数，则表示子字符串一直到原字符串结束。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"'JavaScript'.slice(4) // \\\"Script\\\"\\n\")])])]),t(\"p\",[a._v(\"如果参数是负值，表示从结尾开始倒数计算的位置，即该负值加上字符串长度。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"'JavaScript'.slice(-6) // \\\"Script\\\"\\n'JavaScript'.slice(0, -6) // \\\"Java\\\"\\n'JavaScript'.slice(-2, -1) // \\\"p\\\"\\n\")])])]),t(\"p\",[a._v(\"如果第一个参数大于第二个参数（正数情况下），\"),t(\"code\",[a._v(\"slice()\")]),a._v(\"方法返回一个空字符串。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"'JavaScript'.slice(2, 1) // \\\"\\\"\\n\")])])]),t(\"h3\",{attrs:{id:\"substring\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#substring\"}},[a._v(\"#\")]),a._v(\" substring()\")]),a._v(\" \"),t(\"p\",[t(\"code\",[a._v(\"substring\")]),a._v(\"方法用于从原字符串取出子字符串并返回，不改变原字符串，跟\"),t(\"code\",[a._v(\"slice\")]),a._v(\"方法很相像。它的第一个参数表示子字符串的开始位置，第二个位置表示结束位置（返回结果不含该位置）。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"'JavaScript'.substring(0, 4) // \\\"Java\\\"\\n\")])])]),t(\"p\",[a._v(\"如果省略第二个参数，则表示子字符串一直到原字符串的结束。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"'JavaScript'.substring(4) // \\\"Script\\\"\\n\")])])]),t(\"p\",[a._v(\"如果第一个参数大于第二个参数，\"),t(\"code\",[a._v(\"substring\")]),a._v(\"方法会自动更换两个参数的位置。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"'JavaScript'.substring(10, 4) // \\\"Script\\\"\\n// 等同于\\n'JavaScript'.substring(4, 10) // \\\"Script\\\"\\n\")])])]),t(\"p\",[a._v(\"上面代码中，调换\"),t(\"code\",[a._v(\"substring\")]),a._v(\"方法的两个参数，都得到同样的结果。\")]),a._v(\" \"),t(\"p\",[a._v(\"如果参数是负数，\"),t(\"code\",[a._v(\"substring\")]),a._v(\"方法会自动将负数转为0。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"'JavaScript'.substring(-3) // \\\"JavaScript\\\"\\n'JavaScript'.substring(4, -3) // \\\"Java\\\"\\n\")])])]),t(\"p\",[a._v(\"上面代码中，第二个例子的参数\"),t(\"code\",[a._v(\"-3\")]),a._v(\"会自动变成\"),t(\"code\",[a._v(\"0\")]),a._v(\"，等同于\"),t(\"code\",[a._v(\"'JavaScript'.substring(4, 0)\")]),a._v(\"。由于第二个参数小于第一个参数，会自动互换位置，所以返回\"),t(\"code\",[a._v(\"Java\")]),a._v(\"。\")]),a._v(\" \"),t(\"p\",[a._v(\"由于这些规则违反直觉，因此不建议使用\"),t(\"code\",[a._v(\"substring\")]),a._v(\"方法，应该优先使用\"),t(\"code\",[a._v(\"slice\")]),a._v(\"。\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"substr\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#substr\"}},[a._v(\"#\")]),a._v(\" substr()\")]),a._v(\" \"),t(\"p\",[t(\"code\",[a._v(\"substr\")]),a._v(\"方法用于从原字符串取出子字符串并返回，不改变原字符串，跟\"),t(\"code\",[a._v(\"slice\")]),a._v(\"和\"),t(\"code\",[a._v(\"substring\")]),a._v(\"方法的作用相同。\")]),a._v(\" \"),t(\"p\",[t(\"code\",[a._v(\"substr\")]),a._v(\"方法的第一个参数是子字符串的开始位置（从0开始计算），第二个参数是子字符串的长度。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"'JavaScript'.substr(4, 6) // \\\"Script\\\"\\n\")])])]),t(\"p\",[a._v(\"如果省略第二个参数，则表示子字符串一直到原字符串的结束。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"'JavaScript'.substr(4) // \\\"Script\\\"\\n\")])])]),t(\"p\",[a._v(\"如果第一个参数是负数，表示倒数计算的字符位置。如果第二个参数是负数，将被自动转为0，因此会返回空字符串。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"'JavaScript'.substr(-6) // \\\"Script\\\"\\n'JavaScript'.substr(4, -1) // \\\"\\\"\\n\")])])]),t(\"p\",[a._v(\"上面代码中，第二个例子的参数\"),t(\"code\",[a._v(\"-1\")]),a._v(\"自动转为\"),t(\"code\",[a._v(\"0\")]),a._v(\"，表示子字符串长度为\"),t(\"code\",[a._v(\"0\")]),a._v(\"，所以返回空字符串。\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"indexof-lastindexof\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#indexof-lastindexof\"}},[a._v(\"#\")]),a._v(\" indexOf()，lastIndexOf()\")]),a._v(\" \"),t(\"p\",[t(\"code\",[a._v(\"indexOf\")]),a._v(\"方法用于确定一个字符串在另一个字符串中第一次出现的位置，返回结果是匹配开始的位置。如果返回\"),t(\"code\",[a._v(\"-1\")]),a._v(\"，就表示不匹配。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"'hello world'.indexOf('o') // 4\\n'JavaScript'.indexOf('script') // -1\\n\")])])]),t(\"p\",[t(\"code\",[a._v(\"indexOf\")]),a._v(\"方法还可以接受第二个参数，表示从该位置开始向后匹配。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"'hello world'.indexOf('o', 6) // 7\\n\")])])]),t(\"p\",[t(\"code\",[a._v(\"lastIndexOf\")]),a._v(\"方法的用法跟\"),t(\"code\",[a._v(\"indexOf\")]),a._v(\"方法一致，主要的区别是\"),t(\"code\",[a._v(\"lastIndexOf\")]),a._v(\"从尾部开始匹配，\"),t(\"code\",[a._v(\"indexOf\")]),a._v(\"则是从头部开始匹配。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"'hello world'.lastIndexOf('o') // 7\\n\")])])]),t(\"p\",[a._v(\"另外，\"),t(\"code\",[a._v(\"lastIndexOf\")]),a._v(\"的第二个参数表示从该位置起向前匹配。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"'hello world'.lastIndexOf('o', 6) // 4\\n\")])])]),t(\"h3\",{attrs:{id:\"trim\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#trim\"}},[a._v(\"#\")]),a._v(\" trim()\")]),a._v(\" \"),t(\"p\",[t(\"code\",[a._v(\"trim\")]),a._v(\"方法用于去除字符串两端的空格，返回一个新字符串，不改变原字符串。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"'  hello world  '.trim()\\n// \\\"hello world\\\"\\n\")])])]),t(\"p\",[a._v(\"该方法去除的不仅是空格，还包括制表符（\"),t(\"code\",[a._v(\"\\\\t\")]),a._v(\"、\"),t(\"code\",[a._v(\"\\\\v\")]),a._v(\"）、换行符（\"),t(\"code\",[a._v(\"\\\\n\")]),a._v(\"）和回车符（\"),t(\"code\",[a._v(\"\\\\r\")]),a._v(\"）。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"'\\\\r\\\\nabc \\\\t'.trim() // 'abc'\\n\")])])]),t(\"h3\",{attrs:{id:\"tolowercase-touppercase\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tolowercase-touppercase\"}},[a._v(\"#\")]),a._v(\" toLowerCase()，toUpperCase()\")]),a._v(\" \"),t(\"p\",[t(\"code\",[a._v(\"toLowerCase\")]),a._v(\"方法用于将一个字符串全部转为小写，\"),t(\"code\",[a._v(\"toUpperCase\")]),a._v(\"则是全部转为大写。它们都返回一个新字符串，不改变原字符串。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"'Hello World'.toLowerCase()\\n// \\\"hello world\\\"\\n\\n'Hello World'.toUpperCase()\\n// \\\"HELLO WORLD\\\"\\n\")])])]),t(\"h3\",{attrs:{id:\"match\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#match\"}},[a._v(\"#\")]),a._v(\" match()\")]),a._v(\" \"),t(\"p\",[t(\"code\",[a._v(\"match\")]),a._v(\"方法用于确定原字符串是否匹配某个子字符串，返回一个数组，成员为匹配的第一个字符串。如果没有找到匹配，则返回\"),t(\"code\",[a._v(\"null\")]),a._v(\"。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"'cat, bat, sat, fat'.match('at') // [\\\"at\\\"]\\n'cat, bat, sat, fat'.match('xt') // null\\n\")])])]),t(\"p\",[a._v(\"返回的数组还有\"),t(\"code\",[a._v(\"index\")]),a._v(\"属性和\"),t(\"code\",[a._v(\"input\")]),a._v(\"属性，分别表示匹配字符串开始的位置和原始字符串。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"var matches = 'cat, bat, sat, fat'.match('at');\\nmatches.index // 1\\nmatches.input // \\\"cat, bat, sat, fat\\\"\\n\")])])]),t(\"p\",[t(\"code\",[a._v(\"match\")]),a._v(\"方法还可以使用正则表达式作为参数，详见《正则表达式》一章。\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"search-replace\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#search-replace\"}},[a._v(\"#\")]),a._v(\" search()，replace()\")]),a._v(\" \"),t(\"p\",[t(\"code\",[a._v(\"search\")]),a._v(\"方法的用法基本等同于\"),t(\"code\",[a._v(\"match\")]),a._v(\"，但是返回值为匹配的第一个位置。如果没有找到匹配，则返回\"),t(\"code\",[a._v(\"-1\")]),a._v(\"。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"'cat, bat, sat, fat'.search('at') // 1\\n\")])])]),t(\"p\",[t(\"code\",[a._v(\"search\")]),a._v(\"方法还可以使用正则表达式作为参数，详见《正则表达式》一节。\")]),a._v(\" \"),t(\"p\",[t(\"code\",[a._v(\"replace\")]),a._v(\"方法用于替换匹配的子字符串，一般情况下只替换第一个匹配（除非使用带有\"),t(\"code\",[a._v(\"g\")]),a._v(\"修饰符的正则表达式）。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"'aaa'.replace('a', 'b') // \\\"baa\\\"\\n\")])])]),t(\"p\",[t(\"code\",[a._v(\"replace\")]),a._v(\"方法还可以使用正则表达式作为参数，详见《正则表达式》一节。\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"split\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#split\"}},[a._v(\"#\")]),a._v(\" split()\")]),a._v(\" \"),t(\"p\",[t(\"code\",[a._v(\"split\")]),a._v(\"方法按照给定规则分割字符串，返回一个由分割出来的子字符串组成的数组。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v('\\'a|b|c\\'.split(\\'|\\') // [\"a\", \"b\", \"c\"]\\n')])])]),t(\"p\",[a._v(\"如果分割规则为空字符串，则返回数组的成员是原字符串的每一个字符。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v('\\'a|b|c\\'.split(\\'\\') // [\"a\", \"|\", \"b\", \"|\", \"c\"]\\n')])])]),t(\"p\",[a._v(\"如果省略参数，则返回数组的唯一成员就是原字符串。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"'a|b|c'.split() // [\\\"a|b|c\\\"]\\n\")])])]),t(\"p\",[a._v(\"如果满足分割规则的两个部分紧邻着（即两个分割符中间没有其他字符），则返回数组之中会有一个空字符串。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"'a||c'.split('|') // ['a', '', 'c']\\n\")])])]),t(\"p\",[a._v(\"如果满足分割规则的部分处于字符串的开头或结尾（即它的前面或后面没有其他字符），则返回数组的第一个或最后一个成员是一个空字符串。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v('\\'|b|c\\'.split(\\'|\\') // [\"\", \"b\", \"c\"]\\n\\'a|b|\\'.split(\\'|\\') // [\"a\", \"b\", \"\"]\\n')])])]),t(\"p\",[t(\"code\",[a._v(\"split\")]),a._v(\"方法还可以接受第二个参数，限定返回数组的最大成员数。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"'a|b|c'.split('|', 0) // []\\n'a|b|c'.split('|', 1) // [\\\"a\\\"]\\n'a|b|c'.split('|', 2) // [\\\"a\\\", \\\"b\\\"]\\n'a|b|c'.split('|', 3) // [\\\"a\\\", \\\"b\\\", \\\"c\\\"]\\n'a|b|c'.split('|', 4) // [\\\"a\\\", \\\"b\\\", \\\"c\\\"]\\n\")])])]),t(\"p\",[a._v(\"上面代码中，\"),t(\"code\",[a._v(\"split\")]),a._v(\"方法的第二个参数，决定了返回数组的成员数。\")]),a._v(\" \"),t(\"p\",[t(\"code\",[a._v(\"split\")]),a._v(\"方法还可以使用正则表达式作为参数，详见《正则表达式》一节。\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"localecompare\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#localecompare\"}},[a._v(\"#\")]),a._v(\" localeCompare()\")]),a._v(\" \"),t(\"p\",[t(\"code\",[a._v(\"localeCompare\")]),a._v(\"方法用于比较两个字符串。它返回一个整数，如果小于0，表示第一个字符串小于第二个字符串；如果等于0，表示两者相等；如果大于0，表示第一个字符串大于第二个字符串。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"'apple'.localeCompare('banana') // -1\\n'apple'.localeCompare('apple') // 0\\n\")])])]),t(\"p\",[a._v(\"该方法的最大特点，就是会考虑自然语言的顺序。举例来说，正常情况下，大写的英文字母小于小写字母。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"'B' > 'a' // false\\n\")])])]),t(\"p\",[a._v(\"上面代码中，字母\"),t(\"code\",[a._v(\"B\")]),a._v(\"小于字母\"),t(\"code\",[a._v(\"a\")]),a._v(\"。因为 JavaScript 采用的是 Unicode 码点比较，\"),t(\"code\",[a._v(\"B\")]),a._v(\"的码点是66，而\"),t(\"code\",[a._v(\"a\")]),a._v(\"的码点是97。\")]),a._v(\" \"),t(\"p\",[a._v(\"但是，\"),t(\"code\",[a._v(\"localeCompare\")]),a._v(\"方法会考虑自然语言的排序情况，将\"),t(\"code\",[a._v(\"B\")]),a._v(\"排在\"),t(\"code\",[a._v(\"a\")]),a._v(\"的前面。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"'B'.localeCompare('a') // 1\\n\")])])]),t(\"p\",[a._v(\"上面代码中，\"),t(\"code\",[a._v(\"localeCompare\")]),a._v(\"方法返回整数1，表示\"),t(\"code\",[a._v(\"B\")]),a._v(\"较大。\")]),a._v(\" \"),t(\"p\",[t(\"code\",[a._v(\"localeCompare\")]),a._v(\"还可以有第二个参数，指定所使用的语言（默认是英语），然后根据该语言的规则进行比较。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"'ä'.localeCompare('z', 'de') // -1\\n'ä'.localeCompare('z', 'sv') // 1\\n\")])])]),t(\"p\",[a._v(\"上面代码中，\"),t(\"code\",[a._v(\"de\")]),a._v(\"表示德语，\"),t(\"code\",[a._v(\"sv\")]),a._v(\"表示瑞典语。德语中，\"),t(\"code\",[a._v(\"ä\")]),a._v(\"小于\"),t(\"code\",[a._v(\"z\")]),a._v(\"，所以返回\"),t(\"code\",[a._v(\"-1\")]),a._v(\"；瑞典语中，\"),t(\"code\",[a._v(\"ä\")]),a._v(\"大于\"),t(\"code\",[a._v(\"z\")]),a._v(\"，所以返回\"),t(\"code\",[a._v(\"1\")]),a._v(\"。\")])])}),[],!1,null,null,null);e.default=v.exports}}]);","extractedComments":[]}