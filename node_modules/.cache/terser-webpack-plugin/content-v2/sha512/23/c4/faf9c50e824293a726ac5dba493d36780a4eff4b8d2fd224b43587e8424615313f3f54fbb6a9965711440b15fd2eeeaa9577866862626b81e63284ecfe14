{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{462:function(t,a,n){\"use strict\";n.r(a);var s=n(62),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[n(\"p\",[t._v(\"动态规划（英语：Dynamic programming，简称 DP）是一种在数学、管理科学、计算机科学、经济学和生物信息学中使用的，通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。\")]),t._v(\" \"),n(\"p\",[t._v(\"动态规划不是某一种具体的算法，而是一种算法思想：若要解一个给定问题，我们需要解其不同部分（即子问题），再根据子问题的解以得出原问题的解。\")]),t._v(\" \"),n(\"h4\",{attrs:{id:\"最优子结构\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#最优子结构\"}},[t._v(\"#\")]),t._v(\" 最优子结构\")]),t._v(\" \"),n(\"p\",[t._v(\"最优子结构规定的是子问题与原问题的关系，当我们在求一个问题最优解的时候，如果可以把这个问题分解成多个子问题，然后递归地找到每个子问题的最优解，最后通过一定的数学方法对各个子问题的最优解进行组合得出最终的结果。总结来说就是一个问题的最优解是由它的各个子问题的最优解决定的。\")]),t._v(\" \"),n(\"h4\",{attrs:{id:\"重复子问题\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#重复子问题\"}},[t._v(\"#\")]),t._v(\" 重复子问题\")]),t._v(\" \"),n(\"p\",[t._v(\"重复子问题规定的是子问题与子问题的关系。当我们在递归地寻找每个子问题的最优解的时候，有可能会重复地遇到一些更小的子问题，而且这些子问题会重叠地出现在子问题里，出现这样的情况，会有很多重复的计算，动态规划可以保证每个重叠的子问题只会被求解一次。\")]),t._v(\" \"),n(\"p\",[t._v(\"重复子问题不是保证解的正确性必须的，但是如果递归求解子问题时，没有出现重复子问题，则没有必要用动态规划，直接普通的递归就可以了。\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v('A * \"1+1+1+1+1+1+1+1 =？\" *\\n\\nA : \"上面等式的值是多少\"\\nB : *计算* \"8!\"\\n\\nA *在上面等式的左边写上 \"1+\" *\\nA : \"此时等式的值为多少\"\\nB : *quickly* \"9!\"\\nA : \"你怎么这么快就知道答案了\"\\nA : \"只要在8的基础上加1就行了\"\\nA : \"所以你不用重新计算因为你记住了第一个等式的值为8!动态规划算法也可以说是 \\'记住求过的解来节省时间\\'\"\\n')])])]),n(\"p\",[t._v(\"上面已经知道动态规划算法的核心是记住已经求过的解，记住求解的方式有两种：①\"),n(\"strong\",[t._v(\"自顶向下的备忘录法\")]),t._v(\" ②\"),n(\"strong\",[t._v(\"自底向上。\")])]),t._v(\" \"),n(\"p\",[t._v(\"https://blog.csdn.net/u013309870/article/details/75193592\")])])}),[],!1,null,null,null);a.default=e.exports}}]);","extractedComments":[]}