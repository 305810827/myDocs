{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{445:function(e,t,v){\"use strict\";v.r(t);var o=v(62),c=Object(o.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[v(\"h1\",{attrs:{id:\"object-对象\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#object-对象\"}},[e._v(\"#\")]),e._v(\" Object 对象\")]),e._v(\" \"),v(\"p\",[e._v(\"JavaScript 原生提供\"),v(\"code\",[e._v(\"Object\")]),e._v(\"对象（注意起首的\"),v(\"code\",[e._v(\"O\")]),e._v(\"是大写），本章介绍该对象原生的各种方法。\")]),e._v(\" \"),v(\"p\",[e._v(\"JavaScript 的所有其他对象都继承自\"),v(\"code\",[e._v(\"Object\")]),e._v(\"对象，即那些对象都是\"),v(\"code\",[e._v(\"Object\")]),e._v(\"的实例。\")]),e._v(\" \"),v(\"p\",[v(\"code\",[e._v(\"Object\")]),e._v(\"对象的原生方法分成两类：\"),v(\"code\",[e._v(\"Object\")]),e._v(\"本身的方法与\"),v(\"code\",[e._v(\"Object\")]),e._v(\"的实例方法。\")]),e._v(\" \"),v(\"p\",[v(\"strong\",[e._v(\"（1）\"),v(\"code\",[e._v(\"Object\")]),e._v(\"对象本身的方法\")])]),e._v(\" \"),v(\"p\",[e._v(\"所谓“本身的方法”就是直接定义在\"),v(\"code\",[e._v(\"Object\")]),e._v(\"对象的方法。\")]),e._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[e._v(\"Object.print = function (o) { console.log(o) };\\n\")])])]),v(\"p\",[e._v(\"上面代码中，\"),v(\"code\",[e._v(\"print\")]),e._v(\"方法就是直接定义在\"),v(\"code\",[e._v(\"Object\")]),e._v(\"对象上。\")]),e._v(\" \"),v(\"p\",[v(\"strong\",[e._v(\"（2）\"),v(\"code\",[e._v(\"Object\")]),e._v(\"的实例方法\")])]),e._v(\" \"),v(\"p\",[e._v(\"所谓实例方法就是定义在\"),v(\"code\",[e._v(\"Object\")]),e._v(\"原型对象\"),v(\"code\",[e._v(\"Object.prototype\")]),e._v(\"上的方法。它可以被\"),v(\"code\",[e._v(\"Object\")]),e._v(\"实例直接使用。\")]),e._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[e._v(\"Object.prototype.print = function () {\\n  console.log(this);\\n};\\n\\nvar obj = new Object();\\nobj.print() // Object\\n\")])])]),v(\"p\",[e._v(\"上面代码中，\"),v(\"code\",[e._v(\"Object.prototype\")]),e._v(\"定义了一个\"),v(\"code\",[e._v(\"print\")]),e._v(\"方法，然后生成一个\"),v(\"code\",[e._v(\"Object\")]),e._v(\"的实例\"),v(\"code\",[e._v(\"obj\")]),e._v(\"。\"),v(\"code\",[e._v(\"obj\")]),e._v(\"直接继承了\"),v(\"code\",[e._v(\"Object.prototype\")]),e._v(\"的属性和方法，可以直接使用\"),v(\"code\",[e._v(\"obj.print\")]),e._v(\"调用\"),v(\"code\",[e._v(\"print\")]),e._v(\"方法。也就是说，\"),v(\"code\",[e._v(\"obj\")]),e._v(\"对象的\"),v(\"code\",[e._v(\"print\")]),e._v(\"方法实质上就是调用\"),v(\"code\",[e._v(\"Object.prototype.print\")]),e._v(\"方法。\")]),e._v(\" \"),v(\"p\",[e._v(\"关于原型对象\"),v(\"code\",[e._v(\"object.prototype\")]),e._v(\"的详细解释，参见《面向对象编程》章节。这里只要知道，凡是定义在\"),v(\"code\",[e._v(\"Object.prototype\")]),e._v(\"对象上面的属性和方法，将被所有实例对象共享就可以了。\")]),e._v(\" \"),v(\"p\",[e._v(\"以下先介绍\"),v(\"code\",[e._v(\"Object\")]),e._v(\"作为函数的用法，然后再介绍\"),v(\"code\",[e._v(\"Object\")]),e._v(\"对象的原生方法，分成对象自身的方法（又称为“静态方法”）和实例方法两部分。\")]),e._v(\" \"),v(\"h2\",{attrs:{id:\"object\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#object\"}},[e._v(\"#\")]),e._v(\" Object()\")]),e._v(\" \"),v(\"p\",[v(\"code\",[e._v(\"Object\")]),e._v(\"本身是一个函数，可以当作工具方法使用，将任意值转为对象。这个方法常用于保证某个值一定是对象。\")]),e._v(\" \"),v(\"p\",[e._v(\"如果参数为空（或者为\"),v(\"code\",[e._v(\"undefined\")]),e._v(\"和\"),v(\"code\",[e._v(\"null\")]),e._v(\"），\"),v(\"code\",[e._v(\"Object()\")]),e._v(\"返回一个空对象。\")]),e._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[e._v(\"var obj = Object();\\n// 等同于\\nvar obj = Object(undefined);\\nvar obj = Object(null);\\n\\nobj instanceof Object // true\\n\")])])]),v(\"p\",[e._v(\"上面代码的含义，是将\"),v(\"code\",[e._v(\"undefined\")]),e._v(\"和\"),v(\"code\",[e._v(\"null\")]),e._v(\"转为对象，结果得到了一个空对象\"),v(\"code\",[e._v(\"obj\")]),e._v(\"。\")]),e._v(\" \"),v(\"p\",[v(\"code\",[e._v(\"instanceof\")]),e._v(\"运算符用来验证，一个对象是否为指定的构造函数的实例。\"),v(\"code\",[e._v(\"obj instanceof Object\")]),e._v(\"返回\"),v(\"code\",[e._v(\"true\")]),e._v(\"，就表示\"),v(\"code\",[e._v(\"obj\")]),e._v(\"对象是\"),v(\"code\",[e._v(\"Object\")]),e._v(\"的实例。\")]),e._v(\" \"),v(\"p\",[e._v(\"如果参数是原始类型的值，\"),v(\"code\",[e._v(\"Object\")]),e._v(\"方法将其转为对应的包装对象的实例（参见《原始类型的包装对象》一章）。\")]),e._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[e._v(\"var obj = Object(1);\\nobj instanceof Object // true\\nobj instanceof Number // true\\n\\nvar obj = Object('foo');\\nobj instanceof Object // true\\nobj instanceof String // true\\n\\nvar obj = Object(true);\\nobj instanceof Object // true\\nobj instanceof Boolean // true\\n\")])])]),v(\"p\",[e._v(\"上面代码中，\"),v(\"code\",[e._v(\"Object\")]),e._v(\"函数的参数是各种原始类型的值，转换成对象就是原始类型值对应的包装对象。\")]),e._v(\" \"),v(\"p\",[e._v(\"如果\"),v(\"code\",[e._v(\"Object\")]),e._v(\"方法的参数是一个对象，它总是返回该对象，即不用转换。\")]),e._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[e._v(\"var arr = [];\\nvar obj = Object(arr); // 返回原数组\\nobj === arr // true\\n\\nvar value = {};\\nvar obj = Object(value) // 返回原对象\\nobj === value // true\\n\\nvar fn = function () {};\\nvar obj = Object(fn); // 返回原函数\\nobj === fn // true\\n\")])])]),v(\"p\",[e._v(\"利用这一点，可以写一个判断变量是否为对象的函数。\")]),e._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[e._v(\"function isObject(value) {\\n  return value === Object(value);\\n}\\n\\nisObject([]) // true\\nisObject(true) // false\\n\")])])]),v(\"h2\",{attrs:{id:\"object-构造函数\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#object-构造函数\"}},[e._v(\"#\")]),e._v(\" Object 构造函数\")]),e._v(\" \"),v(\"p\",[v(\"code\",[e._v(\"Object\")]),e._v(\"不仅可以当作工具函数使用，还可以当作构造函数使用，即前面可以使用\"),v(\"code\",[e._v(\"new\")]),e._v(\"命令。\")]),e._v(\" \"),v(\"p\",[v(\"code\",[e._v(\"Object\")]),e._v(\"构造函数的首要用途，是直接通过它来生成新对象。\")]),e._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[e._v(\"var obj = new Object();\\n\")])])]),v(\"blockquote\",[v(\"p\",[e._v(\"注意，通过\"),v(\"code\",[e._v(\"var obj = new Object()\")]),e._v(\"的写法生成新对象，与字面量的写法\"),v(\"code\",[e._v(\"var obj = {}\")]),e._v(\"是等价的。或者说，后者只是前者的一种简便写法。\")])]),e._v(\" \"),v(\"p\",[v(\"code\",[e._v(\"Object\")]),e._v(\"构造函数的用法与工具方法很相似，几乎一模一样。使用时，可以接受一个参数，如果该参数是一个对象，则直接返回这个对象；如果是一个原始类型的值，则返回该值对应的包装对象（详见《包装对象》一章）。\")]),e._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[e._v(\"var o1 = {a: 1};\\nvar o2 = new Object(o1);\\no1 === o2 // true\\n\\nvar obj = new Object(123);\\nobj instanceof Number // true\\n\")])])]),v(\"p\",[e._v(\"虽然用法相似，但是\"),v(\"code\",[e._v(\"Object(value)\")]),e._v(\"与\"),v(\"code\",[e._v(\"new Object(value)\")]),e._v(\"两者的语义是不同的，\"),v(\"code\",[e._v(\"Object(value)\")]),e._v(\"表示将\"),v(\"code\",[e._v(\"value\")]),e._v(\"转成一个对象，\"),v(\"code\",[e._v(\"new Object(value)\")]),e._v(\"则表示新生成一个对象，它的值是\"),v(\"code\",[e._v(\"value\")]),e._v(\"。\")]),e._v(\" \"),v(\"h2\",{attrs:{id:\"object-的静态方法\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#object-的静态方法\"}},[e._v(\"#\")]),e._v(\" Object 的静态方法\")]),e._v(\" \"),v(\"p\",[e._v(\"所谓“静态方法”，是指部署在\"),v(\"code\",[e._v(\"Object\")]),e._v(\"对象自身的方法。\")]),e._v(\" \"),v(\"h3\",{attrs:{id:\"keys\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#keys\"}},[e._v(\"#\")]),e._v(\" keys()\")]),e._v(\" \"),v(\"p\",[v(\"code\",[e._v(\"Object.keys\")]),e._v(\"方法和\"),v(\"code\",[e._v(\"Object.getOwnPropertyNames\")]),e._v(\"方法都用来遍历对象的属性。\")]),e._v(\" \"),v(\"p\",[v(\"code\",[e._v(\"Object.keys\")]),e._v(\"方法的参数是一个对象，返回一个数组。该数组的成员都是该对象自身的（而不是继承的）所有属性名。\")]),e._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[e._v('var obj = {\\n  p1: 123,\\n  p2: 456\\n};\\n\\nObject.keys(obj) // [\"p1\", \"p2\"]\\n')])])]),v(\"h3\",{attrs:{id:\"getownpropertynames\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#getownpropertynames\"}},[e._v(\"#\")]),e._v(\" getOwnPropertyNames()\")]),e._v(\" \"),v(\"p\",[v(\"code\",[e._v(\"Object.getOwnPropertyNames\")]),e._v(\"方法与\"),v(\"code\",[e._v(\"Object.keys\")]),e._v(\"类似，也是接受一个对象作为参数，返回一个数组，包含了该对象自身的所有属性名。\")]),e._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[e._v('var obj = {\\n  p1: 123,\\n  p2: 456\\n};\\n\\nObject.getOwnPropertyNames(obj) // [\"p1\", \"p2\"]\\n')])])]),v(\"p\",[e._v(\"对于一般的对象来说，\"),v(\"code\",[e._v(\"Object.keys()\")]),e._v(\"和\"),v(\"code\",[e._v(\"Object.getOwnPropertyNames()\")]),e._v(\"返回的结果是一样的。只有涉及不可枚举属性时，才会有不一样的结果。\"),v(\"code\",[e._v(\"Object.keys\")]),e._v(\"方法只返回可枚举的属性（详见《对象属性的描述对象》一章），\"),v(\"code\",[e._v(\"Object.getOwnPropertyNames\")]),e._v(\"方法还返回不可枚举的属性名。\")]),e._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[e._v('var a = [\\'Hello\\', \\'World\\'];\\n\\nObject.keys(a) // [\"0\", \"1\"]\\nObject.getOwnPropertyNames(a) // [\"0\", \"1\", \"length\"]\\n')])])]),v(\"p\",[e._v(\"上面代码中，数组的\"),v(\"code\",[e._v(\"length\")]),e._v(\"属性是不可枚举的属性，所以只出现在\"),v(\"code\",[e._v(\"Object.getOwnPropertyNames\")]),e._v(\"方法的返回结果中。\")]),e._v(\" \"),v(\"p\",[e._v(\"由于 JavaScript 没有提供计算对象属性个数的方法，所以可以用这两个方法代替。\")]),e._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[e._v(\"var obj = {\\n  p1: 123,\\n  p2: 456\\n};\\n\\nObject.keys(obj).length // 2\\nObject.getOwnPropertyNames(obj).length // 2\\n\")])])]),v(\"p\",[e._v(\"一般情况下，几乎总是使用\"),v(\"code\",[e._v(\"Object.keys\")]),e._v(\"方法，遍历对象的属性。\")]),e._v(\" \"),v(\"h3\",{attrs:{id:\"其他方法\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#其他方法\"}},[e._v(\"#\")]),e._v(\" 其他方法\")]),e._v(\" \"),v(\"p\",[e._v(\"除了上面提到的两个方法，\"),v(\"code\",[e._v(\"Object\")]),e._v(\"还有不少其他静态方法，将在后文逐一详细介绍。\")]),e._v(\" \"),v(\"p\",[v(\"strong\",[e._v(\"（1）对象属性模型的相关方法\")])]),e._v(\" \"),v(\"ul\",[v(\"li\",[v(\"code\",[e._v(\"Object.getOwnPropertyDescriptor()\")]),e._v(\"：获取某个属性的描述对象。\")]),e._v(\" \"),v(\"li\",[v(\"code\",[e._v(\"Object.defineProperty()\")]),e._v(\"：通过描述对象，定义某个属性。\")]),e._v(\" \"),v(\"li\",[v(\"code\",[e._v(\"Object.defineProperties()\")]),e._v(\"：通过描述对象，定义多个属性。\")])]),e._v(\" \"),v(\"p\",[v(\"strong\",[e._v(\"（2）控制对象状态的方法\")])]),e._v(\" \"),v(\"ul\",[v(\"li\",[v(\"code\",[e._v(\"Object.preventExtensions()\")]),e._v(\"：防止对象扩展。\")]),e._v(\" \"),v(\"li\",[v(\"code\",[e._v(\"Object.isExtensible()\")]),e._v(\"：判断对象是否可扩展。\")]),e._v(\" \"),v(\"li\",[v(\"code\",[e._v(\"Object.seal()\")]),e._v(\"：禁止对象配置。\")]),e._v(\" \"),v(\"li\",[v(\"code\",[e._v(\"Object.isSealed()\")]),e._v(\"：判断一个对象是否可配置。\")]),e._v(\" \"),v(\"li\",[v(\"code\",[e._v(\"Object.freeze()\")]),e._v(\"：冻结一个对象。\")]),e._v(\" \"),v(\"li\",[v(\"code\",[e._v(\"Object.isFrozen()\")]),e._v(\"：判断一个对象是否被冻结。\")])]),e._v(\" \"),v(\"p\",[v(\"strong\",[e._v(\"（3）原型链相关方法\")])]),e._v(\" \"),v(\"ul\",[v(\"li\",[v(\"code\",[e._v(\"Object.create()\")]),e._v(\"：该方法可以指定原型对象和属性，返回一个新的对象。\")]),e._v(\" \"),v(\"li\",[v(\"code\",[e._v(\"Object.getPrototypeOf()\")]),e._v(\"：获取对象的\"),v(\"code\",[e._v(\"Prototype\")]),e._v(\"对象。\")])]),e._v(\" \"),v(\"h2\",{attrs:{id:\"object-的实例方法\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#object-的实例方法\"}},[e._v(\"#\")]),e._v(\" Object 的实例方法\")]),e._v(\" \"),v(\"p\",[e._v(\"除了静态方法，还有不少方法定义在\"),v(\"code\",[e._v(\"Object.prototype\")]),e._v(\"对象。它们称为实例方法，所有\"),v(\"code\",[e._v(\"Object\")]),e._v(\"的实例对象都继承了这些方法。\")]),e._v(\" \"),v(\"p\",[v(\"code\",[e._v(\"Object\")]),e._v(\"实例对象的方法，主要有以下六个。\")]),e._v(\" \"),v(\"ul\",[v(\"li\",[v(\"code\",[e._v(\"Object.prototype.valueOf()\")]),e._v(\"：返回当前对象对应的值。\")]),e._v(\" \"),v(\"li\",[v(\"code\",[e._v(\"Object.prototype.toString()\")]),e._v(\"：返回当前对象对应的字符串形式。\")]),e._v(\" \"),v(\"li\",[v(\"code\",[e._v(\"Object.prototype.toLocaleString()\")]),e._v(\"：返回当前对象对应的本地字符串形式。\")]),e._v(\" \"),v(\"li\",[v(\"code\",[e._v(\"Object.prototype.hasOwnProperty()\")]),e._v(\"：判断某个属性是否为当前对象自身的属性，还是继承自原型对象的属性。\")]),e._v(\" \"),v(\"li\",[v(\"code\",[e._v(\"Object.prototype.isPrototypeOf()\")]),e._v(\"：判断当前对象是否为另一个对象的原型。\")]),e._v(\" \"),v(\"li\",[v(\"code\",[e._v(\"Object.prototype.propertyIsEnumerable()\")]),e._v(\"：判断某个属性是否可枚举。\")])]),e._v(\" \"),v(\"p\",[e._v(\"本节介绍前四个方法，另外两个方法将在后文相关章节介绍。\")]),e._v(\" \"),v(\"h3\",{attrs:{id:\"valueof\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#valueof\"}},[e._v(\"#\")]),e._v(\" valueOf()\")]),e._v(\" \"),v(\"p\",[v(\"code\",[e._v(\"valueOf\")]),e._v(\"方法的作用是返回一个对象的“值”，默认情况下返回对象本身。\")]),e._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[e._v(\"var obj = new Object();\\nobj.valueOf() === obj // true\\n\")])])]),v(\"p\",[e._v(\"上面代码比较\"),v(\"code\",[e._v(\"obj.valueOf()\")]),e._v(\"与\"),v(\"code\",[e._v(\"obj\")]),e._v(\"本身，两者是一样的。\")]),e._v(\" \"),v(\"p\",[v(\"code\",[e._v(\"valueOf\")]),e._v(\"方法的主要用途是，JavaScript 自动类型转换时会默认调用这个方法（详见《数据类型转换》一章）。\")]),e._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[e._v('var obj = new Object();\\n1 + obj // \"1[object Object]\"\\n')])])]),v(\"p\",[e._v(\"上面代码将对象\"),v(\"code\",[e._v(\"obj\")]),e._v(\"与数字\"),v(\"code\",[e._v(\"1\")]),e._v(\"相加，这时 JavaScript 就会默认调用\"),v(\"code\",[e._v(\"valueOf()\")]),e._v(\"方法，求出\"),v(\"code\",[e._v(\"obj\")]),e._v(\"的值再与\"),v(\"code\",[e._v(\"1\")]),e._v(\"相加。所以，如果自定义\"),v(\"code\",[e._v(\"valueOf\")]),e._v(\"方法，就可以得到想要的结果。\")]),e._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[e._v(\"var obj = new Object();\\nobj.valueOf = function () {\\n  return 2;\\n};\\n\\n1 + obj // 3\\n\")])])]),v(\"p\",[e._v(\"上面代码自定义了\"),v(\"code\",[e._v(\"obj\")]),e._v(\"对象的\"),v(\"code\",[e._v(\"valueOf\")]),e._v(\"方法，于是\"),v(\"code\",[e._v(\"1 + obj\")]),e._v(\"就得到了\"),v(\"code\",[e._v(\"3\")]),e._v(\"。这种方法就相当于用自定义的\"),v(\"code\",[e._v(\"obj.valueOf\")]),e._v(\"，覆盖\"),v(\"code\",[e._v(\"Object.prototype.valueOf\")]),e._v(\"。\")]),e._v(\" \"),v(\"h3\",{attrs:{id:\"tostring\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tostring\"}},[e._v(\"#\")]),e._v(\" toString()\")]),e._v(\" \"),v(\"p\",[v(\"code\",[e._v(\"toString\")]),e._v(\"方法的作用是返回一个对象的字符串形式，默认情况下返回类型字符串。\")]),e._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[e._v('var o1 = new Object();\\no1.toString() // \"[object Object]\"\\n\\nvar o2 = {a:1};\\no2.toString() // \"[object Object]\"\\n')])])]),v(\"p\",[e._v(\"上面代码表示，对于一个对象调用\"),v(\"code\",[e._v(\"toString\")]),e._v(\"方法，会返回字符串\"),v(\"code\",[e._v(\"[object Object]\")]),e._v(\"，该字符串说明对象的类型。\")]),e._v(\" \"),v(\"p\",[e._v(\"字符串\"),v(\"code\",[e._v(\"[object Object]\")]),e._v(\"本身没有太大的用处，但是通过自定义\"),v(\"code\",[e._v(\"toString\")]),e._v(\"方法，可以让对象在自动类型转换时，得到想要的字符串形式。\")]),e._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[e._v(\"var obj = new Object();\\n\\nobj.toString = function () {\\n  return 'hello';\\n};\\n\\nobj + ' ' + 'world' // \\\"hello world\\\"\\n\")])])]),v(\"p\",[e._v(\"上面代码表示，当对象用于字符串加法时，会自动调用\"),v(\"code\",[e._v(\"toString\")]),e._v(\"方法。由于自定义了\"),v(\"code\",[e._v(\"toString\")]),e._v(\"方法，所以返回字符串\"),v(\"code\",[e._v(\"hello world\")]),e._v(\"。\")]),e._v(\" \"),v(\"p\",[e._v(\"数组、字符串、函数、Date 对象都分别部署了自定义的\"),v(\"code\",[e._v(\"toString\")]),e._v(\"方法，覆盖了\"),v(\"code\",[e._v(\"Object.prototype.toString\")]),e._v(\"方法。\")]),e._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[e._v('[1, 2, 3].toString() // \"1,2,3\"\\n\\n\\'123\\'.toString() // \"123\"\\n\\n(function () {\\n  return 123;\\n}).toString()\\n// \"function () {\\n//   return 123;\\n// }\"\\n\\n(new Date()).toString()\\n// \"Tue May 10 2016 09:11:31 GMT+0800 (CST)\"\\n')])])]),v(\"p\",[e._v(\"上面代码中，数组、字符串、函数、Date 对象调用\"),v(\"code\",[e._v(\"toString\")]),e._v(\"方法，并不会返回\"),v(\"code\",[e._v(\"[object Object]\")]),e._v(\"，因为它们都自定义了\"),v(\"code\",[e._v(\"toString\")]),e._v(\"方法，覆盖原始方法。\")]),e._v(\" \"),v(\"h3\",{attrs:{id:\"tostring-2\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tostring-2\"}},[e._v(\"#\")]),e._v(\" toString()\")]),e._v(\" \"),v(\"p\",[v(\"code\",[e._v(\"Object.prototype.toString\")]),e._v(\"方法返回对象的类型字符串，因此可以用来判断一个值的类型。\")]),e._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[e._v('var obj = {};\\nobj.toString() // \"[object Object]\"\\n')])])]),v(\"p\",[e._v(\"上面代码调用空对象的\"),v(\"code\",[e._v(\"toString\")]),e._v(\"方法，结果返回一个字符串\"),v(\"code\",[e._v(\"object Object\")]),e._v(\"，其中第二个\"),v(\"code\",[e._v(\"Object\")]),e._v(\"表示该值的构造函数。这是一个十分有用的判断数据类型的方法。\")]),e._v(\" \"),v(\"p\",[e._v(\"由于实例对象可能会自定义\"),v(\"code\",[e._v(\"toString\")]),e._v(\"方法，覆盖掉\"),v(\"code\",[e._v(\"Object.prototype.toString\")]),e._v(\"方法，所以为了得到类型字符串，最好直接使用\"),v(\"code\",[e._v(\"Object.prototype.toString\")]),e._v(\"方法。通过函数的\"),v(\"code\",[e._v(\"call\")]),e._v(\"方法，可以在任意值上调用这个方法，帮助我们判断这个值的类型。\")]),e._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[e._v(\"Object.prototype.toString.call(value)\\n\")])])]),v(\"p\",[e._v(\"上面代码表示对\"),v(\"code\",[e._v(\"value\")]),e._v(\"这个值调用\"),v(\"code\",[e._v(\"Object.prototype.toString\")]),e._v(\"方法。\")]),e._v(\" \"),v(\"p\",[e._v(\"不同数据类型的\"),v(\"code\",[e._v(\"Object.prototype.toString\")]),e._v(\"方法返回值如下。\")]),e._v(\" \"),v(\"ul\",[v(\"li\",[e._v(\"数值：返回\"),v(\"code\",[e._v(\"[object Number]\")]),e._v(\"。\")]),e._v(\" \"),v(\"li\",[e._v(\"字符串：返回\"),v(\"code\",[e._v(\"[object String]\")]),e._v(\"。\")]),e._v(\" \"),v(\"li\",[e._v(\"布尔值：返回\"),v(\"code\",[e._v(\"[object Boolean]\")]),e._v(\"。\")]),e._v(\" \"),v(\"li\",[e._v(\"undefined：返回\"),v(\"code\",[e._v(\"[object Undefined]\")]),e._v(\"。\")]),e._v(\" \"),v(\"li\",[e._v(\"null：返回\"),v(\"code\",[e._v(\"[object Null]\")]),e._v(\"。\")]),e._v(\" \"),v(\"li\",[e._v(\"数组：返回\"),v(\"code\",[e._v(\"[object Array]\")]),e._v(\"。\")]),e._v(\" \"),v(\"li\",[e._v(\"arguments 对象：返回\"),v(\"code\",[e._v(\"[object Arguments]\")]),e._v(\"。\")]),e._v(\" \"),v(\"li\",[e._v(\"函数：返回\"),v(\"code\",[e._v(\"[object Function]\")]),e._v(\"。\")]),e._v(\" \"),v(\"li\",[e._v(\"Error 对象：返回\"),v(\"code\",[e._v(\"[object Error]\")]),e._v(\"。\")]),e._v(\" \"),v(\"li\",[e._v(\"Date 对象：返回\"),v(\"code\",[e._v(\"[object Date]\")]),e._v(\"。\")]),e._v(\" \"),v(\"li\",[e._v(\"RegExp 对象：返回\"),v(\"code\",[e._v(\"[object RegExp]\")]),e._v(\"。\")]),e._v(\" \"),v(\"li\",[e._v(\"其他对象：返回\"),v(\"code\",[e._v(\"[object Object]\")]),e._v(\"。\")])]),e._v(\" \"),v(\"p\",[e._v(\"这就是说，\"),v(\"code\",[e._v(\"Object.prototype.toString\")]),e._v(\"可以看出一个值到底是什么类型。\")]),e._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[e._v('Object.prototype.toString.call(2) // \"[object Number]\"\\nObject.prototype.toString.call(\\'\\') // \"[object String]\"\\nObject.prototype.toString.call(true) // \"[object Boolean]\"\\nObject.prototype.toString.call(undefined) // \"[object Undefined]\"\\nObject.prototype.toString.call(null) // \"[object Null]\"\\nObject.prototype.toString.call(Math) // \"[object Math]\"\\nObject.prototype.toString.call({}) // \"[object Object]\"\\nObject.prototype.toString.call([]) // \"[object Array]\"\\n')])])]),v(\"p\",[e._v(\"利用这个特性，可以写出一个比\"),v(\"code\",[e._v(\"typeof\")]),e._v(\"运算符更准确的类型判断函数。\")]),e._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[e._v('var type = function (o){\\n  var s = Object.prototype.toString.call(o);\\n  return s.match(/\\\\[object (.*?)\\\\]/)[1].toLowerCase();\\n};\\n\\ntype({}); // \"object\"\\ntype([]); // \"array\"\\ntype(5); // \"number\"\\ntype(null); // \"null\"\\ntype(); // \"undefined\"\\ntype(/abcd/); // \"regex\"\\ntype(new Date()); // \"date\"\\n')])])]),v(\"p\",[e._v(\"在上面这个\"),v(\"code\",[e._v(\"type\")]),e._v(\"函数的基础上，还可以加上专门判断某种类型数据的方法。\")]),e._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[e._v(\"var type = function (o){\\n  var s = Object.prototype.toString.call(o);\\n  return s.match(/\\\\[object (.*?)\\\\]/)[1].toLowerCase();\\n};\\n\\n['Null',\\n 'Undefined',\\n 'Object',\\n 'Array',\\n 'String',\\n 'Number',\\n 'Boolean',\\n 'Function',\\n 'RegExp'\\n].forEach(function (t) {\\n  type['is' + t] = function (o) {\\n    return type(o) === t.toLowerCase();\\n  };\\n});\\n\\ntype.isObject({}) // true\\ntype.isNumber(NaN) // true\\ntype.isRegExp(/abc/) // true\\n\")])])]),v(\"h3\",{attrs:{id:\"tolocalestring\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tolocalestring\"}},[e._v(\"#\")]),e._v(\" toLocaleString()\")]),e._v(\" \"),v(\"p\",[v(\"code\",[e._v(\"Object.prototype.toLocaleString\")]),e._v(\"方法与\"),v(\"code\",[e._v(\"toString\")]),e._v(\"的返回结果相同，也是返回一个值的字符串形式。\")]),e._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[e._v('var obj = {};\\nobj.toString(obj) // \"[object Object]\"\\nobj.toLocaleString(obj) // \"[object Object]\"\\n')])])]),v(\"p\",[e._v(\"这个方法的主要作用是留出一个接口，让各种不同的对象实现自己版本的\"),v(\"code\",[e._v(\"toLocaleString\")]),e._v(\"，用来返回针对某些地域的特定的值。\")]),e._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[e._v(\"var person = {\\n  toString: function () {\\n    return 'Henry Norman Bethune';\\n  },\\n  toLocaleString: function () {\\n    return '白求恩';\\n  }\\n};\\n\\nperson.toString() // Henry Norman Bethune\\nperson.toLocaleString() // 白求恩\\n\")])])]),v(\"p\",[e._v(\"上面代码中，\"),v(\"code\",[e._v(\"toString()\")]),e._v(\"方法返回对象的一般字符串形式，\"),v(\"code\",[e._v(\"toLocaleString()\")]),e._v(\"方法返回本地的字符串形式。\")]),e._v(\" \"),v(\"p\",[e._v(\"目前，主要有三个对象自定义了\"),v(\"code\",[e._v(\"toLocaleString\")]),e._v(\"方法。\")]),e._v(\" \"),v(\"ul\",[v(\"li\",[e._v(\"Array.prototype.toLocaleString()\")]),e._v(\" \"),v(\"li\",[e._v(\"Number.prototype.toLocaleString()\")]),e._v(\" \"),v(\"li\",[e._v(\"Date.prototype.toLocaleString()\")])]),e._v(\" \"),v(\"p\",[e._v(\"举例来说，日期的实例对象的\"),v(\"code\",[e._v(\"toString\")]),e._v(\"和\"),v(\"code\",[e._v(\"toLocaleString\")]),e._v(\"返回值就不一样，而且\"),v(\"code\",[e._v(\"toLocaleString\")]),e._v(\"的返回值跟用户设定的所在地域相关。\")]),e._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[e._v('var date = new Date();\\ndate.toString() // \"Tue Jan 01 2018 12:01:33 GMT+0800 (CST)\"\\ndate.toLocaleString() // \"1/01/2018, 12:01:33 PM\"\\n')])])]),v(\"h3\",{attrs:{id:\"hasownproperty\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#hasownproperty\"}},[e._v(\"#\")]),e._v(\" hasOwnProperty()\")]),e._v(\" \"),v(\"p\",[v(\"code\",[e._v(\"Object.prototype.hasOwnProperty\")]),e._v(\"方法接受一个字符串作为参数，返回一个布尔值，表示该实例对象自身是否具有该属性。\")]),e._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[e._v(\"var obj = {\\n  p: 123\\n};\\n\\nobj.hasOwnProperty('p') // true\\nobj.hasOwnProperty('toString') // false\\n\")])])]),v(\"p\",[e._v(\"上面代码中，对象\"),v(\"code\",[e._v(\"obj\")]),e._v(\"自身具有\"),v(\"code\",[e._v(\"p\")]),e._v(\"属性，所以返回\"),v(\"code\",[e._v(\"true\")]),e._v(\"。\"),v(\"code\",[e._v(\"toString\")]),e._v(\"属性是继承的，所以返回\"),v(\"code\",[e._v(\"false\")]),e._v(\"。\")])])}),[],!1,null,null,null);t.default=c.exports}}]);","extractedComments":[]}