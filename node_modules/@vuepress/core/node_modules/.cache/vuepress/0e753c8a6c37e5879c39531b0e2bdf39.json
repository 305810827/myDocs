{"remainingRequest":"/Applications/工作/前端项目/vuePress/myDocs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Applications/工作/前端项目/vuePress/myDocs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Applications/工作/前端项目/vuePress/myDocs/node_modules/vue-loader/lib/index.js??ref--1-1!/Applications/工作/前端项目/vuePress/myDocs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Applications/工作/前端项目/vuePress/myDocs/docs/question/wanted-order.md?vue&type=template&id=4a7481f2&","dependencies":[{"path":"/Applications/工作/前端项目/vuePress/myDocs/docs/question/wanted-order.md","mtime":1640571594090},{"path":"/Applications/工作/前端项目/vuePress/myDocs/node_modules/cache-loader/dist/cjs.js","mtime":1610678018000},{"path":"/Applications/工作/前端项目/vuePress/myDocs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1632389616666},{"path":"/Applications/工作/前端项目/vuePress/myDocs/node_modules/cache-loader/dist/cjs.js","mtime":1610678018000},{"path":"/Applications/工作/前端项目/vuePress/myDocs/node_modules/vue-loader/lib/index.js","mtime":1632389616666},{"path":"/Applications/工作/前端项目/vuePress/myDocs/node_modules/@vuepress/markdown-loader/index.js","mtime":1651045849710}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}